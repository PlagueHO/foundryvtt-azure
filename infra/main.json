{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.1-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
    "_EXPERIMENTAL_FEATURES_ENABLED": [
      "Extensibility"
    ],
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "14373548204730684126"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "azd": {
          "type": "location"
        },
        "description": "Location for all resources"
      },
      "minLength": 1
    },
    "principalId": {
      "type": "string",
      "metadata": {
        "description": "Id of the user or app to assign application roles."
      }
    },
    "principalIdType": {
      "type": "string",
      "defaultValue": "User",
      "allowedValues": [
        "User",
        "ServicePrincipal"
      ],
      "metadata": {
        "description": "Type of the principal referenced by principalId."
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[format('rg-{0}', parameters('environmentName'))]",
      "metadata": {
        "azd": {
          "type": "resourceGroup"
        },
        "description": "The Azure resource group where new resources will be deployed."
      }
    },
    "foundryUsername": {
      "type": "securestring",
      "metadata": {
        "description": "Your Foundry VTT username."
      }
    },
    "foundryPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Your Foundry VTT password."
      }
    },
    "foundryAdminKey": {
      "type": "securestring",
      "metadata": {
        "description": "The admin key to set Foundry VTT up with."
      }
    },
    "foundryVttDockerImageTag": {
      "type": "string",
      "defaultValue": "release",
      "metadata": {
        "description": "Docker image tag to use for the Foundry VTT image."
      }
    },
    "deployNetworking": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy a Virtual Network for network isolation. This may be required for some enviornments."
      }
    },
    "storageConfiguration": {
      "type": "string",
      "defaultValue": "Premium_100GB",
      "allowedValues": [
        "Premium_100GB",
        "Standard_100GB"
      ],
      "metadata": {
        "description": "The configuration of the Azure Storage SKU to use for storing Foundry VTT user data."
      }
    },
    "storagePublicAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable public access to the Azure Storage Account. This is not recommended for production environments."
      }
    },
    "storageResourceLockEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Lock the storage account to prevent deletion. Must be removed before azd down."
      }
    },
    "computeService": {
      "type": "string",
      "defaultValue": "Web App",
      "allowedValues": [
        "Web App",
        "Container Instance"
      ],
      "metadata": {
        "description": "The compute service to use for deploying Foundry VTT."
      }
    },
    "appServicePlanSkuName": {
      "type": "string",
      "defaultValue": "P0v3",
      "allowedValues": [
        "F1",
        "B1",
        "B2",
        "B3",
        "P1v2",
        "P2v2",
        "P3v2",
        "P0v3",
        "P1v3",
        "P2v3",
        "P3v3",
        "P0v4",
        "P1v4",
        "P2v4",
        "P3v4"
      ],
      "metadata": {
        "description": "The Azure App Service SKU for running the Foundry VTT server and optionally the DDB-Proxy. Only used when deploying into an Azure Web App."
      }
    },
    "containerInstanceCpu": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 4,
      "metadata": {
        "description": "The CPUs to assign to the Azure Container Instance for running the Foundry VTT server. Only used when deploying into an Azure Container Instance."
      }
    },
    "containerInstanceMemoryInGB": {
      "type": "string",
      "defaultValue": "2",
      "allowedValues": [
        "1",
        "1.5",
        "2",
        "2.5",
        "3",
        "3.5",
        "4",
        "4.5",
        "5",
        "5.5",
        "6",
        "6.5",
        "7",
        "7.5",
        "8",
        "8.5",
        "9",
        "9.5",
        "10",
        "10.5",
        "11",
        "11.5",
        "12",
        "12.5",
        "13",
        "13.5",
        "14",
        "14.5",
        "15",
        "15.5",
        "16"
      ],
      "metadata": {
        "description": "The Memory in GB to assign to the Azure Container Instance for running the Foundry VTT server. Only used when deploying into an Azure Container Instance."
      }
    },
    "deployDdbProxy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy a D&D Beyond proxy into the app service plan."
      }
    },
    "bastionHostDeploy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy a Bastion host into the VNET."
      }
    },
    "deployDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Azure Log Analytics and configure diagnostics for resources. Default is false."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "aiSearchSearchServices": "aisrch-",
      "aiServicesAccounts": "aisvc-",
      "aiFoundryHubs": "aihub-",
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des",
      "computeDisks": "disk",
      "computeDisksOs": "osdisk",
      "computeGalleries": "gal",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "cosmosDBAccounts": "cdb",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopics": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "loadTesting": "lt-",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    },
    "abbrs": "[variables('$fxv#0')]",
    "virtualNetworkName": "[format('{0}{1}', variables('abbrs').networkVirtualNetworks, parameters('environmentName'))]",
    "storageAccountName": "[take(toLower(replace(parameters('environmentName'), '-', '')), 24)]",
    "appServicePlanName": "[take(format('{0}{1}', variables('abbrs').webSitesAppService, parameters('environmentName')), 60)]",
    "webAppFoundryVttName": "[parameters('environmentName')]",
    "webAppDdbProxyName": "[format('{0}ddbproxy', parameters('environmentName'))]",
    "containerInstanceFoundryVttName": "[format('{0}{1}', variables('abbrs').containerInstanceContainerGroups, parameters('environmentName'))]",
    "bastionHostName": "[format('{0}{1}', variables('abbrs').networkBastionHosts, parameters('environmentName'))]",
    "keyVaultPrivateDnsZoneName": "privatelink.vaultcore.azure.net",
    "logAnalyticsWorkspaceName": "[take(format('{0}{1}', variables('abbrs').operationalInsightsWorkspaces, parameters('environmentName')), 63)]",
    "keyVaultName": "[take(format('kv{0}', replace(parameters('environmentName'), '-', '')), 24)]",
    "storageAccountKeySecretName": "storageAccountKey",
    "foundryUsernameSecretName": "foundryUsername",
    "foundryPasswordSecretName": "foundryPassword",
    "foundryAdminKeySecretName": "foundryAdminKey",
    "foundryVttDockerImageName": "felddy/foundryvtt",
    "ddbProxyDockerImageName": "ghcr.io/mrprimate/ddb-proxy",
    "ddbProxyDockerImageTag": "latest",
    "sendToLogAnalyticsName": "[format('send-to-loganalytics-{0}', parameters('environmentName'))]",
    "effectiveDeployNetworking": "[and(parameters('deployNetworking'), equals(parameters('computeService'), 'Web App'))]",
    "storageConfigurationMap": {
      "Premium_100GB": {
        "kind": "FileStorage",
        "sku": "Premium_LRS",
        "shareQuota": 100
      },
      "Standard_100GB": {
        "kind": "StorageV2",
        "sku": "Standard_LRS",
        "shareQuota": 100
      }
    },
    "endpoints": "[if(variables('effectiveDeployNetworking'), createArray(createObject('name', 'file', 'privateEndpointConnections', createArray(createObject('privateLinkServiceConnectionState', createObject('status', 'Approved', 'description', 'Approved by Bicep template'))))), createArray())]"
  },
  "resources": {
    "rg": {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    "storageAccountReference": {
      "existing": true,
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "name": "[variables('storageAccountName')]",
      "dependsOn": [
        "rg",
        "storageAccount"
      ]
    },
    "logAnalyticsWorkspace": {
      "condition": "[parameters('deployDiagnostics')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "log-analytics-workspace-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('logAnalyticsWorkspaceName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "1749032521457140145"
            },
            "name": "Log Analytics Workspaces",
            "description": "This module deploys a Log Analytics Workspace."
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "useThisWorkspace": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Instead of using an external reference, use the deployed instance as the target for its diagnostic settings. If set to `true`, the `workspaceResourceId` property is ignored."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              }
            },
            "gallerySolutionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                  }
                },
                "plan": {
                  "$ref": "#/definitions/solutionPlanType",
                  "metadata": {
                    "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the gallery solutions to be created in the log analytics workspace."
              }
            },
            "storageInsightsConfigType": {
              "type": "object",
              "properties": {
                "storageAccountResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the storage account to be linked."
                  }
                },
                "containers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The names of the blob containers that the workspace should read."
                  }
                },
                "tables": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of tables to be read by the workspace."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the storage insights configuration."
              }
            },
            "linkedServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the linked service."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                  }
                },
                "writeAccessResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the linked service."
              }
            },
            "linkedStorageAccountType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the link."
                  }
                },
                "storageAccountIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minLength": 1,
                  "metadata": {
                    "description": "Required. Linked storage accounts resources Ids."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the linked storage account."
              }
            },
            "savedSearchType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the saved search."
                  }
                },
                "etag": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                  }
                },
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The category of the saved search. This helps the user to find a saved search faster."
                  }
                },
                "displayName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Display name for the search."
                  }
                },
                "functionAlias": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The function alias if query serves as a function."
                  }
                },
                "functionParameters": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: 'param-name1:type1 = default_value1, param-name2:type2 = default_value2'. For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                  }
                },
                "query": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The query expression for the saved search."
                  }
                },
                "tags": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The tags attached to the saved search."
                  }
                },
                "version": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version number of the query language. The current version is 2 and is the default."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the saved search."
              }
            },
            "dataExportType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the data export."
                  }
                },
                "destination": {
                  "$ref": "#/definitions/destinationType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The destination of the data export."
                  }
                },
                "enable": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the data export."
                  }
                },
                "tableNames": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. The list of table names to export."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the data export."
              }
            },
            "dataSourceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the data source."
                  }
                },
                "kind": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The kind of data source."
                  }
                },
                "linkedResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource id of the resource that will be linked to the workspace."
                  }
                },
                "eventLogName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the event log to configure when kind is WindowsEvent."
                  }
                },
                "eventTypes": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The event types to configure when kind is WindowsEvent."
                  }
                },
                "objectName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                  }
                },
                "instanceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                  }
                },
                "intervalSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                  }
                },
                "performanceCounters": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                  }
                },
                "counterName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                  }
                },
                "state": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                  }
                },
                "syslogName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. System log to configure when kind is LinuxSyslog."
                  }
                },
                "syslogSeverities": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Severities to configure when kind is LinuxSyslog."
                  }
                },
                "tags": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.OperationalInsights/workspaces/dataSources@2025-02-01#properties/tags"
                    },
                    "description": "Optional. Tags to configure in the resource."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the data source."
              }
            },
            "tableType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the table."
                  }
                },
                "plan": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The plan for the table."
                  }
                },
                "restoredLogs": {
                  "$ref": "#/definitions/restoredLogsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The restored logs for the table."
                  }
                },
                "schema": {
                  "$ref": "#/definitions/schemaType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The schema for the table."
                  }
                },
                "searchResults": {
                  "$ref": "#/definitions/searchResultsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The search results for the table."
                  }
                },
                "retentionInDays": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The retention in days for the table."
                  }
                },
                "totalRetentionInDays": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The total retention in days for the table."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The role assignments for the table."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the custom table."
              }
            },
            "workspaceFeaturesType": {
              "type": "object",
              "properties": {
                "disableLocalAuth": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Disable Non-EntraID based Auth. Default is true."
                  }
                },
                "enableDataExport": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Flag that indicate if data should be exported."
                  }
                },
                "enableLogAccessUsingOnlyResourcePermissions": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable log access using only resource permissions. Default is false."
                  }
                },
                "immediatePurgeDataOn30Days": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Flag that describes if we want to remove the data after 30 days."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Features of the workspace."
              }
            },
            "workspaceReplicationType": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies whether the replication is enabled or not. When true, workspace configuration and data is replicated to the specified location."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The location to which the workspace is replicated. Required if replication is enabled."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Replication properties of the workspace."
              }
            },
            "_1.columnType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The column name."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "boolean",
                    "dateTime",
                    "dynamic",
                    "guid",
                    "int",
                    "long",
                    "real",
                    "string"
                  ],
                  "metadata": {
                    "description": "Required. The column type."
                  }
                },
                "dataTypeHint": {
                  "type": "string",
                  "allowedValues": [
                    "armPath",
                    "guid",
                    "ip",
                    "uri"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The column data type logical hint."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The column description."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Column display name."
                  }
                }
              },
              "metadata": {
                "description": "The parameters of the table column.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "destinationType": {
              "type": "object",
              "properties": {
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The destination resource ID."
                  }
                },
                "metaData": {
                  "type": "object",
                  "properties": {
                    "eventHubName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The destination metadata."
                  }
                }
              },
              "metadata": {
                "description": "The data export destination properties.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "data-export/main.bicep"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "restoredLogsType": {
              "type": "object",
              "properties": {
                "sourceTable": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The table to restore data from."
                  }
                },
                "startRestoreTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to start the restore from (UTC)."
                  }
                },
                "endRestoreTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to end the restore by (UTC)."
                  }
                }
              },
              "metadata": {
                "description": "The parameters of the restore operation that initiated the table.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "schemaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The table name."
                  }
                },
                "columns": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.columnType"
                  },
                  "metadata": {
                    "description": "Required. A list of table custom columns."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The table description."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The table display name."
                  }
                }
              },
              "metadata": {
                "description": "The table schema.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "searchResultsType": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The search job query."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The search description."
                  }
                },
                "limit": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Limit the search job to return up to specified number of rows."
                  }
                },
                "startSearchTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to start the search from (UTC)."
                  }
                },
                "endSearchTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to end the search by (UTC)."
                  }
                }
              },
              "metadata": {
                "description": "The parameters of the search job that initiated the table.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "solutionPlanType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                  }
                },
                "product": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                  }
                },
                "publisher": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/operations-management/solution:0.3.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "CapacityReservation",
                "Free",
                "LACluster",
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The name of the SKU."
              }
            },
            "skuCapacityReservationLevel": {
              "type": "int",
              "defaultValue": 100,
              "minValue": 100,
              "maxValue": 5000,
              "metadata": {
                "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
              }
            },
            "storageInsightsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/storageInsightsConfigType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of storage accounts to be read by the workspace."
              }
            },
            "linkedServices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/linkedServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of services to be linked."
              }
            },
            "linkedStorageAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/linkedStorageAccountType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
              }
            },
            "savedSearches": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/savedSearchType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Kusto Query Language searches to save."
              }
            },
            "dataExports": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataExportType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. LAW data export instances to be deployed."
              }
            },
            "dataSources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataSourceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. LAW data sources to configure."
              }
            },
            "tables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tableType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. LAW custom tables to be deployed."
              }
            },
            "gallerySolutions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gallerySolutionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
              }
            },
            "onboardWorkspaceToSentinel": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Onboard the Log Analytics Workspace to Sentinel. Requires 'SecurityInsights' solution to be in gallerySolutions."
              }
            },
            "dataRetention": {
              "type": "int",
              "defaultValue": 365,
              "minValue": 0,
              "maxValue": 730,
              "metadata": {
                "description": "Optional. Number of days data will be retained for."
              }
            },
            "dailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "minValue": -1,
              "metadata": {
                "description": "Optional. The workspace daily quota for ingestion."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics ingestion."
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics query."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
              }
            },
            "features": {
              "$ref": "#/definitions/workspaceFeaturesType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The workspace features."
              }
            },
            "replication": {
              "$ref": "#/definitions/workspaceReplicationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The workspace replication properties."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "forceCmkForQuery": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.OperationalInsights/workspaces@2025-02-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.12.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "logAnalyticsWorkspace": {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2025-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "features": {
                  "searchVersion": 1,
                  "enableLogAccessUsingOnlyResourcePermissions": "[coalesce(tryGet(parameters('features'), 'enableLogAccessUsingOnlyResourcePermissions'), false())]",
                  "disableLocalAuth": "[coalesce(tryGet(parameters('features'), 'disableLocalAuth'), true())]",
                  "enableDataExport": "[tryGet(parameters('features'), 'enableDataExport')]",
                  "immediatePurgeDataOn30Days": "[tryGet(parameters('features'), 'immediatePurgeDataOn30Days')]"
                },
                "sku": {
                  "name": "[parameters('skuName')]",
                  "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                },
                "retentionInDays": "[parameters('dataRetention')]",
                "workspaceCapping": {
                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                },
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                "forceCmkForQuery": "[parameters('forceCmkForQuery')]",
                "replication": "[parameters('replication')]"
              },
              "identity": "[variables('identity')]"
            },
            "logAnalyticsWorkspace_diagnosticSettings": {
              "copy": {
                "name": "logAnalyticsWorkspace_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[if(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'useThisWorkspace'), false()), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_sentinelOnboarding": {
              "condition": "[and(not(empty(filter(coalesce(parameters('gallerySolutions'), createArray()), lambda('item', startsWith(lambdaVariables('item').name, 'SecurityInsights'))))), parameters('onboardWorkspaceToSentinel'))]",
              "type": "Microsoft.SecurityInsights/onboardingStates",
              "apiVersion": "2024-03-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "default",
              "properties": {},
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_roleAssignments": {
              "copy": {
                "name": "logAnalyticsWorkspace_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_storageInsightConfigs": {
              "copy": {
                "name": "logAnalyticsWorkspace_storageInsightConfigs",
                "count": "[length(coalesce(parameters('storageInsightsConfigs'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "containers": {
                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'containers')]"
                  },
                  "tables": {
                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'tables')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()].storageAccountResourceId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "1306323182548882150"
                    },
                    "name": "Log Analytics Workspace Storage Insight Configs",
                    "description": "This module deploys a Log Analytics Workspace Storage Insight Config."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the storage insights config."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Azure Resource Manager ID of the storage account resource."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The names of the blob containers that the workspace should read."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The names of the Azure tables that the workspace should read."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                    },
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "storageinsightconfig": {
                      "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "containers": "[parameters('containers')]",
                        "tables": "[parameters('tables')]",
                        "storageAccount": {
                          "id": "[parameters('storageAccountResourceId')]",
                          "key": "[listKeys('storageAccount', '2024-01-01').keys[0].value]"
                        }
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed storage insights configuration."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the storage insight configuration is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the storage insights configuration."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_linkedServices": {
              "copy": {
                "name": "logAnalyticsWorkspace_linkedServices",
                "count": "[length(coalesce(parameters('linkedServices'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('linkedServices'), createArray())[copyIndex()].name]"
                  },
                  "resourceId": {
                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'resourceId')]"
                  },
                  "writeAccessResourceId": {
                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'writeAccessResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "5230241501765697269"
                    },
                    "name": "Log Analytics Workspace Linked Services",
                    "description": "This module deploys a Log Analytics Workspace Linked Service."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the link."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                      }
                    },
                    "writeAccessResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/linkedServices@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "linkedService": {
                      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resourceId": "[parameters('resourceId')]",
                        "writeAccessResourceId": "[parameters('writeAccessResourceId')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed linked service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed linked service."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the linked service is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_linkedStorageAccounts": {
              "copy": {
                "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                "count": "[length(coalesce(parameters('linkedStorageAccounts'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].name]"
                  },
                  "storageAccountIds": {
                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].storageAccountIds]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "10372135754202496594"
                    },
                    "name": "Log Analytics Workspace Linked Storage Accounts",
                    "description": "This module deploys a Log Analytics Workspace Linked Storage Account."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "Query",
                        "Alerts",
                        "CustomLogs",
                        "AzureWatson"
                      ],
                      "metadata": {
                        "description": "Required. Name of the link."
                      }
                    },
                    "storageAccountIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Linked storage accounts resources Ids."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "linkedStorageAccount": {
                      "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "properties": {
                        "storageAccountIds": "[parameters('storageAccountIds')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed linked storage account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed linked storage account."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the linked storage account is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_savedSearches": {
              "copy": {
                "name": "logAnalyticsWorkspace_savedSearches",
                "count": "[length(coalesce(parameters('savedSearches'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[format('{0}{1}', coalesce(parameters('savedSearches'), createArray())[copyIndex()].name, uniqueString(deployment().name))]"
                  },
                  "etag": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'etag')]"
                  },
                  "displayName": {
                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].displayName]"
                  },
                  "category": {
                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].category]"
                  },
                  "query": {
                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].query]"
                  },
                  "functionAlias": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionAlias')]"
                  },
                  "functionParameters": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionParameters')]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'tags')]"
                  },
                  "version": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'version')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "9015459905306126128"
                    },
                    "name": "Log Analytics Workspace Saved Searches",
                    "description": "This module deploys a Log Analytics Workspace Saved Search."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the saved search."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Display name for the search."
                      }
                    },
                    "category": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Query category."
                      }
                    },
                    "query": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Kusto Query to be stored."
                      }
                    },
                    "tags": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/savedSearches@2025-02-01#properties/properties/properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    },
                    "functionAlias": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The function alias if query serves as a function."
                      }
                    },
                    "functionParameters": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                      }
                    },
                    "version": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The version number of the query language."
                      }
                    },
                    "etag": {
                      "type": "string",
                      "defaultValue": "*",
                      "metadata": {
                        "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "savedSearch": {
                      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "properties": {
                        "etag": "[parameters('etag')]",
                        "tags": "[coalesce(parameters('tags'), createArray())]",
                        "displayName": "[parameters('displayName')]",
                        "category": "[parameters('category')]",
                        "query": "[parameters('query')]",
                        "functionAlias": "[parameters('functionAlias')]",
                        "functionParameters": "[parameters('functionParameters')]",
                        "version": "[parameters('version')]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed saved search."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the saved search is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed saved search."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace",
                "logAnalyticsWorkspace_linkedStorageAccounts"
              ]
            },
            "logAnalyticsWorkspace_dataExports": {
              "copy": {
                "name": "logAnalyticsWorkspace_dataExports",
                "count": "[length(coalesce(parameters('dataExports'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('dataExports'), createArray())[copyIndex()].name]"
                  },
                  "destination": {
                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'destination')]"
                  },
                  "enable": {
                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'enable')]"
                  },
                  "tableNames": {
                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'tableNames')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "8586520532175356447"
                    },
                    "name": "Log Analytics Workspace Data Exports",
                    "description": "This module deploys a Log Analytics Workspace Data Export."
                  },
                  "definitions": {
                    "destinationType": {
                      "type": "object",
                      "properties": {
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The destination resource ID."
                          }
                        },
                        "metaData": {
                          "type": "object",
                          "properties": {
                            "eventHubName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The destination metadata."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The data export destination properties."
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 4,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. The data export rule name."
                      }
                    },
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                      }
                    },
                    "destination": {
                      "$ref": "#/definitions/destinationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Destination properties."
                      }
                    },
                    "enable": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Active when enabled."
                      }
                    },
                    "tableNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('workspaceName')]"
                    },
                    "dataExport": {
                      "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                      "properties": {
                        "destination": "[parameters('destination')]",
                        "enable": "[parameters('enable')]",
                        "tableNames": "[parameters('tableNames')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the data export."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the data export."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the data export was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_dataSources": {
              "copy": {
                "name": "logAnalyticsWorkspace_dataSources",
                "count": "[length(coalesce(parameters('dataSources'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].name]"
                  },
                  "kind": {
                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].kind]"
                  },
                  "linkedResourceId": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'linkedResourceId')]"
                  },
                  "eventLogName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventLogName')]"
                  },
                  "eventTypes": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventTypes')]"
                  },
                  "objectName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'objectName')]"
                  },
                  "instanceName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'instanceName')]"
                  },
                  "intervalSeconds": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'intervalSeconds')]"
                  },
                  "counterName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'counterName')]"
                  },
                  "state": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'state')]"
                  },
                  "syslogName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogName')]"
                  },
                  "syslogSeverities": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogSeverities')]"
                  },
                  "performanceCounters": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'performanceCounters')]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "8336916453932906250"
                    },
                    "name": "Log Analytics Workspace Datasources",
                    "description": "This module deploys a Log Analytics Workspace Data Source."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the data source."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "AzureActivityLog",
                      "allowedValues": [
                        "AzureActivityLog",
                        "WindowsEvent",
                        "WindowsPerformanceCounter",
                        "IISLogs",
                        "LinuxSyslog",
                        "LinuxSyslogCollection",
                        "LinuxPerformanceObject",
                        "LinuxPerformanceCollection"
                      ],
                      "metadata": {
                        "description": "Optional. The kind of the data source."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/dataSources@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    },
                    "linkedResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the resource to be linked."
                      }
                    },
                    "eventLogName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                      }
                    },
                    "eventTypes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                      }
                    },
                    "objectName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "instanceName": {
                      "type": "string",
                      "defaultValue": "*",
                      "metadata": {
                        "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "intervalSeconds": {
                      "type": "int",
                      "defaultValue": 60,
                      "metadata": {
                        "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "performanceCounters": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                      }
                    },
                    "counterName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                      }
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                      }
                    },
                    "syslogName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. System log to configure when kind is LinuxSyslog."
                      }
                    },
                    "syslogSeverities": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Severities to configure when kind is LinuxSyslog."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "dataSource": {
                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "kind": "[parameters('kind')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                        "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                        "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                        "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                        "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                        "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                        "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                        "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                        "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                        "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                        "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed data source."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the data source is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed data source."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_tables": {
              "copy": {
                "name": "logAnalyticsWorkspace_tables",
                "count": "[length(coalesce(parameters('tables'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('tables'), createArray())[copyIndex()].name]"
                  },
                  "plan": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'plan')]"
                  },
                  "schema": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'schema')]"
                  },
                  "retentionInDays": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'retentionInDays')]"
                  },
                  "totalRetentionInDays": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'totalRetentionInDays')]"
                  },
                  "restoredLogs": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'restoredLogs')]"
                  },
                  "searchResults": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'searchResults')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "315390662258960765"
                    },
                    "name": "Log Analytics Workspace Tables",
                    "description": "This module deploys a Log Analytics Workspace Table."
                  },
                  "definitions": {
                    "restoredLogsType": {
                      "type": "object",
                      "properties": {
                        "sourceTable": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The table to restore data from."
                          }
                        },
                        "startRestoreTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to start the restore from (UTC)."
                          }
                        },
                        "endRestoreTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to end the restore by (UTC)."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The parameters of the restore operation that initiated the table."
                      }
                    },
                    "schemaType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The table name."
                          }
                        },
                        "columns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/columnType"
                          },
                          "metadata": {
                            "description": "Required. A list of table custom columns."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The table description."
                          }
                        },
                        "displayName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The table display name."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The table schema."
                      }
                    },
                    "columnType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The column name."
                          }
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "boolean",
                            "dateTime",
                            "dynamic",
                            "guid",
                            "int",
                            "long",
                            "real",
                            "string"
                          ],
                          "metadata": {
                            "description": "Required. The column type."
                          }
                        },
                        "dataTypeHint": {
                          "type": "string",
                          "allowedValues": [
                            "armPath",
                            "guid",
                            "ip",
                            "uri"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The column data type logical hint."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The column description."
                          }
                        },
                        "displayName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Column display name."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The parameters of the table column."
                      }
                    },
                    "searchResultsType": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The search job query."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The search description."
                          }
                        },
                        "limit": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Limit the search job to return up to specified number of rows."
                          }
                        },
                        "startSearchTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to start the search from (UTC)."
                          }
                        },
                        "endSearchTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to end the search by (UTC)."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The parameters of the search job that initiated the table."
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the table."
                      }
                    },
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                      }
                    },
                    "plan": {
                      "type": "string",
                      "defaultValue": "Analytics",
                      "allowedValues": [
                        "Basic",
                        "Analytics"
                      ],
                      "metadata": {
                        "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                      }
                    },
                    "restoredLogs": {
                      "$ref": "#/definitions/restoredLogsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Restore parameters."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "maxValue": 730,
                      "metadata": {
                        "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/schemaType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Table's schema."
                      }
                    },
                    "searchResults": {
                      "$ref": "#/definitions/searchResultsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Parameters of the search job that initiated this table."
                      }
                    },
                    "totalRetentionInDays": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "maxValue": 2555,
                      "metadata": {
                        "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('workspaceName')]"
                    },
                    "table": {
                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                      "properties": {
                        "plan": "[parameters('plan')]",
                        "restoredLogs": "[parameters('restoredLogs')]",
                        "retentionInDays": "[parameters('retentionInDays')]",
                        "schema": "[parameters('schema')]",
                        "searchResults": "[parameters('searchResults')]",
                        "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                      }
                    },
                    "table_roleAssignments": {
                      "copy": {
                        "name": "table_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "table"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the table."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the table was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_solutions": {
              "copy": {
                "name": "logAnalyticsWorkspace_solutions",
                "count": "[length(coalesce(parameters('gallerySolutions'), createArray()))]"
              },
              "condition": "[not(empty(parameters('gallerySolutions')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "plan": {
                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].plan]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "10255889523646649592"
                    },
                    "name": "Operations Management Solutions",
                    "description": "This module deploys an Operations Management Solution.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "solutionPlanType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                          }
                        },
                        "product": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                      }
                    },
                    "plan": {
                      "$ref": "#/definitions/solutionPlanType",
                      "metadata": {
                        "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.3.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "logAnalyticsWorkspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "solution": {
                      "type": "Microsoft.OperationsManagement/solutions",
                      "apiVersion": "2015-11-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                      },
                      "plan": {
                        "name": "[coalesce(tryGet(parameters('plan'), 'name'), parameters('name'))]",
                        "promotionCode": "",
                        "product": "[parameters('plan').product]",
                        "publisher": "[coalesce(tryGet(parameters('plan'), 'publisher'), 'Microsoft')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed solution."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed solution."
                      },
                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the solution is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('solution', '2015-11-01-preview', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed log analytics workspace."
              },
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed log analytics workspace."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed log analytics workspace."
              },
              "value": "[parameters('name')]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID associated with the workspace."
              },
              "value": "[reference('logAnalyticsWorkspace').customerId]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('logAnalyticsWorkspace', '2025-02-01', 'full').location]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('logAnalyticsWorkspace', '2025-02-01', 'full'), 'identity'), 'principalId')]"
            },
            "primarySharedKey": {
              "type": "securestring",
              "metadata": {
                "description": "The primary shared key of the log analytics workspace."
              },
              "value": "[listKeys('logAnalyticsWorkspace', '2025-02-01').primarySharedKey]"
            },
            "secondarySharedKey": {
              "type": "securestring",
              "metadata": {
                "description": "The secondary shared key of the log analytics workspace."
              },
              "value": "[listKeys('logAnalyticsWorkspace', '2025-02-01').secondarySharedKey]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "networkSecurityGroupWebApp": {
      "condition": "[variables('effectiveDeployNetworking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "network-security-group-web-app-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[take(format('{0}{1}-webApp', variables('abbrs').networkNetworkSecurityGroups, parameters('environmentName')), 60)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "securityRules": {
            "value": []
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "2305747478751645177"
            },
            "name": "Network Security Groups",
            "description": "This module deploys a Network security Group (NSG)."
          },
          "definitions": {
            "securityRuleType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the security rule."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "Required. Whether network traffic is allowed or denied."
                      }
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The description of the security rule."
                      }
                    },
                    "destinationAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                      }
                    },
                    "destinationAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                      }
                    },
                    "destinationApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as destination."
                      }
                    },
                    "destinationPortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "destinationPortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port ranges."
                      }
                    },
                    "direction": {
                      "type": "string",
                      "allowedValues": [
                        "Inbound",
                        "Outbound"
                      ],
                      "metadata": {
                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                      }
                    },
                    "priority": {
                      "type": "int",
                      "minValue": 100,
                      "maxValue": 4096,
                      "metadata": {
                        "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                      }
                    },
                    "protocol": {
                      "type": "string",
                      "allowedValues": [
                        "*",
                        "Ah",
                        "Esp",
                        "Icmp",
                        "Tcp",
                        "Udp"
                      ],
                      "metadata": {
                        "description": "Required. Network protocol this rule applies to."
                      }
                    },
                    "sourceAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                      }
                    },
                    "sourceAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP ranges."
                      }
                    },
                    "sourceApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as source."
                      }
                    },
                    "sourcePortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "sourcePortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port ranges."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The properties of the security rule."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a security rule."
              }
            },
            "diagnosticSettingLogsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Network Security Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "securityRules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/securityRuleType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
              }
            },
            "flushConnection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the NSG resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "networkSecurityGroup": {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "securityRules",
                    "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                      "properties": {
                        "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                        "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                        "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                        "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                        "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                        "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                        "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                        "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                        "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                        "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                        "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                        "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                        "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                        "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                        "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                      }
                    }
                  }
                ],
                "flushConnection": "[parameters('flushConnection')]"
              }
            },
            "networkSecurityGroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_diagnosticSettings": {
              "copy": {
                "name": "networkSecurityGroup_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_roleAssignments": {
              "copy": {
                "name": "networkSecurityGroup_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the network security group was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the network security group."
              },
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the network security group."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "networkSecurityGroupStorage": {
      "condition": "[variables('effectiveDeployNetworking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "network-security-group-storage-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[take(format('{0}{1}-storage', variables('abbrs').networkNetworkSecurityGroups, parameters('environmentName')), 60)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "securityRules": {
            "value": []
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "2305747478751645177"
            },
            "name": "Network Security Groups",
            "description": "This module deploys a Network security Group (NSG)."
          },
          "definitions": {
            "securityRuleType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the security rule."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "Required. Whether network traffic is allowed or denied."
                      }
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The description of the security rule."
                      }
                    },
                    "destinationAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                      }
                    },
                    "destinationAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                      }
                    },
                    "destinationApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as destination."
                      }
                    },
                    "destinationPortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "destinationPortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port ranges."
                      }
                    },
                    "direction": {
                      "type": "string",
                      "allowedValues": [
                        "Inbound",
                        "Outbound"
                      ],
                      "metadata": {
                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                      }
                    },
                    "priority": {
                      "type": "int",
                      "minValue": 100,
                      "maxValue": 4096,
                      "metadata": {
                        "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                      }
                    },
                    "protocol": {
                      "type": "string",
                      "allowedValues": [
                        "*",
                        "Ah",
                        "Esp",
                        "Icmp",
                        "Tcp",
                        "Udp"
                      ],
                      "metadata": {
                        "description": "Required. Network protocol this rule applies to."
                      }
                    },
                    "sourceAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                      }
                    },
                    "sourceAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP ranges."
                      }
                    },
                    "sourceApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as source."
                      }
                    },
                    "sourcePortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "sourcePortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port ranges."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The properties of the security rule."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a security rule."
              }
            },
            "diagnosticSettingLogsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Network Security Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "securityRules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/securityRuleType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
              }
            },
            "flushConnection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the NSG resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "networkSecurityGroup": {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "securityRules",
                    "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                      "properties": {
                        "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                        "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                        "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                        "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                        "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                        "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                        "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                        "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                        "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                        "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                        "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                        "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                        "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                        "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                        "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                      }
                    }
                  }
                ],
                "flushConnection": "[parameters('flushConnection')]"
              }
            },
            "networkSecurityGroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_diagnosticSettings": {
              "copy": {
                "name": "networkSecurityGroup_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_roleAssignments": {
              "copy": {
                "name": "networkSecurityGroup_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the network security group was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the network security group."
              },
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the network security group."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "networkSecurityGroupKeyVault": {
      "condition": "[variables('effectiveDeployNetworking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "network-security-group-keyvault-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[take(format('{0}{1}-keyvault', variables('abbrs').networkNetworkSecurityGroups, parameters('environmentName')), 60)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "securityRules": {
            "value": []
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "2305747478751645177"
            },
            "name": "Network Security Groups",
            "description": "This module deploys a Network security Group (NSG)."
          },
          "definitions": {
            "securityRuleType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the security rule."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "Required. Whether network traffic is allowed or denied."
                      }
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The description of the security rule."
                      }
                    },
                    "destinationAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                      }
                    },
                    "destinationAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                      }
                    },
                    "destinationApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as destination."
                      }
                    },
                    "destinationPortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "destinationPortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port ranges."
                      }
                    },
                    "direction": {
                      "type": "string",
                      "allowedValues": [
                        "Inbound",
                        "Outbound"
                      ],
                      "metadata": {
                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                      }
                    },
                    "priority": {
                      "type": "int",
                      "minValue": 100,
                      "maxValue": 4096,
                      "metadata": {
                        "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                      }
                    },
                    "protocol": {
                      "type": "string",
                      "allowedValues": [
                        "*",
                        "Ah",
                        "Esp",
                        "Icmp",
                        "Tcp",
                        "Udp"
                      ],
                      "metadata": {
                        "description": "Required. Network protocol this rule applies to."
                      }
                    },
                    "sourceAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                      }
                    },
                    "sourceAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP ranges."
                      }
                    },
                    "sourceApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as source."
                      }
                    },
                    "sourcePortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "sourcePortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port ranges."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The properties of the security rule."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a security rule."
              }
            },
            "diagnosticSettingLogsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Network Security Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "securityRules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/securityRuleType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
              }
            },
            "flushConnection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the NSG resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "networkSecurityGroup": {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "securityRules",
                    "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                      "properties": {
                        "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                        "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                        "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                        "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                        "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                        "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                        "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                        "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                        "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                        "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                        "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                        "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                        "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                        "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                        "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                      }
                    }
                  }
                ],
                "flushConnection": "[parameters('flushConnection')]"
              }
            },
            "networkSecurityGroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_diagnosticSettings": {
              "copy": {
                "name": "networkSecurityGroup_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_roleAssignments": {
              "copy": {
                "name": "networkSecurityGroup_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the network security group was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the network security group."
              },
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the network security group."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "virtualNetwork": {
      "condition": "[variables('effectiveDeployNetworking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "virtualNetwork",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('virtualNetworkName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "addressPrefixes": {
            "value": [
              "10.0.0.0/16"
            ]
          },
          "subnets": {
            "value": [
              {
                "name": "default",
                "addressPrefix": "10.0.0.0/24"
              },
              {
                "name": "storage",
                "addressPrefix": "10.0.1.0/24",
                "privateEndpointNetworkPolicies": "Disabled",
                "networkSecurityGroupResourceId": "[if(variables('effectiveDeployNetworking'), reference('networkSecurityGroupStorage').outputs.resourceId.value, null())]"
              },
              {
                "name": "keyVault",
                "addressPrefix": "10.0.2.0/24",
                "privateEndpointNetworkPolicies": "Disabled",
                "networkSecurityGroupResourceId": "[if(variables('effectiveDeployNetworking'), reference('networkSecurityGroupKeyVault').outputs.resourceId.value, null())]"
              },
              {
                "name": "webApp",
                "addressPrefix": "10.0.3.0/24",
                "delegation": "Microsoft.Web/serverFarms",
                "networkSecurityGroupResourceId": "[if(variables('effectiveDeployNetworking'), reference('networkSecurityGroupWebApp').outputs.resourceId.value, null())]"
              },
              {
                "name": "AzureBastionSubnet",
                "addressPrefix": "10.0.10.0/27"
              }
            ]
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "16195883788906927531"
            },
            "name": "Virtual Networks",
            "description": "This module deploys a Virtual Network (vNet)."
          },
          "definitions": {
            "peeringType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be peer-localVnetName-remoteVnetName."
                  }
                },
                "remoteVirtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                  }
                },
                "allowForwardedTraffic": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                  }
                },
                "allowGatewayTransit": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                  }
                },
                "allowVirtualNetworkAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                  }
                },
                "doNotVerifyRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                  }
                },
                "useRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                  }
                },
                "remotePeeringEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Deploy the outbound and the inbound peering."
                  }
                },
                "remotePeeringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the VNET Peering resource in the remove Virtual Network. If not provided, default value will be peer-remoteVnetName-localVnetName."
                  }
                },
                "remotePeeringAllowForwardedTraffic": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                  }
                },
                "remotePeeringAllowGatewayTransit": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                  }
                },
                "remotePeeringAllowVirtualNetworkAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                  }
                },
                "remotePeeringDoNotVerifyRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                  }
                },
                "remotePeeringUseRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                  }
                }
              }
            },
            "subnetType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Name of the subnet resource."
                  }
                },
                "addressPrefix": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                  }
                },
                "addressPrefixes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                  }
                },
                "ipamPoolPrefixAllocations": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "object",
                      "properties": {
                        "pool": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the IPAM pool."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The Resource ID of the IPAM pool."
                          }
                        },
                        "numberOfIpAddresses": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Number of IP addresses allocated from the pool."
                          }
                        }
                      }
                    }
                  ],
                  "items": false,
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty and the VNet address space configured to use IPAM Pool."
                  }
                },
                "applicationGatewayIPConfigurations": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application gateway IP configurations of virtual network resource."
                  }
                },
                "delegation": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The delegation to enable on the subnet."
                  }
                },
                "natGatewayResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                  }
                },
                "networkSecurityGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the network security group to assign to the subnet."
                  }
                },
                "privateEndpointNetworkPolicies": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled",
                    "NetworkSecurityGroupEnabled",
                    "RouteTableEnabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                  }
                },
                "privateLinkServiceNetworkPolicies": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "routeTableResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the route table to assign to the subnet."
                  }
                },
                "serviceEndpointPolicies": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. An array of service endpoint policies."
                  }
                },
                "serviceEndpoints": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The service endpoints to enable on the subnet."
                  }
                },
                "defaultOutboundAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                  }
                },
                "sharingScope": {
                  "type": "string",
                  "allowedValues": [
                    "DelegatedServices",
                    "Tenant"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                  }
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Virtual Network (vNet)."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "addressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "Required. An Array of 1 or more IP Address Prefixes OR the resource ID of the IPAM pool to be used for the Virtual Network. When specifying an IPAM pool resource ID you must also set a value for the parameter called `ipamPoolNumberOfIpAddresses`."
              }
            },
            "ipamPoolNumberOfIpAddresses": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Number of IP addresses allocated from the pool. To be used only when the addressPrefix param is defined with a resource ID of an IPAM pool."
              }
            },
            "virtualNetworkBgpCommunity": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The BGP community associated with the virtual network."
              }
            },
            "subnets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subnetType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. An Array of subnets to deploy to the Virtual Network."
              }
            },
            "dnsServers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. DNS Servers associated to the Virtual Network."
              }
            },
            "ddosProtectionPlanResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
              }
            },
            "peerings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/peeringType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Virtual Network Peering configurations."
              }
            },
            "vnetEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet. Requires the EnableVNetEncryption feature to be registered for the subscription and a supported region to use this property."
              }
            },
            "vnetEncryptionEnforcement": {
              "type": "string",
              "defaultValue": "AllowUnencrypted",
              "allowedValues": [
                "AllowUnencrypted",
                "DropUnencrypted"
              ],
              "metadata": {
                "description": "Optional. If the encrypted VNet allows VM that does not support encryption. Can only be used when vnetEncryption is enabled."
              }
            },
            "flowTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 0,
              "maxValue": 30,
              "metadata": {
                "description": "Optional. The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between 4 and 30 minutes. Default value 0 will set the property to null."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "enableVmProtection": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Indicates if VM protection is enabled for all the subnets in the virtual network."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-virtualnetwork.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "virtualNetwork": {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2024-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": "[if(contains(parameters('addressPrefixes')[0], '/Microsoft.Network/networkManagers/'), createObject('ipamPoolPrefixAllocations', createArray(createObject('pool', createObject('id', parameters('addressPrefixes')[0]), 'numberOfIpAddresses', parameters('ipamPoolNumberOfIpAddresses')))), createObject('addressPrefixes', parameters('addressPrefixes')))]",
                "bgpCommunities": "[if(not(empty(parameters('virtualNetworkBgpCommunity'))), createObject('virtualNetworkCommunity', parameters('virtualNetworkBgpCommunity')), null())]",
                "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanResourceId'))), createObject('id', parameters('ddosProtectionPlanResourceId')), null())]",
                "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', array(parameters('dnsServers'))), null())]",
                "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanResourceId')))]",
                "encryption": "[if(equals(parameters('vnetEncryption'), true()), createObject('enabled', parameters('vnetEncryption'), 'enforcement', parameters('vnetEncryptionEnforcement')), null())]",
                "flowTimeoutInMinutes": "[if(not(equals(parameters('flowTimeoutInMinutes'), 0)), parameters('flowTimeoutInMinutes'), null())]",
                "enableVmProtection": "[parameters('enableVmProtection')]"
              }
            },
            "virtualNetwork_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_diagnosticSettings": {
              "copy": {
                "name": "virtualNetwork_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_roleAssignments": {
              "copy": {
                "name": "virtualNetwork_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_subnets": {
              "copy": {
                "name": "virtualNetwork_subnets",
                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualNetworkName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('subnets'), createArray())[copyIndex()].name]"
                  },
                  "addressPrefix": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefix')]"
                  },
                  "addressPrefixes": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefixes')]"
                  },
                  "ipamPoolPrefixAllocations": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'ipamPoolPrefixAllocations')]"
                  },
                  "applicationGatewayIPConfigurations": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'applicationGatewayIPConfigurations')]"
                  },
                  "delegation": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'delegation')]"
                  },
                  "natGatewayResourceId": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'natGatewayResourceId')]"
                  },
                  "networkSecurityGroupResourceId": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'networkSecurityGroupResourceId')]"
                  },
                  "privateEndpointNetworkPolicies": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateEndpointNetworkPolicies')]"
                  },
                  "privateLinkServiceNetworkPolicies": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateLinkServiceNetworkPolicies')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "routeTableResourceId": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'routeTableResourceId')]"
                  },
                  "serviceEndpointPolicies": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpointPolicies')]"
                  },
                  "serviceEndpoints": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpoints')]"
                  },
                  "defaultOutboundAccess": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'defaultOutboundAccess')]"
                  },
                  "sharingScope": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'sharingScope')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "9728353654559466189"
                    },
                    "name": "Virtual Network Subnets",
                    "description": "This module deploys a Virtual Network Subnet."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Name of the subnet resource."
                      }
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                      }
                    },
                    "addressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                      }
                    },
                    "ipamPoolPrefixAllocations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty."
                      }
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the network security group to assign to the subnet."
                      }
                    },
                    "routeTableResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the route table to assign to the subnet."
                      }
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The service endpoints to enable on the subnet."
                      }
                    },
                    "delegation": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The delegation to enable on the subnet."
                      }
                    },
                    "natGatewayResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                      }
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Disabled",
                        "Enabled",
                        "NetworkSecurityGroupEnabled",
                        "RouteTableEnabled"
                      ],
                      "metadata": {
                        "description": "Optional. Enable or disable apply network policies on private endpoint in the subnet."
                      }
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                      }
                    },
                    "defaultOutboundAccess": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                      }
                    },
                    "sharingScope": {
                      "type": "string",
                      "allowedValues": [
                        "DelegatedServices",
                        "Tenant"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set this property to Tenant to allow sharing the subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if the subnet is empty."
                      }
                    },
                    "applicationGatewayIPConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Application gateway IP configurations of virtual network resource."
                      }
                    },
                    "serviceEndpointPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of service endpoint policies."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-virtualnetworksubnet.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "virtualNetwork": {
                      "existing": true,
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('virtualNetworkName')]"
                    },
                    "subnet": {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2024-05-01",
                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "serviceEndpoints",
                            "count": "[length(parameters('serviceEndpoints'))]",
                            "input": {
                              "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpoints')]]"
                            }
                          }
                        ],
                        "addressPrefix": "[parameters('addressPrefix')]",
                        "addressPrefixes": "[parameters('addressPrefixes')]",
                        "ipamPoolPrefixAllocations": "[parameters('ipamPoolPrefixAllocations')]",
                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                        "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                        "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                        "delegations": "[if(not(empty(parameters('delegation'))), createArray(createObject('name', parameters('delegation'), 'properties', createObject('serviceName', parameters('delegation')))), createArray())]",
                        "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                        "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                        "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                        "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                        "sharingScope": "[parameters('sharingScope')]"
                      }
                    },
                    "subnet_roleAssignments": {
                      "copy": {
                        "name": "subnet_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "subnet"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                    },
                    "addressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "The address prefix for the subnet."
                      },
                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefix'), '')]"
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "List of address prefixes for the subnet."
                      },
                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefixes'), createArray())]"
                    },
                    "ipamPoolPrefixAllocations": {
                      "type": "array",
                      "metadata": {
                        "description": "The IPAM pool prefix allocations for the subnet."
                      },
                      "value": "[coalesce(tryGet(reference('subnet'), 'ipamPoolPrefixAllocations'), createArray())]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_peering_local": {
              "copy": {
                "name": "virtualNetwork_peering_local",
                "count": "[length(coalesce(parameters('peerings'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[parameters('name')]"
                  },
                  "remoteVirtualNetworkResourceId": {
                    "value": "[coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'name')]"
                  },
                  "allowForwardedTraffic": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowForwardedTraffic')]"
                  },
                  "allowGatewayTransit": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowGatewayTransit')]"
                  },
                  "allowVirtualNetworkAccess": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowVirtualNetworkAccess')]"
                  },
                  "doNotVerifyRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'doNotVerifyRemoteGateways')]"
                  },
                  "useRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'useRemoteGateways')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11179987886456111827"
                    },
                    "name": "Virtual Network Peerings",
                    "description": "This module deploys a Virtual Network Peering."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                      }
                    },
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "remoteVirtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                      }
                    },
                    "allowForwardedTraffic": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                      }
                    },
                    "allowGatewayTransit": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                      }
                    },
                    "allowVirtualNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                      }
                    },
                    "doNotVerifyRemoteGateways": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                      }
                    },
                    "useRemoteGateways": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                      "properties": {
                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualNetwork",
                "virtualNetwork_subnets"
              ]
            },
            "virtualNetwork_peering_remote": {
              "copy": {
                "name": "virtualNetwork_peering_remote",
                "count": "[length(coalesce(parameters('peerings'), createArray()))]"
              },
              "condition": "[coalesce(tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringEnabled'), false())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[2]]",
              "resourceGroup": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[last(split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/'))]"
                  },
                  "remoteVirtualNetworkResourceId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringName')]"
                  },
                  "allowForwardedTraffic": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowForwardedTraffic')]"
                  },
                  "allowGatewayTransit": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowGatewayTransit')]"
                  },
                  "allowVirtualNetworkAccess": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess')]"
                  },
                  "doNotVerifyRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways')]"
                  },
                  "useRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringUseRemoteGateways')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11179987886456111827"
                    },
                    "name": "Virtual Network Peerings",
                    "description": "This module deploys a Virtual Network Peering."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                      }
                    },
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "remoteVirtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                      }
                    },
                    "allowForwardedTraffic": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                      }
                    },
                    "allowGatewayTransit": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                      }
                    },
                    "allowVirtualNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                      }
                    },
                    "doNotVerifyRemoteGateways": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                      }
                    },
                    "useRemoteGateways": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                      "properties": {
                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualNetwork",
                "virtualNetwork_subnets"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the virtual network was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the virtual network."
              },
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the virtual network."
              },
              "value": "[parameters('name')]"
            },
            "subnetNames": {
              "type": "array",
              "metadata": {
                "description": "The names of the deployed subnets."
              },
              "copy": {
                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.name.value]"
              }
            },
            "subnetResourceIds": {
              "type": "array",
              "metadata": {
                "description": "The resource IDs of the deployed subnets."
              },
              "copy": {
                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.resourceId.value]"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('virtualNetwork', '2024-05-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "networkSecurityGroupKeyVault",
        "networkSecurityGroupStorage",
        "networkSecurityGroupWebApp",
        "rg"
      ]
    },
    "storageFilePrivateDnsZone": {
      "condition": "[variables('effectiveDeployNetworking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage-file-private-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('privatelink.file.{0}', environment().suffixes.storage)]"
          },
          "location": {
            "value": "global"
          },
          "virtualNetworkLinks": {
            "value": [
              {
                "virtualNetworkResourceId": "[reference('virtualNetwork').outputs.resourceId.value]",
                "registrationEnabled": false
              }
            ]
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17921343070314002065"
            },
            "name": "Private DNS Zones",
            "description": "This module deploys a Private DNS zone."
          },
          "definitions": {
            "aType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/A@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/A@2024-06-01#properties/properties/properties/aRecords"
                    },
                    "description": "Optional. The list of A records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the A record."
              }
            },
            "aaaaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/AAAA@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aaaaRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/AAAA@2024-06-01#properties/properties/properties/aaaaRecords"
                    },
                    "description": "Optional. The list of AAAA records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the AAAA record."
              }
            },
            "cnameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/CNAME@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "cnameRecord": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/CNAME@2024-06-01#properties/properties/properties/cnameRecord"
                    },
                    "description": "Optional. The CNAME record in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the CNAME record."
              }
            },
            "mxType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/MX@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "mxRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/MX@2024-06-01#properties/properties/properties/mxRecords"
                    },
                    "description": "Optional. The list of MX records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the MX record."
              }
            },
            "ptrType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/PTR@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "ptrRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/PTR@2024-06-01#properties/properties/properties/ptrRecords"
                    },
                    "description": "Optional. The list of PTR records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the PTR record."
              }
            },
            "soaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/SOA@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "soaRecord": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/SOA@2024-06-01#properties/properties/properties/soaRecord"
                    },
                    "description": "Optional. The SOA record in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SOA record."
              }
            },
            "srvType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/SRV@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "srvRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/SRV@2024-06-01#properties/properties/properties/srvRecords"
                    },
                    "description": "Optional. The list of SRV records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SRV record."
              }
            },
            "txtType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/TXT@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "txtRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/TXT@2024-06-01#properties/properties/properties/txtRecords"
                    },
                    "description": "Optional. The list of TXT records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the TXT record."
              }
            },
            "virtualNetworkLinkType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "minLength": 1,
                  "maxLength": 80,
                  "metadata": {
                    "description": "Optional. The resource name."
                  }
                },
                "virtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the virtual network to link."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Azure Region where the resource lives."
                  }
                },
                "registrationEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                  }
                },
                "tags": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/virtualNetworkLinks@2024-06-01#properties/tags"
                    },
                    "description": "Optional. Resource tags."
                  },
                  "nullable": true
                },
                "resolutionPolicy": {
                  "type": "string",
                  "allowedValues": [
                    "Default",
                    "NxDomainRedirect"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resolution type of the private-dns-zone fallback machanism."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the virtual network link."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Private DNS zone name."
              }
            },
            "a": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of A records."
              }
            },
            "aaaa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aaaaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of AAAA records."
              }
            },
            "cname": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cnameType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of CNAME records."
              }
            },
            "mx": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mxType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of MX records."
              }
            },
            "ptr": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ptrType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of PTR records."
              }
            },
            "soa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/soaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SOA records."
              }
            },
            "srv": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/srvType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SRV records."
              }
            },
            "txt": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/txtType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of TXT records."
              }
            },
            "virtualNetworkLinks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/virtualNetworkLinkType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "Optional. The location of the PrivateDNSZone. Should be global."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            },
            "enableReferencedModulesTelemetry": false
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateDnsZone": {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            "privateDnsZone_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_roleAssignments": {
              "copy": {
                "name": "privateDnsZone_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_A": {
              "copy": {
                "name": "privateDnsZone_A",
                "count": "[length(coalesce(parameters('a'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                  },
                  "aRecords": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "12608084563401365743"
                    },
                    "name": "Private DNS Zone A record",
                    "description": "This module deploys a Private DNS Zone A record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the A record."
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/A@2024-06-01#properties/properties/properties/aRecords"
                        },
                        "description": "Optional. The list of A records in the record set."
                      },
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/A@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonea.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "A": {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aRecords": "[parameters('aRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "A_roleAssignments": {
                      "copy": {
                        "name": "A_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "A"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed A record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed A record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed A record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_AAAA": {
              "copy": {
                "name": "privateDnsZone_AAAA",
                "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                  },
                  "aaaaRecords": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "4881696097088567452"
                    },
                    "name": "Private DNS Zone AAAA record",
                    "description": "This module deploys a Private DNS Zone AAAA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the AAAA record."
                      }
                    },
                    "aaaaRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/AAAA@2024-06-01#properties/properties/properties/aaaaRecords"
                        },
                        "description": "Optional. The list of AAAA records in the record set."
                      },
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/AAAA@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszoneaaaa.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "AAAA": {
                      "type": "Microsoft.Network/privateDnsZones/AAAA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aaaaRecords": "[parameters('aaaaRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "AAAA_roleAssignments": {
                      "copy": {
                        "name": "AAAA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "AAAA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed AAAA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed AAAA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed AAAA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_CNAME": {
              "copy": {
                "name": "privateDnsZone_CNAME",
                "count": "[length(coalesce(parameters('cname'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                  },
                  "cnameRecord": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "13307906270868460967"
                    },
                    "name": "Private DNS Zone CNAME record",
                    "description": "This module deploys a Private DNS Zone CNAME record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the CNAME record."
                      }
                    },
                    "cnameRecord": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/CNAME@2024-06-01#properties/properties/properties/cnameRecord"
                        },
                        "description": "Optional. A CNAME record."
                      },
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/CNAME@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonecname.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "CNAME": {
                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "cnameRecord": "[parameters('cnameRecord')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "CNAME_roleAssignments": {
                      "copy": {
                        "name": "CNAME_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "CNAME"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed CNAME record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed CNAME record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed CNAME record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_MX": {
              "copy": {
                "name": "privateDnsZone_MX",
                "count": "[length(coalesce(parameters('mx'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "mxRecords": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "7946896598573056688"
                    },
                    "name": "Private DNS Zone MX record",
                    "description": "This module deploys a Private DNS Zone MX record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the MX record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/MX@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "mxRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/MX@2024-06-01#properties/properties/properties/mxRecords"
                        },
                        "description": "Optional. The list of MX records in the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonemx.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "MX": {
                      "type": "Microsoft.Network/privateDnsZones/MX",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "mxRecords": "[parameters('mxRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "MX_roleAssignments": {
                      "copy": {
                        "name": "MX_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "MX"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed MX record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed MX record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed MX record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_PTR": {
              "copy": {
                "name": "privateDnsZone_PTR",
                "count": "[length(coalesce(parameters('ptr'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ptrRecords": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "7627375510490151870"
                    },
                    "name": "Private DNS Zone PTR record",
                    "description": "This module deploys a Private DNS Zone PTR record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the PTR record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/PTR@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ptrRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/PTR@2024-06-01#properties/properties/properties/ptrRecords"
                        },
                        "description": "Optional. The list of PTR records in the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszoneptr.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "PTR": {
                      "type": "Microsoft.Network/privateDnsZones/PTR",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ptrRecords": "[parameters('ptrRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "PTR_roleAssignments": {
                      "copy": {
                        "name": "PTR_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "PTR"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed PTR record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed PTR record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed PTR record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SOA": {
              "copy": {
                "name": "privateDnsZone_SOA",
                "count": "[length(coalesce(parameters('soa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "soaRecord": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "16709883266329935583"
                    },
                    "name": "Private DNS Zone SOA record",
                    "description": "This module deploys a Private DNS Zone SOA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SOA record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/SOA@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "soaRecord": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/SOA@2024-06-01#properties/properties/properties/soaRecord"
                        },
                        "description": "Optional. A SOA record."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonesoa.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SOA": {
                      "type": "Microsoft.Network/privateDnsZones/SOA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "soaRecord": "[parameters('soaRecord')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SOA_roleAssignments": {
                      "copy": {
                        "name": "SOA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SOA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SOA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SOA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SOA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SRV": {
              "copy": {
                "name": "privateDnsZone_SRV",
                "count": "[length(coalesce(parameters('srv'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "srvRecords": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "8123422724272920495"
                    },
                    "name": "Private DNS Zone SRV record",
                    "description": "This module deploys a Private DNS Zone SRV record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SRV record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/SRV@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "srvRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/SRV@2024-06-01#properties/properties/properties/srvRecords"
                        },
                        "description": "Optional. The list of SRV records in the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonesrv.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SRV": {
                      "type": "Microsoft.Network/privateDnsZones/SRV",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "srvRecords": "[parameters('srvRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SRV_roleAssignments": {
                      "copy": {
                        "name": "SRV_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SRV"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SRV record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SRV record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SRV record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_TXT": {
              "copy": {
                "name": "privateDnsZone_TXT",
                "count": "[length(coalesce(parameters('txt'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "txtRecords": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17170531000135004092"
                    },
                    "name": "Private DNS Zone TXT record",
                    "description": "This module deploys a Private DNS Zone TXT record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the TXT record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/TXT@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "txtRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/TXT@2024-06-01#properties/properties/properties/txtRecords"
                        },
                        "description": "Optional. The list of TXT records in the record set."
                      },
                      "nullable": true
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonetxt.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "TXT": {
                      "type": "Microsoft.Network/privateDnsZones/TXT",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]",
                        "txtRecords": "[parameters('txtRecords')]"
                      }
                    },
                    "TXT_roleAssignments": {
                      "copy": {
                        "name": "TXT_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "TXT"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed TXT record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed TXT record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed TXT record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_virtualNetworkLinks": {
              "copy": {
                "name": "privateDnsZone_virtualNetworkLinks",
                "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-VNetLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                  },
                  "registrationEnabled": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "resolutionPolicy": {
                    "value": "[tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'resolutionPolicy')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "517173107480898390"
                    },
                    "name": "Private DNS Zone Virtual Network Link",
                    "description": "This module deploys a Private DNS Zone Virtual Network Link."
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the virtual network link."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "global",
                      "metadata": {
                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/virtualNetworkLinks@2024-06-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Link to another virtual network resource ID."
                      }
                    },
                    "resolutionPolicy": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resolution policy on the virtual network link. Only applicable for virtual network links to privatelink zones, and for A,AAAA,CNAME queries. When set to `NxDomainRedirect`, Azure DNS resolver falls back to public resolution if private dns query resolution results in non-existent domain response. `Default` is configured as the default option."
                      }
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": "[parameters('registrationEnabled')]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        },
                        "resolutionPolicy": "[parameters('resolutionPolicy')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed virtual network link."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed virtual network link."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed virtual network link."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('virtualNetworkLink', '2024-06-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private DNS zone was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private DNS zone."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private DNS zone."
              },
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "rg",
        "virtualNetwork"
      ]
    },
    "keyVaultPrivateDnsZone": {
      "condition": "[variables('effectiveDeployNetworking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyvault-private-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('keyVaultPrivateDnsZoneName')]"
          },
          "location": {
            "value": "global"
          },
          "virtualNetworkLinks": {
            "value": [
              {
                "virtualNetworkResourceId": "[reference('virtualNetwork').outputs.resourceId.value]",
                "registrationEnabled": false
              }
            ]
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17921343070314002065"
            },
            "name": "Private DNS Zones",
            "description": "This module deploys a Private DNS zone."
          },
          "definitions": {
            "aType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/A@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/A@2024-06-01#properties/properties/properties/aRecords"
                    },
                    "description": "Optional. The list of A records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the A record."
              }
            },
            "aaaaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/AAAA@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aaaaRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/AAAA@2024-06-01#properties/properties/properties/aaaaRecords"
                    },
                    "description": "Optional. The list of AAAA records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the AAAA record."
              }
            },
            "cnameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/CNAME@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "cnameRecord": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/CNAME@2024-06-01#properties/properties/properties/cnameRecord"
                    },
                    "description": "Optional. The CNAME record in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the CNAME record."
              }
            },
            "mxType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/MX@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "mxRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/MX@2024-06-01#properties/properties/properties/mxRecords"
                    },
                    "description": "Optional. The list of MX records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the MX record."
              }
            },
            "ptrType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/PTR@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "ptrRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/PTR@2024-06-01#properties/properties/properties/ptrRecords"
                    },
                    "description": "Optional. The list of PTR records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the PTR record."
              }
            },
            "soaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/SOA@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "soaRecord": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/SOA@2024-06-01#properties/properties/properties/soaRecord"
                    },
                    "description": "Optional. The SOA record in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SOA record."
              }
            },
            "srvType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/SRV@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "srvRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/SRV@2024-06-01#properties/properties/properties/srvRecords"
                    },
                    "description": "Optional. The list of SRV records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SRV record."
              }
            },
            "txtType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/TXT@2024-06-01#properties/properties/properties/metadata"
                    },
                    "description": "Optional. The metadata of the record."
                  },
                  "nullable": true
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "txtRecords": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/TXT@2024-06-01#properties/properties/properties/txtRecords"
                    },
                    "description": "Optional. The list of TXT records in the record set."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the TXT record."
              }
            },
            "virtualNetworkLinkType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "minLength": 1,
                  "maxLength": 80,
                  "metadata": {
                    "description": "Optional. The resource name."
                  }
                },
                "virtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the virtual network to link."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Azure Region where the resource lives."
                  }
                },
                "registrationEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                  }
                },
                "tags": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateDnsZones/virtualNetworkLinks@2024-06-01#properties/tags"
                    },
                    "description": "Optional. Resource tags."
                  },
                  "nullable": true
                },
                "resolutionPolicy": {
                  "type": "string",
                  "allowedValues": [
                    "Default",
                    "NxDomainRedirect"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resolution type of the private-dns-zone fallback machanism."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the virtual network link."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Private DNS zone name."
              }
            },
            "a": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of A records."
              }
            },
            "aaaa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aaaaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of AAAA records."
              }
            },
            "cname": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cnameType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of CNAME records."
              }
            },
            "mx": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mxType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of MX records."
              }
            },
            "ptr": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ptrType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of PTR records."
              }
            },
            "soa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/soaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SOA records."
              }
            },
            "srv": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/srvType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SRV records."
              }
            },
            "txt": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/txtType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of TXT records."
              }
            },
            "virtualNetworkLinks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/virtualNetworkLinkType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "Optional. The location of the PrivateDNSZone. Should be global."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            },
            "enableReferencedModulesTelemetry": false
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateDnsZone": {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            "privateDnsZone_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_roleAssignments": {
              "copy": {
                "name": "privateDnsZone_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_A": {
              "copy": {
                "name": "privateDnsZone_A",
                "count": "[length(coalesce(parameters('a'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                  },
                  "aRecords": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "12608084563401365743"
                    },
                    "name": "Private DNS Zone A record",
                    "description": "This module deploys a Private DNS Zone A record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the A record."
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/A@2024-06-01#properties/properties/properties/aRecords"
                        },
                        "description": "Optional. The list of A records in the record set."
                      },
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/A@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonea.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "A": {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aRecords": "[parameters('aRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "A_roleAssignments": {
                      "copy": {
                        "name": "A_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "A"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed A record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed A record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed A record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_AAAA": {
              "copy": {
                "name": "privateDnsZone_AAAA",
                "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                  },
                  "aaaaRecords": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "4881696097088567452"
                    },
                    "name": "Private DNS Zone AAAA record",
                    "description": "This module deploys a Private DNS Zone AAAA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the AAAA record."
                      }
                    },
                    "aaaaRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/AAAA@2024-06-01#properties/properties/properties/aaaaRecords"
                        },
                        "description": "Optional. The list of AAAA records in the record set."
                      },
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/AAAA@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszoneaaaa.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "AAAA": {
                      "type": "Microsoft.Network/privateDnsZones/AAAA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aaaaRecords": "[parameters('aaaaRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "AAAA_roleAssignments": {
                      "copy": {
                        "name": "AAAA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "AAAA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed AAAA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed AAAA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed AAAA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_CNAME": {
              "copy": {
                "name": "privateDnsZone_CNAME",
                "count": "[length(coalesce(parameters('cname'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                  },
                  "cnameRecord": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "13307906270868460967"
                    },
                    "name": "Private DNS Zone CNAME record",
                    "description": "This module deploys a Private DNS Zone CNAME record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the CNAME record."
                      }
                    },
                    "cnameRecord": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/CNAME@2024-06-01#properties/properties/properties/cnameRecord"
                        },
                        "description": "Optional. A CNAME record."
                      },
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/CNAME@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonecname.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "CNAME": {
                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "cnameRecord": "[parameters('cnameRecord')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "CNAME_roleAssignments": {
                      "copy": {
                        "name": "CNAME_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "CNAME"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed CNAME record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed CNAME record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed CNAME record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_MX": {
              "copy": {
                "name": "privateDnsZone_MX",
                "count": "[length(coalesce(parameters('mx'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "mxRecords": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "7946896598573056688"
                    },
                    "name": "Private DNS Zone MX record",
                    "description": "This module deploys a Private DNS Zone MX record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the MX record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/MX@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "mxRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/MX@2024-06-01#properties/properties/properties/mxRecords"
                        },
                        "description": "Optional. The list of MX records in the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonemx.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "MX": {
                      "type": "Microsoft.Network/privateDnsZones/MX",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "mxRecords": "[parameters('mxRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "MX_roleAssignments": {
                      "copy": {
                        "name": "MX_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "MX"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed MX record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed MX record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed MX record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_PTR": {
              "copy": {
                "name": "privateDnsZone_PTR",
                "count": "[length(coalesce(parameters('ptr'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ptrRecords": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "7627375510490151870"
                    },
                    "name": "Private DNS Zone PTR record",
                    "description": "This module deploys a Private DNS Zone PTR record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the PTR record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/PTR@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ptrRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/PTR@2024-06-01#properties/properties/properties/ptrRecords"
                        },
                        "description": "Optional. The list of PTR records in the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszoneptr.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "PTR": {
                      "type": "Microsoft.Network/privateDnsZones/PTR",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ptrRecords": "[parameters('ptrRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "PTR_roleAssignments": {
                      "copy": {
                        "name": "PTR_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "PTR"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed PTR record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed PTR record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed PTR record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SOA": {
              "copy": {
                "name": "privateDnsZone_SOA",
                "count": "[length(coalesce(parameters('soa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "soaRecord": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "16709883266329935583"
                    },
                    "name": "Private DNS Zone SOA record",
                    "description": "This module deploys a Private DNS Zone SOA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SOA record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/SOA@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "soaRecord": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/SOA@2024-06-01#properties/properties/properties/soaRecord"
                        },
                        "description": "Optional. A SOA record."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonesoa.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SOA": {
                      "type": "Microsoft.Network/privateDnsZones/SOA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "soaRecord": "[parameters('soaRecord')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SOA_roleAssignments": {
                      "copy": {
                        "name": "SOA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SOA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SOA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SOA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SOA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SRV": {
              "copy": {
                "name": "privateDnsZone_SRV",
                "count": "[length(coalesce(parameters('srv'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "srvRecords": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "8123422724272920495"
                    },
                    "name": "Private DNS Zone SRV record",
                    "description": "This module deploys a Private DNS Zone SRV record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SRV record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/SRV@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "srvRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/SRV@2024-06-01#properties/properties/properties/srvRecords"
                        },
                        "description": "Optional. The list of SRV records in the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonesrv.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SRV": {
                      "type": "Microsoft.Network/privateDnsZones/SRV",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "srvRecords": "[parameters('srvRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SRV_roleAssignments": {
                      "copy": {
                        "name": "SRV_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SRV"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SRV record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SRV record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SRV record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_TXT": {
              "copy": {
                "name": "privateDnsZone_TXT",
                "count": "[length(coalesce(parameters('txt'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "txtRecords": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17170531000135004092"
                    },
                    "name": "Private DNS Zone TXT record",
                    "description": "This module deploys a Private DNS Zone TXT record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the TXT record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/TXT@2024-06-01#properties/properties/properties/metadata"
                        },
                        "description": "Optional. The metadata attached to the record set."
                      },
                      "nullable": true
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "txtRecords": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/TXT@2024-06-01#properties/properties/properties/txtRecords"
                        },
                        "description": "Optional. The list of TXT records in the record set."
                      },
                      "nullable": true
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.nw-privdnszonetxt.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "TXT": {
                      "type": "Microsoft.Network/privateDnsZones/TXT",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]",
                        "txtRecords": "[parameters('txtRecords')]"
                      }
                    },
                    "TXT_roleAssignments": {
                      "copy": {
                        "name": "TXT_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "TXT"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed TXT record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed TXT record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed TXT record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_virtualNetworkLinks": {
              "copy": {
                "name": "privateDnsZone_virtualNetworkLinks",
                "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-VNetLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                  },
                  "registrationEnabled": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "resolutionPolicy": {
                    "value": "[tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'resolutionPolicy')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "517173107480898390"
                    },
                    "name": "Private DNS Zone Virtual Network Link",
                    "description": "This module deploys a Private DNS Zone Virtual Network Link."
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the virtual network link."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "global",
                      "metadata": {
                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Network/privateDnsZones/virtualNetworkLinks@2024-06-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Link to another virtual network resource ID."
                      }
                    },
                    "resolutionPolicy": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resolution policy on the virtual network link. Only applicable for virtual network links to privatelink zones, and for A,AAAA,CNAME queries. When set to `NxDomainRedirect`, Azure DNS resolver falls back to public resolution if private dns query resolution results in non-existent domain response. `Default` is configured as the default option."
                      }
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": "[parameters('registrationEnabled')]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        },
                        "resolutionPolicy": "[parameters('resolutionPolicy')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed virtual network link."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed virtual network link."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed virtual network link."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('virtualNetworkLink', '2024-06-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private DNS zone was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private DNS zone."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private DNS zone."
              },
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "rg",
        "virtualNetwork"
      ]
    },
    "storageAccount": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage-account-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('storageAccountName')]"
          },
          "diagnosticSettings": "[if(parameters('deployDiagnostics'), createObject('value', createArray(createObject('name', variables('sendToLogAnalyticsName'), 'workspaceResourceId', reference('logAnalyticsWorkspace').outputs.resourceId.value, 'metricCategories', createArray()))), createObject('value', createArray()))]",
          "enableHierarchicalNamespace": {
            "value": false
          },
          "enableNfsV3": {
            "value": false
          },
          "enableSftp": {
            "value": false
          },
          "fileServices": {
            "value": {
              "shares": [
                {
                  "name": "foundryvttdata",
                  "shareQuota": "[variables('storageConfigurationMap')[parameters('storageConfiguration')].shareQuota]"
                }
              ],
              "endpoints": "[variables('endpoints')]"
            }
          },
          "kind": {
            "value": "[variables('storageConfigurationMap')[parameters('storageConfiguration')].kind]"
          },
          "largeFileSharesState": {
            "value": "Enabled"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkAcls": {
            "value": {
              "bypass": "AzureServices",
              "defaultAction": "Allow"
            }
          },
          "privateEndpoints": "[if(variables('effectiveDeployNetworking'), createObject('value', createArray(createObject('privateDnsZoneGroup', createObject('name', 'default', 'privateDnsZoneGroupConfigs', createArray(createObject('name', 'storagefiledns', 'privateDnsZoneResourceId', reference('storageFilePrivateDnsZone').outputs.resourceId.value))), 'service', 'file', 'subnetResourceId', reference('virtualNetwork').outputs.subnetResourceIds.value[1], 'tags', variables('tags')))), createObject('value', createArray()))]",
          "publicNetworkAccess": "[if(or(parameters('storagePublicAccess'), not(variables('effectiveDeployNetworking'))), createObject('value', 'Enabled'), createObject('value', 'Disabled'))]",
          "requireInfrastructureEncryption": {
            "value": false
          },
          "sasExpirationPeriod": {
            "value": "180.00:00:00"
          },
          "skuName": {
            "value": "[variables('storageConfigurationMap')[parameters('storageConfiguration')].sku]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "lock": "[if(parameters('storageResourceLockEnabled'), createObject('value', createObject('kind', 'CanNotDelete', 'name', format('{0}-delete-lock', variables('storageAccountName')))), createObject('value', null()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "13673459900777676693"
            },
            "name": "Storage Accounts",
            "description": "This module deploys a Storage Account."
          },
          "definitions": {
            "privateEndpointOutputType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the private endpoint."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the private endpoint."
                  }
                },
                "groupId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The group Id for the private endpoint Group."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fqdn": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "FQDN that resolves to private endpoint IP address."
                        }
                      },
                      "ipAddresses": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of private IP addresses of the private endpoint."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "The custom DNS configurations of the private endpoint."
                  }
                },
                "networkInterfaceResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "The IDs of the network interfaces associated with the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the private endpoints output."
              }
            },
            "networkAclsType": {
              "type": "object",
              "properties": {
                "resourceAccessRules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tenantId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The ID of the tenant in which the resource resides in."
                        }
                      },
                      "resourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource ID of the target service. Can also contain a wildcard, if multiple services e.g. in a resource group should be included."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Sets the resource access rules. Array entries must consist of \"tenantId\" and \"resourceId\" fields only."
                  }
                },
                "bypass": {
                  "type": "string",
                  "allowedValues": [
                    "AzureServices",
                    "AzureServices, Logging",
                    "AzureServices, Logging, Metrics",
                    "AzureServices, Metrics",
                    "Logging",
                    "Logging, Metrics",
                    "Metrics",
                    "None"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
                  }
                },
                "virtualNetworkRules": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Sets the virtual network rules."
                  }
                },
                "ipRules": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Sets the IP ACL rules."
                  }
                },
                "defaultAction": {
                  "type": "string",
                  "allowedValues": [
                    "Allow",
                    "Deny"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the default action of allow or deny when no other rules match."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the network configuration."
              }
            },
            "secretsExportConfigurationType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
                  }
                },
                "accessKey1Name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The accessKey1 secret name to create."
                  }
                },
                "connectionString1Name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The connectionString1 secret name to create."
                  }
                },
                "accessKey2Name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The accessKey2 secret name to create."
                  }
                },
                "connectionString2Name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The connectionString2 secret name to create."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of the exported secrets."
              }
            },
            "localUserType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the local user used for SFTP Authentication."
                  }
                },
                "hasSharedKey": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                  }
                },
                "hasSshKey": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                  }
                },
                "hasSshPassword": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                  }
                },
                "homeDirectory": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The local user home directory."
                  }
                },
                "permissionScopes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/permissionScopeType"
                  },
                  "metadata": {
                    "description": "Required. The permission scopes of the local user."
                  }
                },
                "sshAuthorizedKeys": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sshAuthorizedKeyType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The local user SSH authorized keys for SFTP."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a local user."
              }
            },
            "_1.secretSetOutputType": {
              "type": "object",
              "properties": {
                "secretResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resourceId of the exported secret."
                  }
                },
                "secretUri": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI of the exported secret."
                  }
                },
                "secretUriWithVersion": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI with version of the exported secret."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "_2.lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_2.privateEndpointCustomDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_2.privateEndpointIpConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_2.privateEndpointPrivateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the private DNS Zone Group config."
                        }
                      },
                      "privateDnsZoneResourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of the private DNS zone."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_2.roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "customerManagedKeyWithAutoRotateType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
                  }
                },
                "autoRotationEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "diagnosticSettingMetricsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "permissionScopeType": {
              "type": "object",
              "properties": {
                "permissions": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                  }
                },
                "resourceName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                  }
                },
                "service": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The service used by the local user, e.g. blob, file."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "local-user/main.bicep"
                }
              }
            },
            "privateEndpointMultiServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private endpoint."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The location to deploy the private endpoint to."
                  }
                },
                "privateLinkServiceConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private link connection to create."
                  }
                },
                "service": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\" for a Storage Account's Private Endpoints."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                  }
                },
                "resourceGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                  }
                },
                "privateDnsZoneGroup": {
                  "$ref": "#/definitions/_2.privateEndpointPrivateDnsZoneGroupType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private DNS zone group to configure for the private endpoint."
                  }
                },
                "isManualConnection": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If Manual Private Link Connection is required."
                  }
                },
                "manualConnectionRequestMessage": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 140,
                  "metadata": {
                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_2.privateEndpointCustomDnsConfigType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Custom DNS configurations."
                  }
                },
                "ipConfigurations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_2.privateEndpointIpConfigurationType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                  }
                },
                "applicationSecurityGroupResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                  }
                },
                "customNetworkInterfaceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The custom name of the network interface attached to the private endpoint."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/_2.lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_2.roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateEndpoints@2024-07-01#properties/tags"
                    },
                    "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable/Disable usage telemetry for module."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can NOT be assumed (i.e., for services that have more than one subresource, like Storage Account with Blob (blob, table, queue, file, ...).",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "secretsOutputType": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "$ref": "#/definitions/_1.secretSetOutputType",
                "metadata": {
                  "description": "An exported secret's references."
                }
              },
              "metadata": {
                "description": "A map of the exported secrets",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "sshAuthorizedKeyType": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Description used to store the function/usage of the key."
                  }
                },
                "key": {
                  "type": "securestring",
                  "metadata": {
                    "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "local-user/main.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. Name of the Storage Account. Must be lower-case."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2",
              "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage",
                "FileStorage",
                "BlockBlobStorage"
              ],
              "metadata": {
                "description": "Optional. Type of Storage Account to create."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "StandardV2_LRS",
                "StandardV2_ZRS",
                "StandardV2_GRS",
                "StandardV2_GZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "PremiumV2_LRS",
                "PremiumV2_ZRS"
              ],
              "metadata": {
                "description": "Optional. Storage Account Sku Name - note: certain V2 SKUs require the use of: kind = FileStorage."
              }
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Premium",
                "Hot",
                "Cool",
                "Cold"
              ],
              "metadata": {
                "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
              }
            },
            "largeFileSharesState": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. Allow large file shares if set to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
              }
            },
            "azureFilesIdentityBasedAuthentication": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Storage/storageAccounts@2024-01-01#properties/properties/properties/azureFilesIdentityBasedAuthentication"
                },
                "description": "Optional. Provides the identity based authentication settings for Azure Files."
              },
              "nullable": true
            },
            "defaultToOAuthAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
              }
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointMultiServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "managementPolicyRules": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Storage Account ManagementPolicies Rules."
              }
            },
            "networkAcls": {
              "$ref": "#/definitions/networkAclsType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. If in use, bypass needs to be supplied. For security reasons, it is recommended to set the DefaultAction Deny."
              }
            },
            "requireInfrastructureEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
              }
            },
            "allowCrossTenantReplication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Allow or disallow cross AAD tenant object replication."
              }
            },
            "customDomainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
              }
            },
            "customDomainUseSubDomainName": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
              }
            },
            "dnsEndpointType": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "AzureDnsZone",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
              }
            },
            "blobServices": {
              "type": "object",
              "defaultValue": "[if(not(equals(parameters('kind'), 'FileStorage')), createObject('containerDeleteRetentionPolicyEnabled', true(), 'containerDeleteRetentionPolicyDays', 7, 'deleteRetentionPolicyEnabled', true(), 'deleteRetentionPolicyDays', 6), createObject())]",
              "metadata": {
                "description": "Optional. Blob service and containers to deploy."
              }
            },
            "fileServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. File service and shares to deploy."
              }
            },
            "queueServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Queue service and queues to create."
              }
            },
            "tableServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Table service and tables to create."
              }
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2",
              "allowedValues": [
                "TLS1_2"
              ],
              "metadata": {
                "description": "Optional. Set the minimum TLS version on request to storage. The TLS versions 1.0 and 1.1 are deprecated and not supported anymore."
              }
            },
            "enableHierarchicalNamespace": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
              }
            },
            "enableSftp": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
              }
            },
            "localUsers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/localUserType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Local users to deploy for SFTP authentication."
              }
            },
            "isLocalUserEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables local users feature, if set to true."
              }
            },
            "enableNfsV3": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingMetricsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Storage/storageAccounts@2024-01-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "allowedCopyScope": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "AAD",
                "PrivateLink"
              ],
              "metadata": {
                "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
              }
            },
            "supportsHttpsTrafficOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
              }
            },
            "customerManagedKey": {
              "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The customer managed key definition."
              }
            },
            "sasExpirationPeriod": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
              }
            },
            "sasExpirationAction": {
              "type": "string",
              "defaultValue": "Log",
              "allowedValues": [
                "Block",
                "Log"
              ],
              "metadata": {
                "description": "Optional. The SAS expiration action. Allowed values are Block and Log."
              }
            },
            "keyType": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Account",
                "Service"
              ],
              "metadata": {
                "description": "Optional. The keyType to use with Queue & Table services."
              }
            },
            "secretsExportConfiguration": {
              "$ref": "#/definitions/secretsExportConfigurationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Key vault reference and secret settings for the module's secrets export."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
            "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
              "Storage File Data Privileged Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd')]",
              "Storage File Data Privileged Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b8eda974-7b85-4f76-af95-65846b26df6d')]",
              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2024-11-01",
              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.storage-storageaccount.{0}.{1}', replace('0.26.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "cMKKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2024-11-01",
              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
            },
            "cMKUserAssignedIdentity": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
              "existing": true,
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2024-11-30",
              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
            },
            "storageAccount": {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2024-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "properties": "[shallowMerge(createArray(createObject('allowSharedKeyAccess', parameters('allowSharedKeyAccess'), 'defaultToOAuthAuthentication', parameters('defaultToOAuthAuthentication'), 'allowCrossTenantReplication', parameters('allowCrossTenantReplication'), 'allowedCopyScope', parameters('allowedCopyScope'), 'customDomain', createObject('name', parameters('customDomainName'), 'useSubDomainName', parameters('customDomainUseSubDomainName')), 'dnsEndpointType', parameters('dnsEndpointType'), 'isLocalUserEnabled', parameters('isLocalUserEnabled'), 'encryption', union(createObject('keySource', if(not(empty(parameters('customerManagedKey'))), 'Microsoft.Keyvault', 'Microsoft.Storage'), 'services', createObject('blob', if(variables('supportsBlobService'), createObject('enabled', true()), null()), 'file', if(variables('supportsFileService'), createObject('enabled', true()), null()), 'table', createObject('enabled', true(), 'keyType', parameters('keyType')), 'queue', createObject('enabled', true(), 'keyType', parameters('keyType'))), 'keyvaultproperties', if(not(empty(parameters('customerManagedKey'))), createObject('keyname', parameters('customerManagedKey').keyName, 'keyvaulturi', reference('cMKKeyVault').vaultUri, 'keyversion', if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), parameters('customerManagedKey').keyVersion, if(coalesce(tryGet(parameters('customerManagedKey'), 'autoRotationEnabled'), true()), null(), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null()), 'identity', createObject('userAssignedIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2], split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))), null()))), if(parameters('requireInfrastructureEncryption'), createObject('requireInfrastructureEncryption', if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())), createObject())), 'accessTier', if(and(not(equals(parameters('kind'), 'Storage')), not(equals(parameters('kind'), 'BlockBlobStorage'))), parameters('accessTier'), null()), 'sasPolicy', if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', parameters('sasExpirationAction'), 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null()), 'supportsHttpsTrafficOnly', parameters('supportsHttpsTrafficOnly'), 'isSftpEnabled', parameters('enableSftp'), 'isNfsV3Enabled', if(parameters('enableNfsV3'), parameters('enableNfsV3'), ''), 'largeFileSharesState', if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null()), 'minimumTlsVersion', parameters('minimumTlsVersion'), 'networkAcls', if(not(empty(parameters('networkAcls'))), union(createObject('resourceAccessRules', tryGet(parameters('networkAcls'), 'resourceAccessRules'), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), 'Deny'), 'virtualNetworkRules', tryGet(parameters('networkAcls'), 'virtualNetworkRules'), 'ipRules', tryGet(parameters('networkAcls'), 'ipRules')), if(contains(parameters('networkAcls'), 'bypass'), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass')), createObject())), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny')), 'allowBlobPublicAccess', parameters('allowBlobPublicAccess'), 'publicNetworkAccess', if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))), if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), createObject('azureFilesIdentityBasedAuthentication', parameters('azureFilesIdentityBasedAuthentication')), createObject()), if(not(equals(parameters('enableHierarchicalNamespace'), null())), createObject('isHnsEnabled', parameters('enableHierarchicalNamespace')), createObject())))]",
              "dependsOn": [
                "cMKKeyVault",
                "cMKKeyVault::cMKKey"
              ]
            },
            "storageAccount_diagnosticSettings": {
              "copy": {
                "name": "storageAccount_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_roleAssignments": {
              "copy": {
                "name": "storageAccount_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_privateEndpoints": {
              "copy": {
                "name": "storageAccount_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-sa-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "12389807800450456797"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint."
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "privateLinkServiceConnectionType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the private link service connection."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of private link service."
                              }
                            },
                            "requestMessage": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private link service connection."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "customDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipConfigurationType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "13997305779829540948"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2024-05-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                    },
                    "groupId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_managementPolicies": {
              "condition": "[not(empty(coalesce(parameters('managementPolicyRules'), createArray())))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "rules": {
                    "value": "[parameters('managementPolicyRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "14529265638306912023"
                    },
                    "name": "Storage Account Management Policies",
                    "description": "This module deploys a Storage Account Management Policy."
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "rules": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Storage/storageAccounts/managementPolicies@2024-01-01#properties/properties/properties/policy/properties/rules"
                        },
                        "description": "Required. The Storage Account ManagementPolicies Rules."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": "[parameters('rules')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed management policy."
                      },
                      "value": "default"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed management policy."
                      },
                      "value": "default"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed management policy."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount",
                "storageAccount_blobServices"
              ]
            },
            "storageAccount_localUsers": {
              "copy": {
                "name": "storageAccount_localUsers",
                "count": "[length(coalesce(parameters('localUsers'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-LocalUsers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].name]"
                  },
                  "hasSshKey": {
                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshKey]"
                  },
                  "hasSshPassword": {
                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshPassword]"
                  },
                  "permissionScopes": {
                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].permissionScopes]"
                  },
                  "hasSharedKey": {
                    "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'hasSharedKey')]"
                  },
                  "homeDirectory": {
                    "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'homeDirectory')]"
                  },
                  "sshAuthorizedKeys": {
                    "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'sshAuthorizedKeys')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "3261275799710495788"
                    },
                    "name": "Storage Account Local Users",
                    "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication."
                  },
                  "definitions": {
                    "sshAuthorizedKeyType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Description used to store the function/usage of the key."
                          }
                        },
                        "key": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "permissionScopeType": {
                      "type": "object",
                      "properties": {
                        "permissions": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                          }
                        },
                        "resourceName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                          }
                        },
                        "service": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The service used by the local user, e.g. blob, file."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the local user used for SFTP Authentication."
                      }
                    },
                    "hasSharedKey": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                      }
                    },
                    "hasSshKey": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                      }
                    },
                    "hasSshPassword": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                      }
                    },
                    "homeDirectory": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The local user home directory."
                      }
                    },
                    "permissionScopes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/permissionScopeType"
                      },
                      "metadata": {
                        "description": "Required. The permission scopes of the local user."
                      }
                    },
                    "sshAuthorizedKeys": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sshAuthorizedKeyType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The local user SSH authorized keys for SFTP."
                      }
                    }
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "localUsers": {
                      "type": "Microsoft.Storage/storageAccounts/localUsers",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "properties": {
                        "hasSharedKey": "[parameters('hasSharedKey')]",
                        "hasSshKey": "[parameters('hasSshKey')]",
                        "hasSshPassword": "[parameters('hasSshPassword')]",
                        "homeDirectory": "[parameters('homeDirectory')]",
                        "permissionScopes": "[parameters('permissionScopes')]",
                        "sshAuthorizedKeys": "[parameters('sshAuthorizedKeys')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed local user."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed local user."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed local user."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_blobServices": {
              "condition": "[not(empty(parameters('blobServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "containers": {
                    "value": "[tryGet(parameters('blobServices'), 'containers')]"
                  },
                  "automaticSnapshotPolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'automaticSnapshotPolicyEnabled')]"
                  },
                  "changeFeedEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'changeFeedEnabled')]"
                  },
                  "changeFeedRetentionInDays": {
                    "value": "[tryGet(parameters('blobServices'), 'changeFeedRetentionInDays')]"
                  },
                  "containerDeleteRetentionPolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled')]"
                  },
                  "containerDeleteRetentionPolicyDays": {
                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyDays')]"
                  },
                  "containerDeleteRetentionPolicyAllowPermanentDelete": {
                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete')]"
                  },
                  "corsRules": {
                    "value": "[tryGet(parameters('blobServices'), 'corsRules')]"
                  },
                  "defaultServiceVersion": {
                    "value": "[tryGet(parameters('blobServices'), 'defaultServiceVersion')]"
                  },
                  "deleteRetentionPolicyAllowPermanentDelete": {
                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete')]"
                  },
                  "deleteRetentionPolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyEnabled')]"
                  },
                  "deleteRetentionPolicyDays": {
                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyDays')]"
                  },
                  "isVersioningEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'isVersioningEnabled')]"
                  },
                  "lastAccessTimeTrackingPolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled')]"
                  },
                  "restorePolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'restorePolicyEnabled')]"
                  },
                  "restorePolicyDays": {
                    "value": "[tryGet(parameters('blobServices'), 'restorePolicyDays')]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('blobServices'), 'diagnosticSettings')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1215393307957288546"
                    },
                    "name": "Storage Account blob Services",
                    "description": "This module deploys a Storage Account Blob Service."
                  },
                  "definitions": {
                    "corsRuleType": {
                      "type": "object",
                      "properties": {
                        "allowedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                          }
                        },
                        "allowedMethods": {
                          "type": "array",
                          "allowedValues": [
                            "CONNECT",
                            "DELETE",
                            "GET",
                            "HEAD",
                            "MERGE",
                            "OPTIONS",
                            "PATCH",
                            "POST",
                            "PUT",
                            "TRACE"
                          ],
                          "metadata": {
                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                          }
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                          }
                        },
                        "exposedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of response headers to expose to CORS clients."
                          }
                        },
                        "maxAgeInSeconds": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a cors rule."
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "automaticSnapshotPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Automatic Snapshot is enabled if set to true."
                      }
                    },
                    "changeFeedEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
                      }
                    },
                    "changeFeedRetentionInDays": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 1,
                      "maxValue": 146000,
                      "metadata": {
                        "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. If left blank, it indicates an infinite retention of the change feed."
                      }
                    },
                    "containerDeleteRetentionPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
                      }
                    },
                    "containerDeleteRetentionPolicyDays": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 1,
                      "maxValue": 365,
                      "metadata": {
                        "description": "Optional. Indicates the number of days that the deleted item should be retained."
                      }
                    },
                    "containerDeleteRetentionPolicyAllowPermanentDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                      }
                    },
                    "corsRules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/corsRuleType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                      }
                    },
                    "defaultServiceVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
                      }
                    },
                    "deleteRetentionPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for blob soft delete."
                      }
                    },
                    "deleteRetentionPolicyDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "minValue": 1,
                      "maxValue": 365,
                      "metadata": {
                        "description": "Optional. Indicates the number of days that the deleted blob should be retained."
                      }
                    },
                    "deleteRetentionPolicyAllowPermanentDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                      }
                    },
                    "isVersioningEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
                      }
                    },
                    "lastAccessTimeTrackingPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
                      }
                    },
                    "restorePolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
                      }
                    },
                    "restorePolicyDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "minValue": 1,
                      "metadata": {
                        "description": "Optional. How long this blob can be restored. It should be less than DeleteRetentionPolicy days."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Blob containers to create."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "enableReferencedModulesTelemetry": false,
                    "name": "default"
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "blobServices": {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {
                        "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                        "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
                        "containerDeleteRetentionPolicy": {
                          "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                          "days": "[parameters('containerDeleteRetentionPolicyDays')]",
                          "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                        },
                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                        "defaultServiceVersion": "[parameters('defaultServiceVersion')]",
                        "deleteRetentionPolicy": {
                          "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                          "days": "[parameters('deleteRetentionPolicyDays')]",
                          "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                        },
                        "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                        "lastAccessTimeTrackingPolicy": "[if(not(equals(reference('storageAccount', '2024-01-01', 'full').kind, 'Storage')), createObject('enable', parameters('lastAccessTimeTrackingPolicyEnabled'), 'name', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null()), 'trackingGranularityInDays', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())), null())]",
                        "restorePolicy": "[if(parameters('restorePolicyEnabled'), createObject('enabled', true(), 'days', parameters('restorePolicyDays')), null())]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "blobServices_diagnosticSettings": {
                      "copy": {
                        "name": "blobServices_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "blobServices"
                      ]
                    },
                    "blobServices_container": {
                      "copy": {
                        "name": "blobServices_container",
                        "count": "[length(coalesce(parameters('containers'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "blobServiceName": {
                            "value": "[variables('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                          },
                          "defaultEncryptionScope": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultEncryptionScope')]"
                          },
                          "denyEncryptionScopeOverride": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'denyEncryptionScopeOverride')]"
                          },
                          "enableNfsV3AllSquash": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3AllSquash')]"
                          },
                          "enableNfsV3RootSquash": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3RootSquash')]"
                          },
                          "immutableStorageWithVersioningEnabled": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutableStorageWithVersioningEnabled')]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "publicAccess": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'publicAccess')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "immutabilityPolicyProperties": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutabilityPolicyProperties')]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "15600440533481093288"
                            },
                            "name": "Storage Account Blob Containers",
                            "description": "This module deploys a Storage Account Blob Container."
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "blobServiceName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the parent Blob Service. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Storage Container to deploy."
                              }
                            },
                            "defaultEncryptionScope": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Default the container to use specified encryption scope for all writes."
                              }
                            },
                            "denyEncryptionScopeOverride": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Block override of encryption scope from the container default."
                              }
                            },
                            "enableNfsV3AllSquash": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable NFSv3 all squash on blob container."
                              }
                            },
                            "enableNfsV3RootSquash": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable NFSv3 root squash on blob container."
                              }
                            },
                            "immutableStorageWithVersioningEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                              }
                            },
                            "immutabilityPolicyName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. Name of the immutable policy."
                              }
                            },
                            "immutabilityPolicyProperties": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configure immutability policy."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts/blobServices/containers@2024-01-01#properties/properties/properties/metadata"
                                },
                                "description": "Optional. A name-value pair to associate with the container as metadata."
                              },
                              "defaultValue": {}
                            },
                            "publicAccess": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "Container",
                                "Blob",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "storageAccount::blobServices": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('blobServiceName'))]"
                            },
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.storage-blobcontainer.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "container": {
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                              "properties": {
                                "defaultEncryptionScope": "[parameters('defaultEncryptionScope')]",
                                "denyEncryptionScopeOverride": "[parameters('denyEncryptionScopeOverride')]",
                                "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                                "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                                "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                                "metadata": "[parameters('metadata')]",
                                "publicAccess": "[parameters('publicAccess')]"
                              }
                            },
                            "container_roleAssignments": {
                              "copy": {
                                "name": "container_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "container"
                              ]
                            },
                            "immutabilityPolicy": {
                              "condition": "[not(empty(coalesce(parameters('immutabilityPolicyProperties'), createObject())))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-{1}', parameters('name'), parameters('immutabilityPolicyName'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "containerName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "immutabilityPeriodSinceCreationInDays": {
                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays')]"
                                  },
                                  "allowProtectedAppendWrites": {
                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites')]"
                                  },
                                  "allowProtectedAppendWritesAll": {
                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "2858994808980111017"
                                    },
                                    "name": "Storage Account Blob Container Immutability Policies",
                                    "description": "This module deploys a Storage Account Blob Container Immutability Policy."
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "containerName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "immutabilityPeriodSinceCreationInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "metadata": {
                                        "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                      }
                                    },
                                    "allowProtectedAppendWrites": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                      }
                                    },
                                    "allowProtectedAppendWritesAll": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                                      "properties": {
                                        "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                        "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                        "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed immutability policy."
                                      },
                                      "value": "default"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed immutability policy."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed immutability policy."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "container"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed container."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed container."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed container."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "blobServices"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed blob service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed blob service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed blob service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_fileServices": {
              "condition": "[not(empty(parameters('fileServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('fileServices'), 'diagnosticSettings')]"
                  },
                  "protocolSettings": {
                    "value": "[tryGet(parameters('fileServices'), 'protocolSettings')]"
                  },
                  "shareDeleteRetentionPolicy": {
                    "value": "[tryGet(parameters('fileServices'), 'shareDeleteRetentionPolicy')]"
                  },
                  "shares": {
                    "value": "[tryGet(parameters('fileServices'), 'shares')]"
                  },
                  "corsRules": {
                    "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "2735186993322606805"
                    },
                    "name": "Storage Account File Share Services",
                    "description": "This module deploys a Storage Account File Share Service."
                  },
                  "definitions": {
                    "corsRuleType": {
                      "type": "object",
                      "properties": {
                        "allowedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                          }
                        },
                        "allowedMethods": {
                          "type": "array",
                          "allowedValues": [
                            "CONNECT",
                            "DELETE",
                            "GET",
                            "HEAD",
                            "MERGE",
                            "OPTIONS",
                            "PATCH",
                            "POST",
                            "PUT",
                            "TRACE"
                          ],
                          "metadata": {
                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                          }
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                          }
                        },
                        "exposedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of response headers to expose to CORS clients."
                          }
                        },
                        "maxAgeInSeconds": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a cors rule."
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the file service."
                      }
                    },
                    "protocolSettings": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Storage/storageAccounts/fileServices@2024-01-01#properties/properties/properties/protocolSettings"
                        },
                        "description": "Optional. Protocol settings for file service."
                      },
                      "defaultValue": {}
                    },
                    "shareDeleteRetentionPolicy": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Storage/storageAccounts/fileServices@2024-01-01#properties/properties/properties/shareDeleteRetentionPolicy"
                        },
                        "description": "Optional. The service properties for soft delete."
                      },
                      "defaultValue": {
                        "enabled": true,
                        "days": 7
                      }
                    },
                    "corsRules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/corsRuleType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "shares": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. File shares to create."
                      }
                    }
                  },
                  "variables": {
                    "enableReferencedModulesTelemetry": false
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "fileServices": {
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "properties": {
                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                        "protocolSettings": "[parameters('protocolSettings')]",
                        "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                      }
                    },
                    "fileServices_diagnosticSettings": {
                      "copy": {
                        "name": "fileServices_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "fileServices"
                      ]
                    },
                    "fileServices_shares": {
                      "copy": {
                        "name": "fileServices_shares",
                        "count": "[length(coalesce(parameters('shares'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "fileServicesName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('shares'), createArray())[copyIndex()].name]"
                          },
                          "accessTier": {
                            "value": "[coalesce(tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'accessTier'), if(equals(reference('storageAccount', '2024-01-01', 'full').kind, 'FileStorage'), 'Premium', 'TransactionOptimized'))]"
                          },
                          "enabledProtocols": {
                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'enabledProtocols')]"
                          },
                          "rootSquash": {
                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'rootSquash')]"
                          },
                          "shareQuota": {
                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'shareQuota')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "15881640847294537074"
                            },
                            "name": "Storage Account File Shares",
                            "description": "This module deploys a Storage Account File Share."
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "fileServicesName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the file share to create."
                              }
                            },
                            "accessTier": {
                              "type": "string",
                              "defaultValue": "TransactionOptimized",
                              "allowedValues": [
                                "Premium",
                                "Hot",
                                "Cool",
                                "TransactionOptimized"
                              ],
                              "metadata": {
                                "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                              }
                            },
                            "shareQuota": {
                              "type": "int",
                              "defaultValue": 5120,
                              "metadata": {
                                "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                              }
                            },
                            "enabledProtocols": {
                              "type": "string",
                              "defaultValue": "SMB",
                              "allowedValues": [
                                "NFS",
                                "SMB"
                              ],
                              "metadata": {
                                "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                              }
                            },
                            "rootSquash": {
                              "type": "string",
                              "defaultValue": "NoRootSquash",
                              "allowedValues": [
                                "AllSquash",
                                "NoRootSquash",
                                "RootSquash"
                              ],
                              "metadata": {
                                "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "storageAccount::fileService": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('fileServicesName'))]"
                            },
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.storage-fileshare.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "fileShare": {
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                              "properties": {
                                "accessTier": "[parameters('accessTier')]",
                                "shareQuota": "[parameters('shareQuota')]",
                                "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                "enabledProtocols": "[parameters('enabledProtocols')]"
                              }
                            },
                            "fileShare_roleAssignments": {
                              "copy": {
                                "name": "fileShare_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Share-Rbac-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "scope": {
                                    "value": "[replace(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), '/shares/', '/fileshares/')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]"
                                  },
                                  "principalId": {
                                    "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]"
                                  },
                                  "principalType": {
                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]"
                                  },
                                  "condition": {
                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]"
                                  },
                                  "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), createObject('value', coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0')), createObject('value', null()))]",
                                  "delegatedManagedIdentityResourceId": {
                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                  },
                                  "description": {
                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "parameters": {
                                    "scope": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The scope to deploy the role assignment to."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role assignment."
                                      }
                                    },
                                    "roleDefinitionId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The role definition Id to assign."
                                      }
                                    },
                                    "principalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Device",
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User",
                                        ""
                                      ],
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of the role assignment."
                                      }
                                    },
                                    "condition": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                      }
                                    },
                                    "conditionVersion": {
                                      "type": "string",
                                      "allowedValues": [
                                        "2.0"
                                      ],
                                      "defaultValue": "2.0",
                                      "metadata": {
                                        "description": "Optional. Version of the condition."
                                      }
                                    },
                                    "delegatedManagedIdentityResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The Resource Id of the delegated managed identity resource."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[parameters('scope')]",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "principalId": "[parameters('principalId')]",
                                        "description": "[parameters('description')]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "fileShare"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "fileServices",
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_queueServices": {
              "condition": "[not(empty(parameters('queueServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('queueServices'), 'diagnosticSettings')]"
                  },
                  "queues": {
                    "value": "[tryGet(parameters('queueServices'), 'queues')]"
                  },
                  "corsRules": {
                    "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1100093319443502715"
                    },
                    "name": "Storage Account Queue Services",
                    "description": "This module deploys a Storage Account Queue Service."
                  },
                  "definitions": {
                    "corsRuleType": {
                      "type": "object",
                      "properties": {
                        "allowedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                          }
                        },
                        "allowedMethods": {
                          "type": "array",
                          "allowedValues": [
                            "CONNECT",
                            "DELETE",
                            "GET",
                            "HEAD",
                            "MERGE",
                            "OPTIONS",
                            "PATCH",
                            "POST",
                            "PUT",
                            "TRACE"
                          ],
                          "metadata": {
                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                          }
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                          }
                        },
                        "exposedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of response headers to expose to CORS clients."
                          }
                        },
                        "maxAgeInSeconds": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a cors rule."
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "queues": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Queues to create."
                      }
                    },
                    "corsRules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/corsRuleType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "name": "default"
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "queueServices": {
                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {
                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                      }
                    },
                    "queueServices_diagnosticSettings": {
                      "copy": {
                        "name": "queueServices_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "queueServices"
                      ]
                    },
                    "queueServices_queues": {
                      "copy": {
                        "name": "queueServices_queues",
                        "count": "[length(coalesce(parameters('queues'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('queues'), createArray())[copyIndex()].name]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "17963799770990303971"
                            },
                            "name": "Storage Account Queues",
                            "description": "This module deploys a Storage Account Queue."
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the storage queue to deploy."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts/queueServices/queues@2024-01-01#properties/properties/properties/metadata"
                                },
                                "description": "Optional. A name-value pair that represents queue metadata."
                              },
                              "defaultValue": {}
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "storageAccount::queueServices": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                            },
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "queue": {
                              "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "properties": {
                                "metadata": "[parameters('metadata')]"
                              }
                            },
                            "queue_roleAssignments": {
                              "copy": {
                                "name": "queue_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "queue"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed queue."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed queue."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed queue."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_tableServices": {
              "condition": "[not(empty(parameters('tableServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('tableServices'), 'diagnosticSettings')]"
                  },
                  "tables": {
                    "value": "[tryGet(parameters('tableServices'), 'tables')]"
                  },
                  "corsRules": {
                    "value": "[tryGet(parameters('tableServices'), 'corsRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "13069389074590786512"
                    },
                    "name": "Storage Account Table Services",
                    "description": "This module deploys a Storage Account Table Service."
                  },
                  "definitions": {
                    "corsRuleType": {
                      "type": "object",
                      "properties": {
                        "allowedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                          }
                        },
                        "allowedMethods": {
                          "type": "array",
                          "allowedValues": [
                            "CONNECT",
                            "DELETE",
                            "GET",
                            "HEAD",
                            "MERGE",
                            "OPTIONS",
                            "PATCH",
                            "POST",
                            "PUT",
                            "TRACE"
                          ],
                          "metadata": {
                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                          }
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                          }
                        },
                        "exposedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of response headers to expose to CORS clients."
                          }
                        },
                        "maxAgeInSeconds": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a cors rule."
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. tables to create."
                      }
                    },
                    "corsRules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/corsRuleType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "name": "default"
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "tableServices": {
                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {
                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                      }
                    },
                    "tableServices_diagnosticSettings": {
                      "copy": {
                        "name": "tableServices_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "tableServices"
                      ]
                    },
                    "tableServices_tables": {
                      "copy": {
                        "name": "tableServices_tables",
                        "count": "[length(parameters('tables'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('tables')[copyIndex()].name]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "10905926757212375091"
                            },
                            "name": "Storage Account Table",
                            "description": "This module deploys a Storage Account Table."
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the table."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "storageAccount::tableServices": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                            },
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "table": {
                              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "table_roleAssignments": {
                              "copy": {
                                "name": "table_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}/tables/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "table"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed table service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed table service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed table service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "secretsExport": {
              "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                  },
                  "secretsToSet": {
                    "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'accessKey1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey1Name'), 'value', listKeys('storageAccount', '2024-01-01').keys[0].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString1Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[0].value, environment().suffixes.storage))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'accessKey2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey2Name'), 'value', listKeys('storageAccount', '2024-01-01').keys[1].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString2Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[1].value, environment().suffixes.storage))), createArray()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "9368972709899985618"
                    }
                  },
                  "definitions": {
                    "secretSetOutputType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        },
                        "secretUriWithVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI with version of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "secretToSetType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the secret to set."
                          }
                        },
                        "value": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. The value of the secret to set."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Key Vault to set the ecrets in."
                      }
                    },
                    "secretsToSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretToSetType"
                      },
                      "metadata": {
                        "description": "Required. The secrets to set in the Key Vault."
                      }
                    }
                  },
                  "resources": {
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2024-11-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "secrets": {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(parameters('secretsToSet'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                      "properties": {
                        "value": "[parameters('secretsToSet')[copyIndex()].value]"
                      }
                    }
                  },
                  "outputs": {
                    "secretsSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretSetOutputType"
                      },
                      "metadata": {
                        "description": "The references to the secrets exported to the provided Key Vault."
                      },
                      "copy": {
                        "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                        "input": {
                          "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                          "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                          "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed storage account."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed storage account."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed storage account."
              },
              "value": "[resourceGroup().name]"
            },
            "primaryBlobEndpoint": {
              "type": "string",
              "metadata": {
                "description": "The primary blob endpoint reference if blob services are deployed."
              },
              "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('storageAccount', '2024-01-01', 'full'), 'identity'), 'principalId')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('storageAccount', '2024-01-01', 'full').location]"
            },
            "serviceEndpoints": {
              "type": "object",
              "metadata": {
                "description": "All service endpoints of the deployed storage account, Note Standard_LRS and Standard_ZRS accounts only have a blob service endpoint."
              },
              "value": "[reference('storageAccount').primaryEndpoints]"
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointOutputType"
              },
              "metadata": {
                "description": "The private endpoints of the Storage Account."
              },
              "copy": {
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                "input": {
                  "name": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                  "groupId": "[tryGet(tryGet(reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                  "customDnsConfigs": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                  "networkInterfaceResourceIds": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                }
              }
            },
            "exportedSecrets": {
              "$ref": "#/definitions/secretsOutputType",
              "metadata": {
                "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
              },
              "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
            },
            "primaryAccessKey": {
              "type": "securestring",
              "metadata": {
                "description": "The primary access key of the storage account."
              },
              "value": "[listKeys('storageAccount', '2024-01-01').keys[0].value]"
            },
            "secondaryAccessKey": {
              "type": "securestring",
              "metadata": {
                "description": "The secondary access key of the storage account."
              },
              "value": "[listKeys('storageAccount', '2024-01-01').keys[1].value]"
            },
            "primaryConnectionString": {
              "type": "securestring",
              "metadata": {
                "description": "The primary connection string of the storage account."
              },
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[0].value, environment().suffixes.storage)]"
            },
            "secondaryConnectionString": {
              "type": "securestring",
              "metadata": {
                "description": "The secondary connection string of the storage account."
              },
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[1].value, environment().suffixes.storage)]"
            }
          }
        }
      },
      "dependsOn": [
        "logAnalyticsWorkspace",
        "rg",
        "storageFilePrivateDnsZone",
        "virtualNetwork"
      ]
    },
    "keyVault": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "key-vault-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('keyVaultName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": "standard"
          },
          "diagnosticSettings": "[if(parameters('deployDiagnostics'), if(parameters('deployDiagnostics'), createObject('value', createArray(createObject('name', variables('sendToLogAnalyticsName'), 'workspaceResourceId', reference('logAnalyticsWorkspace').outputs.resourceId.value, 'logCategoriesAndGroups', createArray(createObject('categoryGroup', 'allLogs')), 'metricCategories', createArray()))), createObject('value', createArray())), createObject('value', createArray()))]",
          "enablePurgeProtection": {
            "value": false
          },
          "enableRbacAuthorization": {
            "value": true
          },
          "secrets": {
            "value": [
              {
                "name": "[variables('storageAccountKeySecretName')]",
                "value": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))), 'Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2024-01-01').keys[0].value]"
              },
              {
                "name": "[variables('foundryUsernameSecretName')]",
                "value": "[parameters('foundryUsername')]"
              },
              {
                "name": "[variables('foundryPasswordSecretName')]",
                "value": "[parameters('foundryPassword')]"
              },
              {
                "name": "[variables('foundryAdminKeySecretName')]",
                "value": "[parameters('foundryAdminKey')]"
              }
            ]
          },
          "networkAcls": {
            "value": {
              "defaultAction": "[if(variables('effectiveDeployNetworking'), 'Deny', 'Allow')]",
              "bypass": "AzureServices"
            }
          },
          "privateEndpoints": "[if(variables('effectiveDeployNetworking'), createObject('value', createArray(createObject('subnetResourceId', reference('virtualNetwork').outputs.subnetResourceIds.value[2], 'service', 'vault', 'privateDnsZoneGroup', createObject('name', 'default', 'privateDnsZoneGroupConfigs', createArray(createObject('name', 'keyvaultdns', 'privateDnsZoneResourceId', reference('keyVaultPrivateDnsZone').outputs.resourceId.value))), 'tags', variables('tags')))), createObject('value', createArray()))]",
          "roleAssignments": {
            "value": "[concat(createArray(createObject('roleDefinitionIdOrName', 'Key Vault Secrets Officer', 'principalId', parameters('principalId'), 'principalType', parameters('principalIdType'))), if(equals(parameters('computeService'), 'Web App'), createArray(createObject('roleDefinitionIdOrName', 'Key Vault Secrets User', 'principalId', tryGet(tryGet(reference('webAppFoundryVtt').outputs, 'systemAssignedMIPrincipalId'), 'value'), 'principalType', 'ServicePrincipal')), createArray()))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8811577289487069918"
            },
            "name": "Key Vaults",
            "description": "This module deploys a Key Vault."
          },
          "definitions": {
            "networkAclsType": {
              "type": "object",
              "properties": {
                "bypass": {
                  "type": "string",
                  "allowedValues": [
                    "AzureServices",
                    "None"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The bypass options for traffic for the network ACLs."
                  }
                },
                "defaultAction": {
                  "type": "string",
                  "allowedValues": [
                    "Allow",
                    "Deny"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The default action for the network ACLs, when no rule matches."
                  }
                },
                "ipRules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. An IPv4 address range in CIDR notation, such as \"124.56.78.91\" (simple IP address) or \"124.56.78.0/24\"."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of IP rules."
                  }
                },
                "virtualNetworkRules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource ID of the virtual network subnet."
                        }
                      },
                      "ignoreMissingVnetServiceEndpoint": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Whether NRP will ignore the check if parent subnet has serviceEndpoints configured."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of virtual network rules."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for rules governing the accessibility of the key vault from specific network locations."
              }
            },
            "privateEndpointOutputType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the private endpoint."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the private endpoint."
                  }
                },
                "groupId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The group Id for the private endpoint Group."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fqdn": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "FQDN that resolves to private endpoint IP address."
                        }
                      },
                      "ipAddresses": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of private IP addresses of the private endpoint."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "The custom DNS configurations of the private endpoint."
                  }
                },
                "networkInterfaceResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "The IDs of the network interfaces associated with the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "credentialOutputType": {
              "type": "object",
              "properties": {
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The item's resourceId."
                  }
                },
                "uri": {
                  "type": "string",
                  "metadata": {
                    "description": "The item's uri."
                  }
                },
                "uriWithVersion": {
                  "type": "string",
                  "metadata": {
                    "description": "The item's uri with version."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a credential output."
              }
            },
            "accessPolicyType": {
              "type": "object",
              "properties": {
                "tenantId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                  }
                },
                "objectId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                  }
                },
                "applicationId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application ID of the client making request on behalf of a principal."
                  }
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "allowedValues": [
                        "all",
                        "backup",
                        "create",
                        "decrypt",
                        "delete",
                        "encrypt",
                        "get",
                        "getrotationpolicy",
                        "import",
                        "list",
                        "purge",
                        "recover",
                        "release",
                        "restore",
                        "rotate",
                        "setrotationpolicy",
                        "sign",
                        "unwrapKey",
                        "update",
                        "verify",
                        "wrapKey"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Permissions to keys."
                      }
                    },
                    "secrets": {
                      "type": "array",
                      "allowedValues": [
                        "all",
                        "backup",
                        "delete",
                        "get",
                        "list",
                        "purge",
                        "recover",
                        "restore",
                        "set"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Permissions to secrets."
                      }
                    },
                    "certificates": {
                      "type": "array",
                      "allowedValues": [
                        "all",
                        "backup",
                        "create",
                        "delete",
                        "deleteissuers",
                        "get",
                        "getissuers",
                        "import",
                        "list",
                        "listissuers",
                        "managecontacts",
                        "manageissuers",
                        "purge",
                        "recover",
                        "restore",
                        "setissuers",
                        "update"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Permissions to certificates."
                      }
                    },
                    "storage": {
                      "type": "array",
                      "allowedValues": [
                        "all",
                        "backup",
                        "delete",
                        "deletesas",
                        "get",
                        "getsas",
                        "list",
                        "listsas",
                        "purge",
                        "recover",
                        "regeneratekey",
                        "restore",
                        "set",
                        "setsas",
                        "update"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Permissions to storage accounts."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Permissions the identity has for keys, secrets and certificates."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an access policy."
              }
            },
            "secretType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the secret."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource tags."
                  }
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Defines whether the secret is enabled or disabled."
                      }
                    },
                    "exp": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Defines when the secret will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "nbf": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If set, defines the date from which onwards the secret becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Contains attributes of the secret."
                  }
                },
                "contentType": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The content type of the secret."
                  }
                },
                "value": {
                  "type": "securestring",
                  "metadata": {
                    "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a secret output."
              }
            },
            "keyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the key."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource tags."
                  }
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Defines whether the key is enabled or disabled."
                      }
                    },
                    "exp": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Defines when the key will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "nbf": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If set, defines the date from which onwards the key becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Contains attributes of the key."
                  }
                },
                "curveName": {
                  "type": "string",
                  "allowedValues": [
                    "P-256",
                    "P-256K",
                    "P-384",
                    "P-521"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The elliptic curve name. Only works if \"keySize\" equals \"EC\" or \"EC-HSM\". Default is \"P-256\"."
                  }
                },
                "keyOps": {
                  "type": "array",
                  "allowedValues": [
                    "decrypt",
                    "encrypt",
                    "import",
                    "release",
                    "sign",
                    "unwrapKey",
                    "verify",
                    "wrapKey"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The allowed operations on this key."
                  }
                },
                "keySize": {
                  "type": "int",
                  "allowedValues": [
                    2048,
                    3072,
                    4096
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The key size in bits. Only works if \"keySize\" equals \"RSA\" or \"RSA-HSM\". Default is \"4096\"."
                  }
                },
                "kty": {
                  "type": "string",
                  "allowedValues": [
                    "EC",
                    "EC-HSM",
                    "RSA",
                    "RSA-HSM"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The type of the key. Default is \"EC\"."
                  }
                },
                "releasePolicy": {
                  "type": "object",
                  "properties": {
                    "contentType": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Content type and version of key release policy."
                      }
                    },
                    "data": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Blob encoding the policy rules under which the key can be released."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Key release policy."
                  }
                },
                "rotationPolicy": {
                  "$ref": "#/definitions/rotationPolicyType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Key rotation policy."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a key."
              }
            },
            "_1.privateEndpointCustomDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.privateEndpointIpConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.privateEndpointPrivateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the private DNS Zone Group config."
                        }
                      },
                      "privateDnsZoneResourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of the private DNS zone."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "privateEndpointSingleServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private Endpoint."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The location to deploy the Private Endpoint to."
                  }
                },
                "privateLinkServiceConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private link connection to create."
                  }
                },
                "service": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                  }
                },
                "resourceGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                  }
                },
                "privateDnsZoneGroup": {
                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                  }
                },
                "isManualConnection": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If Manual Private Link Connection is required."
                  }
                },
                "manualConnectionRequestMessage": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 140,
                  "metadata": {
                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Custom DNS configurations."
                  }
                },
                "ipConfigurations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                  }
                },
                "applicationSecurityGroupResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                  }
                },
                "customNetworkInterfaceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateEndpoints@2024-07-01#properties/tags"
                    },
                    "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable/Disable usage telemetry for module."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "rotationPolicyType": {
              "type": "object",
              "properties": {
                "attributes": {
                  "type": "object",
                  "properties": {
                    "expiryTime": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The expiration time for the new key version. It should be in ISO8601 format. Eg: \"P90D\", \"P1Y\"."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The attributes of key rotation policy."
                  }
                },
                "lifetimeActions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "notify",
                              "rotate"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The type of the action."
                            }
                          }
                        },
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The type of the action."
                        }
                      },
                      "trigger": {
                        "type": "object",
                        "properties": {
                          "timeAfterCreate": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                            }
                          },
                          "timeBeforeExpiry": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                            }
                          }
                        },
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The time duration for rotating the key."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The key rotation policy lifetime actions."
                  }
                }
              },
              "metadata": {
                "description": "The type for a rotation policy.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "key/main.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. Name of the Key Vault. Must be globally unique."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "accessPolicies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accessPolicyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. All access policies to create."
              }
            },
            "secrets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/secretType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. All secrets to create."
              }
            },
            "keys": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/keyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. All keys to create."
              }
            },
            "enableVaultForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
              }
            },
            "enableVaultForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if the vault is enabled for a template deployment."
              }
            },
            "enableVaultForDiskEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "metadata": {
                "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
              }
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
              }
            },
            "createMode": {
              "type": "string",
              "defaultValue": "default",
              "allowedValues": [
                "default",
                "recover"
              ],
              "metadata": {
                "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not."
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "premium",
              "allowedValues": [
                "premium",
                "standard"
              ],
              "metadata": {
                "description": "Optional. Specifies the SKU for the vault."
              }
            },
            "networkAcls": {
              "$ref": "#/definitions/networkAclsType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Rules governing the accessibility of the resource from specific network locations."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointSingleServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.KeyVault/vaults@2024-11-01#properties/tags"
                },
                "description": "Optional. Resource tags."
              },
              "nullable": true
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              },
              {
                "name": "formattedAccessPolicies",
                "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                "input": {
                  "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                  "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                  "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                  "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                }
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
              "Key Vault Certificate User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db79e9a7-68ee-4b58-9aeb-b90e7c24fcba')]",
              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.keyvault-vault.{0}.{1}', replace('0.13.3', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "keyVault": {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "createMode": "[parameters('createMode')]",
                "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": "[variables('formattedAccessPolicies')]",
                "sku": {
                  "name": "[parameters('sku')]",
                  "family": "A"
                },
                "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(coalesce(parameters('privateEndpoints'), createArray()))), empty(coalesce(parameters('networkAcls'), createObject()))), 'Disabled', null()))]"
              }
            },
            "keyVault_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_diagnosticSettings": {
              "copy": {
                "name": "keyVault_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_roleAssignments": {
              "copy": {
                "name": "keyVault_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.KeyVault/vaults', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_accessPolicies": {
              "condition": "[not(empty(parameters('accessPolicies')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "accessPolicies": {
                    "value": "[parameters('accessPolicies')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "8803020983329720581"
                    },
                    "name": "Key Vault Access Policies",
                    "description": "This module deploys a Key Vault Access Policy."
                  },
                  "definitions": {
                    "accessPoliciesType": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                          }
                        },
                        "objectId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                          }
                        },
                        "applicationId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application ID of the client making request on behalf of a principal."
                          }
                        },
                        "permissions": {
                          "type": "object",
                          "properties": {
                            "keys": {
                              "type": "array",
                              "allowedValues": [
                                "all",
                                "backup",
                                "create",
                                "decrypt",
                                "delete",
                                "encrypt",
                                "get",
                                "getrotationpolicy",
                                "import",
                                "list",
                                "purge",
                                "recover",
                                "release",
                                "restore",
                                "rotate",
                                "setrotationpolicy",
                                "sign",
                                "unwrapKey",
                                "update",
                                "verify",
                                "wrapKey"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Permissions to keys."
                              }
                            },
                            "secrets": {
                              "type": "array",
                              "allowedValues": [
                                "all",
                                "backup",
                                "delete",
                                "get",
                                "list",
                                "purge",
                                "recover",
                                "restore",
                                "set"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Permissions to secrets."
                              }
                            },
                            "certificates": {
                              "type": "array",
                              "allowedValues": [
                                "all",
                                "backup",
                                "create",
                                "delete",
                                "deleteissuers",
                                "get",
                                "getissuers",
                                "import",
                                "list",
                                "listissuers",
                                "managecontacts",
                                "manageissuers",
                                "purge",
                                "recover",
                                "restore",
                                "setissuers",
                                "update"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Permissions to certificates."
                              }
                            },
                            "storage": {
                              "type": "array",
                              "allowedValues": [
                                "all",
                                "backup",
                                "delete",
                                "deletesas",
                                "get",
                                "getsas",
                                "list",
                                "listsas",
                                "purge",
                                "recover",
                                "regeneratekey",
                                "restore",
                                "set",
                                "setsas",
                                "update"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Permissions to storage accounts."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Permissions the identity has for keys, secrets and certificates."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for an access policy."
                      }
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/accessPoliciesType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.keyvault-accesspolicy.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2024-11-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "policies": {
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "accessPolicies",
                            "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                            "input": {
                              "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')], 'applicationId'), '')]",
                              "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')].objectId]",
                              "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')].permissions]",
                              "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')], 'tenantId'), tenant().tenantId)]"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the access policies assignment was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the access policies assignment."
                      },
                      "value": "add"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the access policies assignment."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_secrets": {
              "copy": {
                "name": "keyVault_secrets",
                "count": "[length(coalesce(parameters('secrets'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].name]"
                  },
                  "value": {
                    "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].value]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "attributesEnabled": {
                    "value": "[tryGet(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributes'), 'enabled')]"
                  },
                  "attributesExp": {
                    "value": "[tryGet(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributes'), 'exp')]"
                  },
                  "attributesNbf": {
                    "value": "[tryGet(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributes'), 'nbf')]"
                  },
                  "contentType": {
                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'contentType')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "8701309639990049090"
                    },
                    "name": "Key Vault Secrets",
                    "description": "This module deploys a Key Vault Secret."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 127,
                      "metadata": {
                        "description": "Required. The name of the secret (letters (upper and lower case), numbers, -)."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.KeyVault/vaults/secrets@2024-11-01#properties/tags"
                        },
                        "description": "Optional. Resource tags."
                      },
                      "nullable": true
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "contentType": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The content type of the secret."
                      }
                    },
                    "value": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.keyvault-secret.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2024-11-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "secret": {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "contentType": "[parameters('contentType')]",
                        "attributes": {
                          "enabled": "[parameters('attributesEnabled')]",
                          "exp": "[parameters('attributesExp')]",
                          "nbf": "[parameters('attributesNbf')]"
                        },
                        "value": "[parameters('value')]"
                      }
                    },
                    "secret_roleAssignments": {
                      "copy": {
                        "name": "secret_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "secret"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the secret."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the secret."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                    },
                    "secretUri": {
                      "type": "string",
                      "metadata": {
                        "description": "The uri of the secret."
                      },
                      "value": "[reference('secret').secretUri]"
                    },
                    "secretUriWithVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "The uri with version of the secret."
                      },
                      "value": "[reference('secret').secretUriWithVersion]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the secret was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_keys": {
              "copy": {
                "name": "keyVault_keys",
                "count": "[length(coalesce(parameters('keys'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('keys'), createArray())[copyIndex()].name]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "attributesEnabled": {
                    "value": "[tryGet(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributes'), 'enabled')]"
                  },
                  "attributesExp": {
                    "value": "[tryGet(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributes'), 'exp')]"
                  },
                  "attributesNbf": {
                    "value": "[tryGet(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributes'), 'nbf')]"
                  },
                  "curveName": "[if(and(not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA')), not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM'))), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'curveName'), 'P-256')), createObject('value', null()))]",
                  "keyOps": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keyOps')]"
                  },
                  "keySize": "[if(or(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA'), equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM')), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keySize'), 4096)), createObject('value', null()))]",
                  "releasePolicy": {
                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'releasePolicy'), createObject())]"
                  },
                  "kty": {
                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'EC')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "rotationPolicy": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'rotationPolicy')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1266219369073699726"
                    },
                    "name": "Key Vault Keys",
                    "description": "This module deploys a Key Vault Key."
                  },
                  "definitions": {
                    "rotationPolicyType": {
                      "type": "object",
                      "properties": {
                        "attributes": {
                          "type": "object",
                          "properties": {
                            "expiryTime": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The expiration time for the new key version. It should be in ISO8601 format. Eg: \"P90D\", \"P1Y\"."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The attributes of key rotation policy."
                          }
                        },
                        "lifetimeActions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "allowedValues": [
                                      "notify",
                                      "rotate"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The type of the action."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The type of the action."
                                }
                              },
                              "trigger": {
                                "type": "object",
                                "properties": {
                                  "timeAfterCreate": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                    }
                                  },
                                  "timeBeforeExpiry": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The time duration for rotating the key."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The key rotation policy lifetime actions."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a rotation policy."
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.KeyVault/vaults/keys@2024-11-01#properties/tags"
                        },
                        "description": "Optional. Resource tags."
                      },
                      "nullable": true
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "curveName": {
                      "type": "string",
                      "defaultValue": "P-256",
                      "allowedValues": [
                        "P-256",
                        "P-256K",
                        "P-384",
                        "P-521"
                      ],
                      "metadata": {
                        "description": "Optional. The elliptic curve name."
                      }
                    },
                    "keyOps": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "allowedValues": [
                        "decrypt",
                        "encrypt",
                        "import",
                        "sign",
                        "unwrapKey",
                        "verify",
                        "wrapKey"
                      ],
                      "metadata": {
                        "description": "Optional. Array of JsonWebKeyOperation."
                      }
                    },
                    "keySize": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                      }
                    },
                    "kty": {
                      "type": "string",
                      "defaultValue": "EC",
                      "allowedValues": [
                        "EC",
                        "EC-HSM",
                        "RSA",
                        "RSA-HSM"
                      ],
                      "metadata": {
                        "description": "Optional. The type of the key."
                      }
                    },
                    "releasePolicy": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Key release policy."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "rotationPolicy": {
                      "$ref": "#/definitions/rotationPolicyType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Key rotation policy properties object."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.keyvault-key.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2024-11-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "key": {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": "[shallowMerge(createArray(createObject('attributes', createObject('enabled', parameters('attributesEnabled'), 'exp', parameters('attributesExp'), 'nbf', parameters('attributesNbf')), 'curveName', parameters('curveName'), 'keyOps', parameters('keyOps'), 'keySize', parameters('keySize'), 'kty', parameters('kty'), 'release_policy', coalesce(parameters('releasePolicy'), createObject())), if(not(empty(parameters('rotationPolicy'))), createObject('rotationPolicy', parameters('rotationPolicy')), createObject())))]"
                    },
                    "key_roleAssignments": {
                      "copy": {
                        "name": "key_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "key"
                      ]
                    }
                  },
                  "outputs": {
                    "keyUri": {
                      "type": "string",
                      "metadata": {
                        "description": "The uri of the key."
                      },
                      "value": "[reference('key').keyUri]"
                    },
                    "keyUriWithVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "The uri with version of the key."
                      },
                      "value": "[reference('key').keyUriWithVersion]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the key was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_privateEndpoints": {
              "copy": {
                "name": "keyVault_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-keyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "12389807800450456797"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint."
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "privateLinkServiceConnectionType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the private link service connection."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of private link service."
                              }
                            },
                            "requestMessage": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private link service connection."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "customDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipConfigurationType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "13997305779829540948"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2024-05-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                    },
                    "groupId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "keyVault"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the key vault."
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the key vault was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the key vault."
              },
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "metadata": {
                "description": "The URI of the key vault."
              },
              "value": "[reference('keyVault').vaultUri]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('keyVault', '2024-11-01', 'full').location]"
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointOutputType"
              },
              "metadata": {
                "description": "The private endpoints of the key vault."
              },
              "copy": {
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                "input": {
                  "name": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                  "groupId": "[tryGet(tryGet(reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                  "customDnsConfigs": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                  "networkInterfaceResourceIds": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                }
              }
            },
            "secrets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/credentialOutputType"
              },
              "metadata": {
                "description": "The properties of the created secrets."
              },
              "copy": {
                "count": "[length(range(0, length(coalesce(parameters('secrets'), createArray()))))]",
                "input": {
                  "resourceId": "[reference(format('keyVault_secrets[{0}]', range(0, length(coalesce(parameters('secrets'), createArray())))[copyIndex()])).outputs.resourceId.value]",
                  "uri": "[reference(format('keyVault_secrets[{0}]', range(0, length(coalesce(parameters('secrets'), createArray())))[copyIndex()])).outputs.secretUri.value]",
                  "uriWithVersion": "[reference(format('keyVault_secrets[{0}]', range(0, length(coalesce(parameters('secrets'), createArray())))[copyIndex()])).outputs.secretUriWithVersion.value]"
                }
              }
            },
            "keys": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/credentialOutputType"
              },
              "metadata": {
                "description": "The properties of the created keys."
              },
              "copy": {
                "count": "[length(range(0, length(coalesce(parameters('keys'), createArray()))))]",
                "input": {
                  "resourceId": "[reference(format('keyVault_keys[{0}]', range(0, length(coalesce(parameters('keys'), createArray())))[copyIndex()])).outputs.resourceId.value]",
                  "uri": "[reference(format('keyVault_keys[{0}]', range(0, length(coalesce(parameters('keys'), createArray())))[copyIndex()])).outputs.keyUri.value]",
                  "uriWithVersion": "[reference(format('keyVault_keys[{0}]', range(0, length(coalesce(parameters('keys'), createArray())))[copyIndex()])).outputs.keyUriWithVersion.value]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "keyVaultPrivateDnsZone",
        "logAnalyticsWorkspace",
        "rg",
        "storageAccount",
        "storageAccountReference",
        "virtualNetwork",
        "webAppFoundryVtt"
      ]
    },
    "appServicePlan": {
      "condition": "[equals(parameters('computeService'), 'Web App')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "app-service-plan-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('appServicePlanName')]"
          },
          "kind": {
            "value": "linux"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "skuCapacity": {
            "value": 1
          },
          "skuName": {
            "value": "[parameters('appServicePlanSkuName')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "zoneRedundant": {
            "value": false
          },
          "diagnosticSettings": "[if(parameters('deployDiagnostics'), if(parameters('deployDiagnostics'), createObject('value', createArray(createObject('name', variables('sendToLogAnalyticsName'), 'workspaceResourceId', reference('logAnalyticsWorkspace').outputs.resourceId.value, 'logCategoriesAndGroups', createArray(createObject('categoryGroup', 'allLogs')), 'metricCategories', createArray()))), createObject('value', createArray())), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "16945786131371363466"
            },
            "name": "App Service Plan",
            "description": "This module deploys an App Service Plan."
          },
          "definitions": {
            "diagnosticSettingMetricsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 60,
              "metadata": {
                "description": "Required. Name of the app service plan."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "P1v3",
              "metadata": {
                "example": "  'F1'\n  'B1'\n  'P1v3'\n  'I1v2'\n  'FC1'\n  ",
                "description": "Optional. The name of the SKU will Determine the tier, size, family of the App Service Plan. This defaults to P1v3 to leverage availability zones."
              }
            },
            "skuCapacity": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "Optional. Number of workers associated with the App Service Plan. This defaults to 3, to leverage availability zones."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "app",
              "allowedValues": [
                "app",
                "elastic",
                "functionapp",
                "windows",
                "linux"
              ],
              "metadata": {
                "description": "Optional. Kind of server OS."
              }
            },
            "reserved": {
              "type": "bool",
              "defaultValue": "[equals(parameters('kind'), 'linux')]",
              "metadata": {
                "description": "Conditional. Defaults to false when creating Windows/app App Service Plan. Required if creating a Linux App Service Plan and must be set to true."
              }
            },
            "appServiceEnvironmentResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Resource ID of the App Service Environment to use for the App Service Plan."
              }
            },
            "workerTierName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Target worker tier assigned to the App Service plan."
              }
            },
            "perSiteScaling": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
              }
            },
            "elasticScaleEnabled": {
              "type": "bool",
              "defaultValue": "[greater(parameters('maximumElasticWorkerCount'), 1)]",
              "metadata": {
                "description": "Optional. Enable/Disable ElasticScaleEnabled App Service Plan."
              }
            },
            "maximumElasticWorkerCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Optional. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
              }
            },
            "targetWorkerCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Scaling worker count."
              }
            },
            "targetWorkerSize": {
              "type": "int",
              "defaultValue": 0,
              "allowedValues": [
                0,
                1,
                2
              ],
              "metadata": {
                "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": "[if(or(startsWith(parameters('skuName'), 'P'), startsWith(parameters('skuName'), 'EP')), true(), false())]",
              "metadata": {
                "description": "Optional. Zone Redundant server farms can only be used on Premium or ElasticPremium SKU tiers within ZRS Supported regions (https://learn.microsoft.com/en-us/azure/storage/common/redundancy-regions-zrs)."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/serverfarms@2024-11-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingMetricsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.web-serverfarm.{0}.{1}', replace('0.5.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "appServicePlan": {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[if(equals(parameters('skuName'), 'FC1'), createObject('name', parameters('skuName'), 'tier', 'FlexConsumption'), createObject('name', parameters('skuName'), 'capacity', parameters('skuCapacity')))]",
              "properties": {
                "workerTierName": "[parameters('workerTierName')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                "perSiteScaling": "[parameters('perSiteScaling')]",
                "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]",
                "elasticScaleEnabled": "[parameters('elasticScaleEnabled')]",
                "reserved": "[parameters('reserved')]",
                "targetWorkerCount": "[parameters('targetWorkerCount')]",
                "targetWorkerSizeId": "[parameters('targetWorkerSize')]",
                "zoneRedundant": "[parameters('zoneRedundant')]"
              }
            },
            "appServicePlan_diagnosticSettings": {
              "copy": {
                "name": "appServicePlan_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "appServicePlan"
              ]
            },
            "appServicePlan_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "appServicePlan"
              ]
            },
            "appServicePlan_roleAssignments": {
              "copy": {
                "name": "appServicePlan_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/serverfarms', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "appServicePlan"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the app service plan was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the app service plan."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the app service plan."
              },
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('appServicePlan', '2024-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "logAnalyticsWorkspace",
        "rg"
      ]
    },
    "webAppFoundryVtt": {
      "condition": "[equals(parameters('computeService'), 'Web App')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "web-app-foundry-vtt-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "app,linux,container"
          },
          "name": {
            "value": "[variables('webAppFoundryVttName')]"
          },
          "configs": {
            "value": [
              {
                "name": "azurestorageaccounts",
                "properties": {
                  "foundrydata": {
                    "accessKey": "@AppSettingRef(STORAGE_ACCOUNT_KEY)",
                    "accountName": "[variables('storageAccountName')]",
                    "protocol": "Smb",
                    "mountPath": "/data",
                    "shareName": "foundryvttdata",
                    "type": "AzureFiles"
                  }
                }
              }
            ]
          },
          "managedIdentities": {
            "value": {
              "systemAssigned": true
            }
          },
          "serverFarmResourceId": {
            "value": "[reference('appServicePlan').outputs.resourceId.value]"
          },
          "siteConfig": {
            "value": {
              "alwaysOn": true,
              "appSettings": [
                {
                  "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                  "value": ""
                },
                {
                  "name": "DOCKER_REGISTRY_SERVER_URL",
                  "value": "https://index.docker.io/v1"
                },
                {
                  "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                  "value": ""
                },
                {
                  "name": "FOUNDRY_USERNAME",
                  "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('foundryUsernameSecretName'))]"
                },
                {
                  "name": "FOUNDRY_PASSWORD",
                  "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('foundryPasswordSecretName'))]"
                },
                {
                  "name": "FOUNDRY_ADMIN_KEY",
                  "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('foundryAdminKeySecretName'))]"
                },
                {
                  "name": "FOUNDRY_MINIFY_STATIC_FILES",
                  "value": "true"
                },
                {
                  "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                  "value": "1800"
                },
                {
                  "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                  "value": "false"
                },
                {
                  "name": "WEBSITES_PORT",
                  "value": "30000"
                },
                {
                  "name": "STORAGE_ACCOUNT_KEY",
                  "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('storageAccountKeySecretName'))]"
                }
              ],
              "vnetRouteAllEnabled": "[variables('effectiveDeployNetworking')]",
              "detailedErrorLoggingEnabled": true,
              "ftpsState": "FtpsOnly",
              "httpLoggingEnabled": true,
              "logsDirectorySizeLimit": 35,
              "linuxFxVersion": "[format('DOCKER|{0}:{1}', variables('foundryVttDockerImageName'), parameters('foundryVttDockerImageTag'))]",
              "minTlsVersion": "1.2",
              "numberOfWorkers": 1
            }
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkSubnetResourceId": "[if(variables('effectiveDeployNetworking'), createObject('value', reference('virtualNetwork').outputs.subnetResourceIds.value[3]), createObject('value', null()))]",
          "diagnosticSettings": "[if(parameters('deployDiagnostics'), createObject('value', createArray(createObject('name', variables('sendToLogAnalyticsName'), 'workspaceResourceId', reference('logAnalyticsWorkspace').outputs.resourceId.value, 'logCategoriesAndGroups', createArray(createObject('category', 'AppServiceHTTPLogs'), createObject('category', 'AppServiceConsoleLogs'), createObject('category', 'AppServiceAppLogs'), createObject('category', 'AppServiceAuditLogs'), createObject('category', 'AppServiceIPSecAuditLogs'), createObject('category', 'AppServicePlatformLogs')), 'metricCategories', createArray()))), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9130777854443383909"
            },
            "name": "Web/Function Apps",
            "description": "This module deploys a Web or Function App."
          },
          "definitions": {
            "privateEndpointOutputType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the private endpoint."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the private endpoint."
                  }
                },
                "groupId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The group Id for the private endpoint Group."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fqdn": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "FQDN that resolves to private endpoint IP address."
                        }
                      },
                      "ipAddresses": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of private IP addresses of the private endpoint."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "The custom DNS configurations of the private endpoint."
                  }
                },
                "networkInterfaceResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "The IDs of the network interfaces associated with the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "configType": {
              "type": "object",
              "discriminator": {
                "propertyName": "name",
                "mapping": {
                  "appsettings": {
                    "$ref": "#/definitions/appSettingsConfigType"
                  },
                  "authsettings": {
                    "$ref": "#/definitions/authSettingsConfigType"
                  },
                  "authsettingsV2": {
                    "$ref": "#/definitions/authSettingsV2ConfigType"
                  },
                  "azurestorageaccounts": {
                    "$ref": "#/definitions/azureStorageAccountConfigType"
                  },
                  "backup": {
                    "$ref": "#/definitions/backupConfigType"
                  },
                  "connectionstrings": {
                    "$ref": "#/definitions/connectionStringsConfigType"
                  },
                  "logs": {
                    "$ref": "#/definitions/logsConfigType"
                  },
                  "metadata": {
                    "$ref": "#/definitions/metadataConfigType"
                  },
                  "pushsettings": {
                    "$ref": "#/definitions/pushSettingsConfigType"
                  },
                  "slotConfigNames": {
                    "$ref": "#/definitions/slotConfigNamesConfigType"
                  },
                  "web": {
                    "$ref": "#/definitions/webConfigType"
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a site configuration."
              }
            },
            "slotConfigNamesConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "slotConfigNames"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "appSettingNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of application settings names."
                      }
                    },
                    "azureStorageConfigNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of external Azure storage account identifiers."
                      }
                    },
                    "connectionStringNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of connection string names."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a slotConfigNames configuration."
              }
            },
            "slotType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the slot."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Location for all Resources."
                  }
                },
                "serverFarmResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the app service plan to use for the slot."
                  }
                },
                "managedEnvironmentResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                  }
                },
                "httpsOnly": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                  }
                },
                "clientAffinityEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If client affinity is enabled."
                  }
                },
                "appServiceEnvironmentResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the app service environment to use for this resource."
                  }
                },
                "managedIdentities": {
                  "$ref": "#/definitions/managedIdentityAllType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The managed identity definition for this resource."
                  }
                },
                "keyVaultAccessIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                  }
                },
                "storageAccountRequired": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Checks if Customer provided storage account is required."
                  }
                },
                "virtualNetworkSubnetResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                  }
                },
                "siteConfig": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/siteConfig"
                    },
                    "description": "Optional. The site config object."
                  },
                  "nullable": true
                },
                "functionAppConfig": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/functionAppConfig"
                    },
                    "description": "Optional. The Function App config object."
                  },
                  "nullable": true
                },
                "configs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/configType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The web site config."
                  }
                },
                "extensions": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The extensions configuration."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The lock settings of the service."
                  }
                },
                "privateEndpoints": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/privateEndpointSingleServiceType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Configuration details for private endpoints."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags of the resource."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "diagnosticSettings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/diagnosticSettingFullType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The diagnostic settings of the service."
                  }
                },
                "clientCertEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                  }
                },
                "clientCertExclusionPaths": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                  }
                },
                "clientCertMode": {
                  "type": "string",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/clientCertMode"
                    },
                    "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
                  },
                  "nullable": true
                },
                "cloningInfo": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/cloningInfo"
                    },
                    "description": "Optional. If specified during app creation, the app is cloned from a source app."
                  },
                  "nullable": true
                },
                "containerSize": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Size of the function container."
                  }
                },
                "customDomainVerificationId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                  }
                },
                "dailyMemoryTimeQuota": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                  }
                },
                "hostNameSslStates": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/hostNameSslStates"
                    },
                    "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                  },
                  "nullable": true
                },
                "hyperV": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Hyper-V sandbox."
                  }
                },
                "publicNetworkAccess": {
                  "type": "string",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/publicNetworkAccess"
                    },
                    "description": "Optional. Allow or block all public traffic."
                  },
                  "nullable": true
                },
                "redundancyMode": {
                  "type": "string",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/redundancyMode"
                    },
                    "description": "Optional. Site redundancy mode."
                  },
                  "nullable": true
                },
                "basicPublishingCredentialsPolicies": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The site publishing credential policy names which are associated with the site slot."
                  }
                },
                "vnetContentShareEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. To enable accessing content over virtual network."
                  }
                },
                "vnetImagePullEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. To enable pulling image over Virtual Network."
                  }
                },
                "vnetRouteAllEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                  }
                },
                "hybridConnectionRelays": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/hybridConnectionRelayType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Names of hybrid connection relays to connect app with."
                  }
                },
                "dnsConfiguration": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/dnsConfiguration"
                    },
                    "description": "Optional. Property to configure various DNS related settings for a site."
                  },
                  "nullable": true
                },
                "autoGeneratedDomainNameLabelScope": {
                  "type": "string",
                  "allowedValues": [
                    "NoReuse",
                    "ResourceGroupReuse",
                    "SubscriptionReuse",
                    "TenantReuse"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a slot."
              }
            },
            "extensionType": {
              "type": "object",
              "properties": {
                "properties": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                    },
                    "description": "Optional. Sets the properties."
                  },
                  "nullable": true
                }
              }
            },
            "basicPublishingCredentialsPolicyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "ftp",
                    "scm"
                  ],
                  "metadata": {
                    "description": "Required. The name of the resource."
                  }
                },
                "allow": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set to true to enable or false to disable a publishing method."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Location for all Resources."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a basic publishing credential policy."
              }
            },
            "hybridConnectionRelayType": {
              "type": "object",
              "properties": {
                "hybridConnectionResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the relay namespace hybrid connection."
                  }
                },
                "sendKeyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the authorization rule send key to use."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a hybrid connection relay."
              }
            },
            "_1.lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.privateEndpointCustomDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.privateEndpointIpConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.privateEndpointPrivateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the private DNS Zone Group config."
                        }
                      },
                      "privateDnsZoneResourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of the private DNS zone."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_2.scmIpSecurityRestrictionType": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "allowedValues": [
                    "Allow",
                    "Deny"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Allow or Deny access for this IP range."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP restriction rule description."
                  }
                },
                "headers": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "metadata": {
                      "description": "Required. A header."
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP restriction rule headers.\nX-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), all hosts(or lack of) are allowed.\n- A value is compared using ordinal-ignore-case (excluding port number).\n- Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com\nbut not the root domain contoso.com or multi-level foo.bar.contoso.com\n- Unicode host names are allowed but are converted to Punycode for matching.\n\nX-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.\n- If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.\n\nX-Azure-FDID and X-FD-HealthProbe.\nThe matching logic is exact match."
                  }
                },
                "ipAddress": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask (leading bit match). For CIDR, SubnetMask property must not be specified."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP restriction rule name."
                  }
                },
                "priority": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Priority of IP restriction rule."
                  }
                },
                "subnetMask": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Subnet mask for the range of IP addresses the restriction is valid for."
                  }
                },
                "subnetTrafficTag": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. (internal) Subnet traffic tag."
                  }
                },
                "tag": {
                  "type": "string",
                  "allowedValues": [
                    "Default",
                    "ServiceTag",
                    "XffProxy"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Defines what this IP filter will be used for. This is to support IP filtering on proxies."
                  }
                },
                "vnetSubnetResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Virtual network resource id."
                  }
                },
                "vnetTrafficTag": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. (internal) Vnet traffic tag."
                  }
                }
              },
              "metadata": {
                "description": "The type of a IP security restriction.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "_2.slowRequestBasedTriggerType": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Request Count."
                  }
                },
                "path": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Request Path."
                  }
                },
                "timeInterval": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Time interval."
                  }
                },
                "timeTaken": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Time taken."
                  }
                }
              },
              "metadata": {
                "description": "The type of aslow request based trigger.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "appSettingsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "appsettings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "storageAccountUseIdentityAuthentication": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                  }
                },
                "applicationInsightResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the application insight to leverage for this resource."
                  }
                },
                "retainCurrentAppSettings": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The retain the current app settings. Defaults to true."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. An app settings key-value pair."
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                  }
                }
              },
              "metadata": {
                "description": "The type of an app settings configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "authSettingsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "authsettings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "aadClaimsAuthorization": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets a JSON string containing the Azure AD Acl settings."
                      }
                    },
                    "additionalLoginParams": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                      }
                    },
                    "allowedAudiences": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Allowed audience values to consider when validating JSON Web Tokens issued by Azure Active Directory. Note that the `ClientID` value is always considered an allowed audience, regardless of this setting."
                      }
                    },
                    "allowedExternalRedirectUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                      }
                    },
                    "authFilePath": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The path of the config file containing auth settings. If the path is relative, base will the site's root directory."
                      }
                    },
                    "clientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                      }
                    },
                    "clientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key). This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users. Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                      }
                    },
                    "clientSecretCertificateThumbprint": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                      }
                    },
                    "clientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the client secret of the relying party application."
                      }
                    },
                    "configVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The ConfigVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of the control plane for Authentication / Authorization."
                      }
                    },
                    "defaultProvider": {
                      "type": "string",
                      "allowedValues": [
                        "AzureActiveDirectory",
                        "Facebook",
                        "Github",
                        "Google",
                        "MicrosoftAccount",
                        "Twitter"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                      }
                    },
                    "facebookAppId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The App ID of the Facebook app used for login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                      }
                    },
                    "facebookAppSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The App Secret of the Facebook app used for Facebook Login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                      }
                    },
                    "facebookAppSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the app secret used for Facebook Login."
                      }
                    },
                    "facebookOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. This setting is optional. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                      }
                    },
                    "gitHubClientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client Id of the GitHub app used for login. This setting is required for enabling Github login."
                      }
                    },
                    "gitHubClientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client Secret of the GitHub app used for Github Login. This setting is required for enabling Github login."
                      }
                    },
                    "gitHubClientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the client secret of the Github app used for GitHub Login."
                      }
                    },
                    "gitHubOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication."
                      }
                    },
                    "googleClientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OpenID Connect Client ID for the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                      }
                    },
                    "googleClientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The client secret associated with the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                      }
                    },
                    "googleClientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the client secret associated with the Google web application."
                      }
                    },
                    "googleOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                      }
                    },
                    "isAuthFromFile": {
                      "type": "string",
                      "allowedValues": [
                        "false",
                        "true"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. \"true\" if the auth config settings should be read from a file, \"false\" otherwise."
                      }
                    },
                    "issuer": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                      }
                    },
                    "microsoftAccountClientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 client ID that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                      }
                    },
                    "microsoftAccountClientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 client secret that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                      }
                    },
                    "microsoftAccountClientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication."
                      }
                    },
                    "microsoftAccountOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. This setting is optional. If not specified, \"wl.basic\" is used as the default scope. Microsoft Account Scopes and permissions [documentation](https://msdn.microsoft.com/en-us/library/dn631845.aspx)."
                      }
                    },
                    "runtimeVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                      }
                    },
                    "tokenRefreshExtensionHours": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                      }
                    },
                    "tokenStoreEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows. The default is `false`."
                      }
                    },
                    "twitterConsumerKey": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                      }
                    },
                    "twitterConsumerSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 1.0a consumer secret of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                      }
                    },
                    "twitterConsumerSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                      }
                    },
                    "unauthenticatedClientAction": {
                      "type": "string",
                      "allowedValues": [
                        "AllowAnonymous",
                        "RedirectToLoginPage"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                      }
                    },
                    "validateIssuer": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of an auth settings configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "authSettingsV2ConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "authsettingsV2"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "globalValidation": {
                      "type": "object",
                      "properties": {
                        "excludedPaths": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The paths for which unauthenticated flow would not be redirected to the login page."
                          }
                        },
                        "redirectToProvider": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                          }
                        },
                        "requireAuthentication": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the authentication flow is required by every request."
                          }
                        },
                        "unauthenticatedClientAction": {
                          "type": "string",
                          "allowedValues": [
                            "AllowAnonymous",
                            "RedirectToLoginPage",
                            "Return401",
                            "Return403"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings that determines the validation flow of users using App Service Authentication/Authorization."
                      }
                    },
                    "httpSettings": {
                      "type": "object",
                      "properties": {
                        "forwardProxy": {
                          "type": "object",
                          "properties": {
                            "convention": {
                              "type": "string",
                              "allowedValues": [
                                "Custom",
                                "NoProxy",
                                "Standard"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The convention used to determine the url of the request made."
                              }
                            },
                            "customHostHeaderName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the header containing the host of the request."
                              }
                            },
                            "customProtoHeaderName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the header containing the scheme of the request."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of a forward proxy used to make the requests."
                          }
                        },
                        "requireHttps": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `false` if the authentication/authorization responses not having the HTTPS scheme are permissible."
                          }
                        },
                        "routes": {
                          "type": "object",
                          "properties": {
                            "apiPrefix": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The prefix that should precede all the authentication/authorization paths."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the paths HTTP requests."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization."
                      }
                    },
                    "identityProviders": {
                      "type": "object",
                      "properties": {
                        "apple": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Apple provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Apple registration."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Apple provider."
                          }
                        },
                        "azureActiveDirectory": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Azure Active Directory provider should not be enabled despite the set registration."
                              }
                            },
                            "isAutoProvisioned": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling. This is an internal flag primarily intended to support the Azure Management Portal. Users should not read or write to this property."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "disableWWWAuthenticate": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `true` if the www-authenticate provider should be omitted from the request."
                                  }
                                },
                                "loginParameters": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                  }
                                },
                                "clientSecretCertificateIssuer": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                  }
                                },
                                "clientSecretCertificateSubjectAlternativeName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                  }
                                },
                                "clientSecretCertificateThumbprint": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The app setting name that contains the client secret of the relying party application."
                                  }
                                },
                                "openIdIssuer": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory app registration."
                              }
                            },
                            "validation": {
                              "type": "object",
                              "properties": {
                                "allowedAudiences": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The list of audiences that can make successful authentication/authorization requests."
                                  }
                                },
                                "defaultAuthorizationPolicy": {
                                  "type": "object",
                                  "properties": {
                                    "allowedApplications": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory allowed applications."
                                      }
                                    },
                                    "allowedPrincipals": {
                                      "type": "object",
                                      "properties": {
                                        "groups": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of the allowed groups."
                                          }
                                        },
                                        "identities": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of the allowed identities."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory allowed principals."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the default authorization policy."
                                  }
                                },
                                "jwtClaimChecks": {
                                  "type": "object",
                                  "properties": {
                                    "allowedClientApplications": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of the allowed client applications."
                                      }
                                    },
                                    "allowedGroups": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of the allowed groups."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the checks that should be made while validating the JWT Claims."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Azure Active directory provider."
                          }
                        },
                        "azureStaticWebApps": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Azure Static Web Apps provider should not be enabled despite the set registration."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Static Web Apps registration."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Azure Static Web Apps provider."
                          }
                        },
                        "customOpenIdConnectProviders": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Set to `false` if the custom Open ID provider provider should not be enabled."
                                }
                              },
                              "login": {
                                "type": "object",
                                "properties": {
                                  "nameClaimType": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the claim that contains the users name."
                                    }
                                  },
                                  "scopes": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of the scopes that should be requested while authenticating."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The configuration settings of the login flow of the custom Open ID Connect provider."
                                }
                              },
                              "registration": {
                                "type": "object",
                                "properties": {
                                  "clientCredential": {
                                    "type": "object",
                                    "properties": {
                                      "clientSecretSettingName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The app setting that contains the client secret for the custom Open ID Connect provider."
                                        }
                                      },
                                      "method": {
                                        "type": "string",
                                        "allowedValues": [
                                          "ClientSecretPost"
                                        ],
                                        "metadata": {
                                          "description": "Required. The method that should be used to authenticate the user."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The authentication credentials of the custom Open ID Connect provider."
                                    }
                                  },
                                  "clientId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The client id of the custom Open ID Connect provider."
                                    }
                                  },
                                  "openIdConnectConfiguration": {
                                    "type": "object",
                                    "properties": {
                                      "authorizationEndpoint": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint to be used to make an authorization request."
                                        }
                                      },
                                      "certificationUri": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint that provides the keys necessary to validate the token."
                                        }
                                      },
                                      "issuer": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint that issues the token."
                                        }
                                      },
                                      "tokenEndpoint": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint to be used to request a token."
                                        }
                                      },
                                      "wellKnownOpenIdConfiguration": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint that contains all the configuration endpoints for the provider."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The configuration settings of the endpoints used for the custom Open ID Connect provider."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The configuration settings of the app registration for the custom Open ID Connect provider."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The alias of each custom Open ID Connect provider."
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The map of the name of the alias of each custom Open ID Connect provider to the configuration settings of the custom Open ID Connect provider."
                          }
                        },
                        "facebook": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Facebook provider should not be enabled despite the set registration."
                              }
                            },
                            "graphApiVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The version of the Facebook api to be used while logging in."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "appId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The App ID of the app used for login."
                                  }
                                },
                                "appSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the app secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the Facebook provider."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Facebook provider."
                          }
                        },
                        "gitHub": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the GitHub provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the GitHub provider."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the GitHub provider."
                          }
                        },
                        "google": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Google provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the Google provider."
                              }
                            },
                            "validation": {
                              "type": "object",
                              "properties": {
                                "allowedAudiences": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Google provider."
                          }
                        },
                        "legacyMicrosoftAccount": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the legacy Microsoft Account provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the legacy Microsoft Account provider."
                              }
                            },
                            "validation": {
                              "type": "object",
                              "properties": {
                                "allowedAudiences": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the legacy Microsoft Account provider token validation flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the legacy Microsoft Account provider."
                          }
                        },
                        "twitter": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Twitter provider should not be enabled despite the set registration."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "consumerKey": {
                                  "type": "securestring",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                  }
                                },
                                "consumerSecretSettingName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the Twitter provider."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Twitter provider."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization."
                      }
                    },
                    "login": {
                      "type": "object",
                      "properties": {
                        "allowedExternalRedirectUrls": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                          }
                        },
                        "cookieExpiration": {
                          "type": "object",
                          "properties": {
                            "convention": {
                              "type": "string",
                              "allowedValues": [
                                "FixedTime",
                                "IdentityProviderDerived"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The convention used when determining the session cookie's expiration."
                              }
                            },
                            "timeToExpiration": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The time after the request is made when the session cookie should expire."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the session cookie's expiration."
                          }
                        },
                        "nonce": {
                          "type": "object",
                          "properties": {
                            "nonceExpirationInterval": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The time after the request is made when the nonce should expire."
                              }
                            },
                            "validateNonce": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the nonce should not be validated while completing the login flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the nonce used in the login flow."
                          }
                        },
                        "preserveUrlFragmentsForLogins": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the fragments from the request are preserved after the login request is made."
                          }
                        },
                        "routes": {
                          "type": "object",
                          "properties": {
                            "logoutEndpoint": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The endpoint at which a logout request should be made."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The routes that specify the endpoints used for login and logout requests."
                          }
                        },
                        "tokenStore": {
                          "type": "object",
                          "properties": {
                            "azureBlobStorage": {
                              "type": "object",
                              "properties": {
                                "sasUrlSettingName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the app setting containing the SAS URL of the blob storage containing the tokens."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the storage of the tokens if blob storage is used."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows."
                              }
                            },
                            "fileSystem": {
                              "type": "object",
                              "properties": {
                                "directory": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The directory in which the tokens will be stored."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the storage of the tokens if a file system is used."
                              }
                            },
                            "tokenRefreshExtensionHours": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the token store."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the login flow of users using App Service Authentication/Authorization."
                      }
                    },
                    "platform": {
                      "type": "object",
                      "properties": {
                        "configFilePath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The path of the config file containing auth settings if they come from a file. If the path is relative, base will the site's root directory."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                          }
                        },
                        "runtimeVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the platform of App Service Authentication/Authorization."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of an authSettingsV2 configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "azureStorageAccountConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "azurestorageaccounts"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "accessKey": {
                        "type": "securestring",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Access key for the storage account."
                        }
                      },
                      "accountName": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of the storage account."
                        }
                      },
                      "mountPath": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Path to mount the storage within the site's runtime environment."
                        }
                      },
                      "protocol": {
                        "type": "string",
                        "allowedValues": [
                          "Http",
                          "Nfs",
                          "Smb"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Mounting protocol to use for the storage account."
                        }
                      },
                      "shareName": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of the file share (container name, for Blob storage)."
                        }
                      },
                      "type": {
                        "type": "string",
                        "allowedValues": [
                          "AzureBlob",
                          "AzureFiles"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Type of storage."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Azure Storage Info configuration."
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of an Azure Storage Account configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "backupConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "backup"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "backupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Name of the backup."
                      }
                    },
                    "backupSchedule": {
                      "type": "object",
                      "properties": {
                        "frequencyInterval": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)."
                          }
                        },
                        "frequencyUnit": {
                          "type": "string",
                          "allowedValues": [
                            "Day",
                            "Hour"
                          ],
                          "metadata": {
                            "description": "Required. The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)."
                          }
                        },
                        "keepAtLeastOneBackup": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Set to `True` if the retention policy should always keep at least one backup in the storage account, regardless how old it is."
                          }
                        },
                        "retentionPeriodInDays": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. After how many days backups should be deleted."
                          }
                        },
                        "startTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. When the schedule should start working."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Schedule for the backup if it is executed periodically."
                      }
                    },
                    "databases": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connectionString": {
                            "type": "securestring",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one."
                            }
                          },
                          "connectionStringName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options."
                            }
                          },
                          "databaseType": {
                            "type": "string",
                            "allowedValues": [
                              "LocalMySql",
                              "MySql",
                              "PostgreSql",
                              "SqlAzure"
                            ],
                            "metadata": {
                              "description": "Required. Database type (e.g. SqlAzure / MySql)."
                            }
                          },
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the setting."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Databases included in the backup."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `True` if the backup schedule is enabled (must be included in that case), `false` if the backup schedule should be disabled."
                      }
                    },
                    "storageAccountUrl": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. SAS URL to the container."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type for a backup configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "connectionStringsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "connectionstrings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "allowedValues": [
                          "ApiHub",
                          "Custom",
                          "DocDb",
                          "EventHub",
                          "MySql",
                          "NotificationHub",
                          "PostgreSQL",
                          "RedisCache",
                          "SQLAzure",
                          "SQLServer",
                          "ServiceBus"
                        ],
                        "metadata": {
                          "description": "Required. Type of database."
                        }
                      },
                      "value": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Value of pair."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the connection string setting."
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type for a connection string configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "logsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "logs"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "applicationLogs": {
                      "type": "object",
                      "properties": {
                        "azureBlobStorage": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "allowedValues": [
                                "Error",
                                "Information",
                                "Off",
                                "Verbose",
                                "Warning"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Log level."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                              }
                            },
                            "sasUrl": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application logs to blob storage configuration."
                          }
                        },
                        "azureTableStorage": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "allowedValues": [
                                "Error",
                                "Information",
                                "Off",
                                "Verbose",
                                "Warning"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Log level."
                              }
                            },
                            "sasUrl": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. SAS URL to an Azure table with add/query/delete permissions."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application logs to azure table storage configuration."
                          }
                        },
                        "fileSystem": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "allowedValues": [
                                "Error",
                                "Information",
                                "Off",
                                "Verbose",
                                "Warning"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Log level."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application logs to file system configuration."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application Logs for Azure configuration."
                      }
                    },
                    "detailedErrorMessages": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Detailed error messages configuration."
                      }
                    },
                    "failedRequestsTracing": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Failed requests tracing configuration."
                      }
                    },
                    "httpLogs": {
                      "type": "object",
                      "properties": {
                        "azureBlobStorage": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                              }
                            },
                            "sasUrl": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Http logs to azure blob storage configuration."
                          }
                        },
                        "fileSystem": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Retention in days. Remove files older than X days. 0 or lower means no retention."
                              }
                            },
                            "retentionInMb": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 25,
                              "maxValue": 100,
                              "metadata": {
                                "description": "Optional. Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Http logs to file system configuration."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. HTTP logs configuration."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of a logs configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "metadataConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "metadata"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The metadata key value pair."
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of a metadata configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "privateEndpointSingleServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private Endpoint."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The location to deploy the Private Endpoint to."
                  }
                },
                "privateLinkServiceConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private link connection to create."
                  }
                },
                "service": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                  }
                },
                "resourceGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                  }
                },
                "privateDnsZoneGroup": {
                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                  }
                },
                "isManualConnection": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If Manual Private Link Connection is required."
                  }
                },
                "manualConnectionRequestMessage": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 140,
                  "metadata": {
                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Custom DNS configurations."
                  }
                },
                "ipConfigurations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                  }
                },
                "applicationSecurityGroupResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                  }
                },
                "customNetworkInterfaceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/_1.lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateEndpoints@2024-07-01#properties/tags"
                    },
                    "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable/Disable usage telemetry for module."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "pushSettingsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "pushsettings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "dynamicTagsJson": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                      }
                    },
                    "isPushEnabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                      }
                    },
                    "tagsRequiringAuth": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                      }
                    },
                    "tagWhitelistJson": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of a pushSettings configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "webConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "web"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "acrUseManagedIdentityCreds": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Flag to use Managed Identity Creds for ACR pull."
                      }
                    },
                    "acrUserManagedIdentityID": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If using user managed identity, the user managed identity ClientId."
                      }
                    },
                    "alwaysOn": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if 'Always On' is enabled."
                      }
                    },
                    "apiDefinition": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The URL of the API definition."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Information about the formal API definition for the app."
                      }
                    },
                    "apiManagementConfig": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. APIM-Api Identifier."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure API management settings linked to the app."
                      }
                    },
                    "appCommandLine": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. App command line to launch."
                      }
                    },
                    "appSettings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Name of the pair."
                            }
                          },
                          "value": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Value of the pair."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application settings."
                      }
                    },
                    "autoHealEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if Auto Heal is enabled."
                      }
                    },
                    "autoHealRules": {
                      "type": "object",
                      "properties": {
                        "actions": {
                          "type": "object",
                          "properties": {
                            "actionType": {
                              "type": "string",
                              "allowedValues": [
                                "CustomAction",
                                "LogEvent",
                                "Recycle"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Predefined action to be taken."
                              }
                            },
                            "customAction": {
                              "type": "object",
                              "properties": {
                                "exe": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Executable to be run."
                                  }
                                },
                                "parameters": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Parameters for the executable."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom action to be taken."
                              }
                            },
                            "minProcessExecutionTime": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Minimum time the process must execute before taking the action."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Actions to be executed when a rule is triggered."
                          }
                        },
                        "triggers": {
                          "type": "object",
                          "properties": {
                            "privateBytesInKB": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on private bytes."
                              }
                            },
                            "requests": {
                              "type": "object",
                              "properties": {
                                "count": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Request Count."
                                  }
                                },
                                "timeInterval": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Time interval."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on total requests."
                              }
                            },
                            "slowRequests": {
                              "$ref": "#/definitions/_2.slowRequestBasedTriggerType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on request execution time."
                              }
                            },
                            "slowRequestsWithPath": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/_2.slowRequestBasedTriggerType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on multiple Slow Requests Rule with path."
                              }
                            },
                            "statusCodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "count": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Count."
                                    }
                                  },
                                  "path": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Path."
                                    }
                                  },
                                  "status": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. HTTP status code."
                                    }
                                  },
                                  "subStatus": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Sub Status."
                                    }
                                  },
                                  "timeInterval": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Time interval."
                                    }
                                  },
                                  "win32Status": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Win32 error code."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on status codes."
                              }
                            },
                            "statusCodesRange": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "count": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Count."
                                    }
                                  },
                                  "path": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Path."
                                    }
                                  },
                                  "statusCodes": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. HTTP status code."
                                    }
                                  },
                                  "timeInterval": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Time interval."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on status codes ranges."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Conditions that describe when to execute the auto-heal actions."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Auto Heal rules."
                      }
                    },
                    "autoSwapSlotName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Auto-swap slot name."
                      }
                    },
                    "azureStorageAccounts": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "accessKey": {
                            "type": "securestring",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Access key for the storage account."
                            }
                          },
                          "accountName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the storage account."
                            }
                          },
                          "mountPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Path to mount the storage within the site's runtime environment."
                            }
                          },
                          "protocol": {
                            "type": "string",
                            "allowedValues": [
                              "Http",
                              "Nfs",
                              "Smb"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Mounting protocol to use for the storage account."
                            }
                          },
                          "shareName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the file share (container name, for Blob storage)."
                            }
                          },
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "AzureBlob",
                              "AzureFiles"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Type of storage."
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. A storage account configuration."
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of Azure Storage Accounts."
                      }
                    },
                    "connectionStrings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connectionString": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Connection string value."
                            }
                          },
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of connection string."
                            }
                          },
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "ApiHub",
                              "Custom",
                              "DocDb",
                              "EventHub",
                              "MySql",
                              "NotificationHub",
                              "PostgreSQL",
                              "RedisCache",
                              "SQLAzure",
                              "SQLServer",
                              "ServiceBus"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Type of database."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Connection strings."
                      }
                    },
                    "cors": {
                      "type": "object",
                      "properties": {
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use \"*\" to allow all."
                          }
                        },
                        "supportCredentials": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Gets or sets whether CORS requests with credentials are allowed. See [ref](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials) for more details."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Cross-Origin Resource Sharing (CORS) settings."
                      }
                    },
                    "defaultDocuments": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Default documents."
                      }
                    },
                    "detailedErrorLoggingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if detailed error logging is enabled."
                      }
                    },
                    "documentRoot": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Document root."
                      }
                    },
                    "elasticWebAppScaleLimit": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to apps in plans where ElasticScaleEnabled is `true`."
                      }
                    },
                    "experiments": {
                      "type": "object",
                      "properties": {
                        "rampUpRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "actionHostName": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net."
                                }
                              },
                              "changeDecisionCallbackUrl": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified."
                                }
                              },
                              "changeIntervalInMinutes": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Specifies interval in minutes to reevaluate ReroutePercentage."
                                }
                              },
                              "changeStep": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. In auto ramp up scenario this is the step to add/remove from `ReroutePercentage` until it reaches `MinReroutePercentage` or `MaxReroutePercentage`. Site metrics are checked every N minutes specified in `ChangeIntervalInMinutes`. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in `ChangeDecisionCallbackUrl`."
                                }
                              },
                              "maxReroutePercentage": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Specifies upper boundary below which ReroutePercentage will stay."
                                }
                              },
                              "minReroutePercentage": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Specifies lower boundary above which ReroutePercentage will stay."
                                }
                              },
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                }
                              },
                              "reroutePercentage": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Percentage of the traffic which will be redirected to `ActionHostName`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of ramp-up rules."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. This is work around for polymorphic types."
                      }
                    },
                    "ftpsState": {
                      "type": "string",
                      "allowedValues": [
                        "AllAllowed",
                        "Disabled",
                        "FtpsOnly"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. State of FTP / FTPS service."
                      }
                    },
                    "functionAppScaleLimit": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to the Consumption and Elastic Premium Plans."
                      }
                    },
                    "functionsRuntimeScaleMonitoringEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled, the ScaleController will not monitor event sources directly, but will instead call to the runtime to get scale status."
                      }
                    },
                    "handlerMappings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "arguments": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Command-line arguments to be passed to the script processor."
                            }
                          },
                          "extension": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Requests with this extension will be handled using the specified FastCGI application."
                            }
                          },
                          "scriptProcessor": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The absolute path to the FastCGI application."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Handler mappings."
                      }
                    },
                    "healthCheckPath": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Health check path."
                      }
                    },
                    "http20Enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Allow clients to connect over http2.0."
                      }
                    },
                    "httpLoggingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if HTTP logging is enabled."
                      }
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/_2.scmIpSecurityRestrictionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IP security restrictions for main."
                      }
                    },
                    "ipSecurityRestrictionsDefaultAction": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Default action for main access restriction if no rules are matched."
                      }
                    },
                    "javaContainer": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Java container."
                      }
                    },
                    "javaContainerVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Java container version."
                      }
                    },
                    "javaVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Java version."
                      }
                    },
                    "keyVaultReferenceIdentity": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Identity to use for Key Vault Reference authentication."
                      }
                    },
                    "limits": {
                      "type": "object",
                      "properties": {
                        "maxDiskSizeInMb": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum allowed disk size usage in MB."
                          }
                        },
                        "maxMemoryInMb": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum allowed memory usage in MB."
                          }
                        },
                        "maxPercentageCpu": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum allowed CPU usage percentage."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Site limits."
                      }
                    },
                    "linuxFxVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Linux App Framework and version."
                      }
                    },
                    "loadBalancing": {
                      "type": "string",
                      "allowedValues": [
                        "LeastRequests",
                        "LeastRequestsWithTieBreaker",
                        "LeastResponseTime",
                        "PerSiteRoundRobin",
                        "RequestHash",
                        "WeightedRoundRobin",
                        "WeightedTotalTraffic"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Site load balancing."
                      }
                    },
                    "localMySqlEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to enable local MySQL."
                      }
                    },
                    "logsDirectorySizeLimit": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. HTTP logs directory size limit."
                      }
                    },
                    "managedPipelineMode": {
                      "type": "string",
                      "allowedValues": [
                        "Classic",
                        "Integrated"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Managed pipeline mode."
                      }
                    },
                    "managedServiceIdentityId": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Managed Service Identity Id."
                      }
                    },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Pair name."
                            }
                          },
                          "value": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Pair Value."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application metadata. This property cannot be retrieved, since it may contain secrets."
                      }
                    },
                    "minimumElasticInstanceCount": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "maxValue": 20,
                      "metadata": {
                        "description": "Optional. Number of minimum instance count for a site. This setting only applies to the Elastic Plans."
                      }
                    },
                    "minTlsCipherSuite": {
                      "type": "string",
                      "allowedValues": [
                        "TLS_AES_128_GCM_SHA256",
                        "TLS_AES_256_GCM_SHA384",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_RSA_WITH_AES_256_CBC_SHA256",
                        "TLS_RSA_WITH_AES_256_GCM_SHA384"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The minimum strength TLS cipher suite allowed for an application."
                      }
                    },
                    "minTlsVersion": {
                      "type": "string",
                      "allowedValues": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. MinTlsVersion: configures the minimum version of TLS required for SSL requests."
                      }
                    },
                    "netFrameworkVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. .NET Framework version."
                      }
                    },
                    "nodeVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of Node.js."
                      }
                    },
                    "numberOfWorkers": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Number of workers."
                      }
                    },
                    "phpVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of PHP."
                      }
                    },
                    "powerShellVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of PowerShell."
                      }
                    },
                    "preWarmedInstanceCount": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "maxValue": 10,
                      "metadata": {
                        "description": "Optional. Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Property to allow or block all public traffic."
                      }
                    },
                    "publishingUsername": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Publishing user name."
                      }
                    },
                    "push": {
                      "type": "object",
                      "properties": {
                        "kind": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Kind of resource."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "dynamicTagsJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                              }
                            },
                            "isPushEnabled": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                              }
                            },
                            "tagsRequiringAuth": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                              }
                            },
                            "tagWhitelistJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. PushSettings resource specific properties."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Push endpoint settings."
                      }
                    },
                    "pythonVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of Python."
                      }
                    },
                    "remoteDebuggingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if remote debugging is enabled."
                      }
                    },
                    "remoteDebuggingVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Remote debugging version."
                      }
                    },
                    "requestTracingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if request tracing is enabled."
                      }
                    },
                    "requestTracingExpirationTime": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Request tracing expiration time."
                      }
                    },
                    "scmIpSecurityRestrictions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/_2.scmIpSecurityRestrictionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IP security restrictions for scm."
                      }
                    },
                    "scmIpSecurityRestrictionsDefaultAction": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Default action for scm access restriction if no rules are matched."
                      }
                    },
                    "scmIpSecurityRestrictionsUseMain": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IP security restrictions for scm to use main."
                      }
                    },
                    "scmMinTlsVersion": {
                      "type": "string",
                      "allowedValues": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site."
                      }
                    },
                    "scmType": {
                      "type": "string",
                      "allowedValues": [
                        "BitbucketGit",
                        "BitbucketHg",
                        "CodePlexGit",
                        "CodePlexHg",
                        "Dropbox",
                        "ExternalGit",
                        "ExternalHg",
                        "GitHub",
                        "LocalGit",
                        "None",
                        "OneDrive",
                        "Tfs",
                        "VSO",
                        "VSTSRM"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. SCM type."
                      }
                    },
                    "tracingOptions": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tracing options."
                      }
                    },
                    "use32BitWorkerProcess": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to use 32-bit worker process."
                      }
                    },
                    "virtualApplications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "physicalPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Physical path."
                            }
                          },
                          "preloadEnabled": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Set to `true` if preloading is enabled."
                            }
                          },
                          "virtualDirectories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "physicalPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Physical path."
                                  }
                                },
                                "virtualPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Path to virtual application."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Virtual directories for virtual application."
                            }
                          },
                          "virtualPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Virtual path."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual applications."
                      }
                    },
                    "vnetName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual Network name."
                      }
                    },
                    "vnetPrivatePortsCount": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The number of private ports assigned to this app. These will be assigned dynamically on runtime."
                      }
                    },
                    "vnetRouteAllEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                      }
                    },
                    "websiteTimeZone": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see [ref](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones."
                      }
                    },
                    "webSocketsEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if WebSocket is enabled."
                      }
                    },
                    "windowsFxVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Xenon App Framework and version."
                      }
                    },
                    "xManagedServiceIdentityId": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Explicit Managed Service Identity Id."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of a web configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "functionapp,linux",
                "functionapp,workflowapp",
                "functionapp,workflowapp,linux",
                "functionapp,linux,container",
                "functionapp,linux,container,azurecontainerapps",
                "app,linux",
                "app",
                "linux,api",
                "api",
                "app,linux,container",
                "app,container,windows"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "serverFarmResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the app service plan to use for the site. Set as empty string when using a managed environment id for container apps."
              }
            },
            "managedEnvironmentResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "clientAffinityProxyEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. To enable client affinity; false to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is true."
              }
            },
            "clientAffinityPartitioningEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. To enable client affinity partitioning using CHIPS cookies, this will add the partitioned property to the affinity cookies; false to stop sending partitioned affinity cookies. Default is false."
              }
            },
            "appServiceEnvironmentResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "keyVaultAccessIdentityResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
              }
            },
            "storageAccountRequired": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Checks if Customer provided storage account is required."
              }
            },
            "virtualNetworkSubnetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
              }
            },
            "scmSiteAlsoStopped": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Stop SCM (KUDU) site when the app is stopped."
              }
            },
            "siteConfig": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/siteConfig"
                },
                "description": "Optional. The site config object. The defaults are set to the following values: alwaysOn: true, minTlsVersion: '1.2', ftpsState: 'FtpsOnly'."
              },
              "defaultValue": {
                "alwaysOn": true,
                "minTlsVersion": "1.2",
                "ftpsState": "FtpsOnly"
              }
            },
            "outboundVnetRouting": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-11-01#properties/properties/properties/outboundVnetRouting"
                },
                "description": "Optional. The outbound VNET routing configuration for the site."
              },
              "nullable": true
            },
            "configs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/configType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The web site config."
              }
            },
            "functionAppConfig": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/functionAppConfig"
                },
                "description": "Optional. The Function App configuration object."
              },
              "nullable": true
            },
            "extensions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/extensionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The extensions configuration."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointSingleServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "slots": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/slotType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration for deployment slots for an app."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-11-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "clientCertEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
              }
            },
            "clientCertExclusionPaths": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Client certificate authentication comma-separated exclusion paths."
              }
            },
            "clientCertMode": {
              "type": "string",
              "defaultValue": "Optional",
              "allowedValues": [
                "Optional",
                "OptionalInteractiveUser",
                "Required"
              ],
              "metadata": {
                "description": "Optional. This composes with ClientCertEnabled setting.\n- ClientCertEnabled=false means ClientCert is ignored.\n- ClientCertEnabled=true and ClientCertMode=Required means ClientCert is required.\n- ClientCertEnabled=true and ClientCertMode=Optional means ClientCert is optional or accepted.\n"
              }
            },
            "cloningInfo": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/cloningInfo"
                },
                "description": "Optional. If specified during app creation, the app is cloned from a source app."
              },
              "nullable": true
            },
            "containerSize": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Size of the function container."
              }
            },
            "dailyMemoryTimeQuota": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Setting this value to false disables the app (takes the app offline)."
              }
            },
            "hostNameSslStates": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/hostNameSslStates"
                },
                "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
              },
              "nullable": true
            },
            "hyperV": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Hyper-V sandbox."
              }
            },
            "redundancyMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "ActiveActive",
                "Failover",
                "GeoRedundant",
                "Manual",
                "None"
              ],
              "metadata": {
                "description": "Optional. Site redundancy mode."
              }
            },
            "basicPublishingCredentialsPolicies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The site publishing credential policy names which are associated with the sites."
              }
            },
            "hybridConnectionRelays": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hybridConnectionRelayType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Names of hybrid connection relays to connect app with."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
              }
            },
            "e2eEncryptionEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. End to End Encryption Setting."
              }
            },
            "dnsConfiguration": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/dnsConfiguration"
                },
                "description": "Optional. Property to configure various DNS related settings for a site."
              },
              "nullable": true
            },
            "autoGeneratedDomainNameLabelScope": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "NoReuse",
                "ResourceGroupReuse",
                "SubscriptionReuse",
                "TenantReuse"
              ],
              "metadata": {
                "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "managedEnvironmentSupportedKinds": [
              "functionapp,linux,container,azurecontainerapps"
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.web-site.{0}.{1}', replace('0.19.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "app": {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentResourceId'))), parameters('managedEnvironmentResourceId'), null())]",
                "serverFarmId": "[if(and(contains(variables('managedEnvironmentSupportedKinds'), parameters('kind')), not(empty(parameters('managedEnvironmentResourceId')))), null(), parameters('serverFarmResourceId'))]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "clientAffinityProxyEnabled": "[parameters('clientAffinityProxyEnabled')]",
                "clientAffinityPartitioningEnabled": "[parameters('clientAffinityPartitioningEnabled')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                "storageAccountRequired": "[parameters('storageAccountRequired')]",
                "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetResourceId')]",
                "siteConfig": "[parameters('siteConfig')]",
                "functionAppConfig": "[parameters('functionAppConfig')]",
                "clientCertEnabled": "[parameters('clientCertEnabled')]",
                "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                "clientCertMode": "[parameters('clientCertMode')]",
                "cloningInfo": "[parameters('cloningInfo')]",
                "containerSize": "[parameters('containerSize')]",
                "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                "enabled": "[parameters('enabled')]",
                "hostNameSslStates": "[parameters('hostNameSslStates')]",
                "hyperV": "[parameters('hyperV')]",
                "redundancyMode": "[parameters('redundancyMode')]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', 'Enabled'))]",
                "scmSiteAlsoStopped": "[parameters('scmSiteAlsoStopped')]",
                "endToEndEncryptionEnabled": "[parameters('e2eEncryptionEnabled')]",
                "dnsConfiguration": "[parameters('dnsConfiguration')]",
                "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]",
                "outboundVnetRouting": "[parameters('outboundVnetRouting')]"
              }
            },
            "app_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_diagnosticSettings": {
              "copy": {
                "name": "app_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_roleAssignments": {
              "copy": {
                "name": "app_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_config": {
              "copy": {
                "name": "app_config",
                "count": "[length(coalesce(parameters('configs'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Site-Config-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('configs'), createArray())[copyIndex()].name]"
                  },
                  "applicationInsightResourceId": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'applicationInsightResourceId')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountResourceId')]"
                  },
                  "storageAccountUseIdentityAuthentication": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication')]"
                  },
                  "properties": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'properties')]"
                  },
                  "currentAppSettings": "[if(coalesce(tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'retainCurrentAppSettings'), and(true(), equals(coalesce(parameters('configs'), createArray())[copyIndex()].name, 'appsettings'))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites', parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]",
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1778837761091674342"
                    },
                    "name": "Site App Settings",
                    "description": "This module deploys a Site App Setting."
                  },
                  "parameters": {
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings",
                        "authsettings",
                        "authsettingsV2",
                        "azurestorageaccounts",
                        "backup",
                        "connectionstrings",
                        "logs",
                        "metadata",
                        "pushsettings",
                        "slotConfigNames",
                        "web"
                      ],
                      "metadata": {
                        "description": "Required. The name of the config."
                      }
                    },
                    "properties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The properties of the config. Note: This parameter is highly dependent on the config type, defined by its name."
                      }
                    },
                    "storageAccountUseIdentityAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "applicationInsightResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the application insight to leverage for this resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "currentAppSettings": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The key-values pairs of the current app settings."
                        }
                      },
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The current app settings."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.web-siteconfig.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "applicationInsights": {
                      "condition": "[not(empty(parameters('applicationInsightResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "subscriptionId": "[split(parameters('applicationInsightResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('applicationInsightResourceId'), '/')[4]]",
                      "name": "[last(split(parameters('applicationInsightResourceId'), '/'))]"
                    },
                    "storageAccount": {
                      "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2025-01-01",
                      "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                    },
                    "app": {
                      "existing": true,
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2023-12-01",
                      "name": "[parameters('appName')]"
                    },
                    "config": {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": "[union(parameters('currentAppSettings'), parameters('properties'), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(parameters('storageAccountResourceId'), '/')), listKeys('storageAccount', '2025-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), createObject('AzureWebJobsStorage__accountName', last(split(parameters('storageAccountResourceId'), '/')), 'AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob, 'AzureWebJobsStorage__queueServiceUri', reference('storageAccount').primaryEndpoints.queue, 'AzureWebJobsStorage__tableServiceUri', reference('storageAccount').primaryEndpoints.table), createObject())), if(not(empty(parameters('applicationInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString), createObject()))]",
                      "dependsOn": [
                        "applicationInsights",
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the site config."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_extensions": {
              "copy": {
                "name": "app_extensions",
                "count": "[length(coalesce(parameters('extensions'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Site-Extension-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "properties": {
                    "value": "[coalesce(parameters('extensions'), createArray())[copyIndex()].properties]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "12250922242596344591"
                    },
                    "name": "Site Deployment Extension ",
                    "description": "This module deploys a Site extension for MSDeploy."
                  },
                  "parameters": {
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent site resource."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "MSDeploy",
                      "allowedValues": [
                        "MSDeploy"
                      ],
                      "metadata": {
                        "description": "Optional. The name of the extension."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "MSDeploy",
                      "allowedValues": [
                        "MSDeploy"
                      ],
                      "metadata": {
                        "description": "Optional. The kind of extension."
                      }
                    },
                    "properties": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                        },
                        "description": "Optional. Sets the properties."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "app": {
                      "existing": true,
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2024-04-01",
                      "name": "[parameters('appName')]"
                    },
                    "msdeploy": {
                      "type": "Microsoft.Web/sites/extensions",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "kind": "[parameters('kind')]",
                      "properties": "[parameters('properties')]"
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the extension was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_slots": {
              "copy": {
                "name": "app_slots",
                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('slots'), createArray())[copyIndex()].name]"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kind": {
                    "value": "[parameters('kind')]"
                  },
                  "serverFarmResourceId": "[if(and(contains(variables('managedEnvironmentSupportedKinds'), parameters('kind')), not(empty(parameters('managedEnvironmentResourceId')))), createObject('value', null()), createObject('value', parameters('serverFarmResourceId')))]",
                  "managedEnvironmentResourceId": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedEnvironmentResourceId'), parameters('managedEnvironmentResourceId'))]"
                  },
                  "httpsOnly": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'httpsOnly'), parameters('httpsOnly'))]"
                  },
                  "appServiceEnvironmentResourceId": {
                    "value": "[parameters('appServiceEnvironmentResourceId')]"
                  },
                  "clientAffinityEnabled": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientAffinityEnabled'), parameters('clientAffinityEnabled'))]"
                  },
                  "managedIdentities": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedIdentities'), parameters('managedIdentities'))]"
                  },
                  "keyVaultAccessIdentityResourceId": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'keyVaultAccessIdentityResourceId'), parameters('keyVaultAccessIdentityResourceId'))]"
                  },
                  "storageAccountRequired": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountRequired'), parameters('storageAccountRequired'))]"
                  },
                  "virtualNetworkSubnetResourceId": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'virtualNetworkSubnetResourceId'), parameters('virtualNetworkSubnetResourceId'))]"
                  },
                  "siteConfig": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'siteConfig'), parameters('siteConfig'))]"
                  },
                  "functionAppConfig": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'functionAppConfig'), parameters('functionAppConfig'))]"
                  },
                  "configs": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'configs'), parameters('configs'))]"
                  },
                  "extensions": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'extensions'), parameters('extensions'))]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'diagnosticSettings')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "basicPublishingCredentialsPolicies": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'basicPublishingCredentialsPolicies'), parameters('basicPublishingCredentialsPolicies'))]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateEndpoints": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'), createArray())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "clientCertEnabled": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertEnabled')]"
                  },
                  "clientCertExclusionPaths": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertExclusionPaths')]"
                  },
                  "clientCertMode": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertMode')]"
                  },
                  "cloningInfo": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'cloningInfo')]"
                  },
                  "containerSize": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'containerSize')]"
                  },
                  "customDomainVerificationId": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'customDomainVerificationId')]"
                  },
                  "dailyMemoryTimeQuota": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dailyMemoryTimeQuota')]"
                  },
                  "enabled": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enabled')]"
                  },
                  "hostNameSslStates": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hostNameSslStates')]"
                  },
                  "hyperV": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hyperV')]"
                  },
                  "publicNetworkAccess": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'publicNetworkAccess'), if(or(not(empty(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'))), not(empty(parameters('privateEndpoints')))), 'Disabled', 'Enabled'))]"
                  },
                  "redundancyMode": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'redundancyMode')]"
                  },
                  "hybridConnectionRelays": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hybridConnectionRelays')]"
                  },
                  "dnsConfiguration": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dnsConfiguration')]"
                  },
                  "autoGeneratedDomainNameLabelScope": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'autoGeneratedDomainNameLabelScope')]"
                  },
                  "outboundVnetRouting": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'outboundVnetRouting')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "914806231987164171"
                    },
                    "name": "Web/Function App Deployment Slots",
                    "description": "This module deploys a Web or Function App Deployment Slot."
                  },
                  "definitions": {
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group Id for the private endpoint Group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "FQDN that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses of the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "configType": {
                      "type": "object",
                      "discriminator": {
                        "propertyName": "name",
                        "mapping": {
                          "appsettings": {
                            "$ref": "#/definitions/appSettingsConfigType"
                          },
                          "authsettings": {
                            "$ref": "#/definitions/authSettingsConfigType"
                          },
                          "authsettingsV2": {
                            "$ref": "#/definitions/authSettingsV2ConfigType"
                          },
                          "azurestorageaccounts": {
                            "$ref": "#/definitions/azureStorageAccountConfigType"
                          },
                          "backup": {
                            "$ref": "#/definitions/backupConfigType"
                          },
                          "connectionstrings": {
                            "$ref": "#/definitions/connectionStringsConfigType"
                          },
                          "logs": {
                            "$ref": "#/definitions/logsConfigType"
                          },
                          "metadata": {
                            "$ref": "#/definitions/metadataConfigType"
                          },
                          "pushsettings": {
                            "$ref": "#/definitions/pushSettingsConfigType"
                          },
                          "web": {
                            "$ref": "#/definitions/webConfigType"
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a site configuration."
                      }
                    },
                    "appSettingsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "appsettings"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "storageAccountUseIdentityAuthentication": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                          }
                        },
                        "applicationInsightResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the application insight to leverage for this resource."
                          }
                        },
                        "retainCurrentAppSettings": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The retain the current app settings. Defaults to true."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. An app settings key-value pair."
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of an app settings configuration."
                      }
                    },
                    "authSettingsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "authsettings"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "aadClaimsAuthorization": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets a JSON string containing the Azure AD Acl settings."
                              }
                            },
                            "additionalLoginParams": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                              }
                            },
                            "allowedAudiences": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Allowed audience values to consider when validating JSON Web Tokens issued by Azure Active Directory. Note that the `ClientID` value is always considered an allowed audience, regardless of this setting."
                              }
                            },
                            "allowedExternalRedirectUrls": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                              }
                            },
                            "authFilePath": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The path of the config file containing auth settings. If the path is relative, base will the site's root directory."
                              }
                            },
                            "clientId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                              }
                            },
                            "clientSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key). This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users. Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                              }
                            },
                            "clientSecretCertificateThumbprint": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                              }
                            },
                            "clientSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the client secret of the relying party application."
                              }
                            },
                            "configVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The ConfigVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of the control plane for Authentication / Authorization."
                              }
                            },
                            "defaultProvider": {
                              "type": "string",
                              "allowedValues": [
                                "AzureActiveDirectory",
                                "Facebook",
                                "Github",
                                "Google",
                                "MicrosoftAccount",
                                "Twitter"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                              }
                            },
                            "facebookAppId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The App ID of the Facebook app used for login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                              }
                            },
                            "facebookAppSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The App Secret of the Facebook app used for Facebook Login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                              }
                            },
                            "facebookAppSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the app secret used for Facebook Login."
                              }
                            },
                            "facebookOAuthScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. This setting is optional. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                              }
                            },
                            "gitHubClientId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Client Id of the GitHub app used for login. This setting is required for enabling Github login."
                              }
                            },
                            "gitHubClientSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Client Secret of the GitHub app used for Github Login. This setting is required for enabling Github login."
                              }
                            },
                            "gitHubClientSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the client secret of the Github app used for GitHub Login."
                              }
                            },
                            "gitHubOAuthScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication."
                              }
                            },
                            "googleClientId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OpenID Connect Client ID for the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                              }
                            },
                            "googleClientSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The client secret associated with the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                              }
                            },
                            "googleClientSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the client secret associated with the Google web application."
                              }
                            },
                            "googleOAuthScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                              }
                            },
                            "isAuthFromFile": {
                              "type": "string",
                              "allowedValues": [
                                "false",
                                "true"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. \"true\" if the auth config settings should be read from a file, \"false\" otherwise."
                              }
                            },
                            "issuer": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                              }
                            },
                            "microsoftAccountClientId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 client ID that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                              }
                            },
                            "microsoftAccountClientSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 client secret that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                              }
                            },
                            "microsoftAccountClientSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication."
                              }
                            },
                            "microsoftAccountOAuthScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. This setting is optional. If not specified, \"wl.basic\" is used as the default scope. Microsoft Account Scopes and permissions [documentation](https://msdn.microsoft.com/en-us/library/dn631845.aspx)."
                              }
                            },
                            "runtimeVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                              }
                            },
                            "tokenRefreshExtensionHours": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                              }
                            },
                            "tokenStoreEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows. The default is `false`."
                              }
                            },
                            "twitterConsumerKey": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                              }
                            },
                            "twitterConsumerSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 1.0a consumer secret of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                              }
                            },
                            "twitterConsumerSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                              }
                            },
                            "unauthenticatedClientAction": {
                              "type": "string",
                              "allowedValues": [
                                "AllowAnonymous",
                                "RedirectToLoginPage"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                              }
                            },
                            "validateIssuer": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of an auth settings configuration."
                      }
                    },
                    "authSettingsV2ConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "authsettingsV2"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "globalValidation": {
                              "type": "object",
                              "properties": {
                                "excludedPaths": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The paths for which unauthenticated flow would not be redirected to the login page."
                                  }
                                },
                                "redirectToProvider": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                                  }
                                },
                                "requireAuthentication": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `true` if the authentication flow is required by every request."
                                  }
                                },
                                "unauthenticatedClientAction": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AllowAnonymous",
                                    "RedirectToLoginPage",
                                    "Return401",
                                    "Return403"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings that determines the validation flow of users using App Service Authentication/Authorization."
                              }
                            },
                            "httpSettings": {
                              "type": "object",
                              "properties": {
                                "forwardProxy": {
                                  "type": "object",
                                  "properties": {
                                    "convention": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Custom",
                                        "NoProxy",
                                        "Standard"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The convention used to determine the url of the request made."
                                      }
                                    },
                                    "customHostHeaderName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the header containing the host of the request."
                                      }
                                    },
                                    "customProtoHeaderName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the header containing the scheme of the request."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of a forward proxy used to make the requests."
                                  }
                                },
                                "requireHttps": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `false` if the authentication/authorization responses not having the HTTPS scheme are permissible."
                                  }
                                },
                                "routes": {
                                  "type": "object",
                                  "properties": {
                                    "apiPrefix": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The prefix that should precede all the authentication/authorization paths."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the paths HTTP requests."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization."
                              }
                            },
                            "identityProviders": {
                              "type": "object",
                              "properties": {
                                "apple": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Apple provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the client secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Apple registration."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Apple provider."
                                  }
                                },
                                "azureActiveDirectory": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Azure Active Directory provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "isAutoProvisioned": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling. This is an internal flag primarily intended to support the Azure Management Portal. Users should not read or write to this property."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "disableWWWAuthenticate": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set to `true` if the www-authenticate provider should be omitted from the request."
                                          }
                                        },
                                        "loginParameters": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                          }
                                        },
                                        "clientSecretCertificateIssuer": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                          }
                                        },
                                        "clientSecretCertificateSubjectAlternativeName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                          }
                                        },
                                        "clientSecretCertificateThumbprint": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The app setting name that contains the client secret of the relying party application."
                                          }
                                        },
                                        "openIdIssuer": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory app registration."
                                      }
                                    },
                                    "validation": {
                                      "type": "object",
                                      "properties": {
                                        "allowedAudiences": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of audiences that can make successful authentication/authorization requests."
                                          }
                                        },
                                        "defaultAuthorizationPolicy": {
                                          "type": "object",
                                          "properties": {
                                            "allowedApplications": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Azure Active Directory allowed applications."
                                              }
                                            },
                                            "allowedPrincipals": {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The list of the allowed groups."
                                                  }
                                                },
                                                "identities": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The list of the allowed identities."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Azure Active Directory allowed principals."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the default authorization policy."
                                          }
                                        },
                                        "jwtClaimChecks": {
                                          "type": "object",
                                          "properties": {
                                            "allowedClientApplications": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of the allowed client applications."
                                              }
                                            },
                                            "allowedGroups": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of the allowed groups."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the checks that should be made while validating the JWT Claims."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Azure Active directory provider."
                                  }
                                },
                                "azureStaticWebApps": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Azure Static Web Apps provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Static Web Apps registration."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Azure Static Web Apps provider."
                                  }
                                },
                                "customOpenIdConnectProviders": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Set to `false` if the custom Open ID provider provider should not be enabled."
                                        }
                                      },
                                      "login": {
                                        "type": "object",
                                        "properties": {
                                          "nameClaimType": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of the claim that contains the users name."
                                            }
                                          },
                                          "scopes": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A list of the scopes that should be requested while authenticating."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The configuration settings of the login flow of the custom Open ID Connect provider."
                                        }
                                      },
                                      "registration": {
                                        "type": "object",
                                        "properties": {
                                          "clientCredential": {
                                            "type": "object",
                                            "properties": {
                                              "clientSecretSettingName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The app setting that contains the client secret for the custom Open ID Connect provider."
                                                }
                                              },
                                              "method": {
                                                "type": "string",
                                                "allowedValues": [
                                                  "ClientSecretPost"
                                                ],
                                                "metadata": {
                                                  "description": "Required. The method that should be used to authenticate the user."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The authentication credentials of the custom Open ID Connect provider."
                                            }
                                          },
                                          "clientId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The client id of the custom Open ID Connect provider."
                                            }
                                          },
                                          "openIdConnectConfiguration": {
                                            "type": "object",
                                            "properties": {
                                              "authorizationEndpoint": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint to be used to make an authorization request."
                                                }
                                              },
                                              "certificationUri": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint that provides the keys necessary to validate the token."
                                                }
                                              },
                                              "issuer": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint that issues the token."
                                                }
                                              },
                                              "tokenEndpoint": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint to be used to request a token."
                                                }
                                              },
                                              "wellKnownOpenIdConfiguration": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint that contains all the configuration endpoints for the provider."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The configuration settings of the endpoints used for the custom Open ID Connect provider."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The configuration settings of the app registration for the custom Open ID Connect provider."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The alias of each custom Open ID Connect provider."
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The map of the name of the alias of each custom Open ID Connect provider to the configuration settings of the custom Open ID Connect provider."
                                  }
                                },
                                "facebook": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Facebook provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "graphApiVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The version of the Facebook api to be used while logging in."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "appId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The App ID of the app used for login."
                                          }
                                        },
                                        "appSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the app secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the Facebook provider."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Facebook provider."
                                  }
                                },
                                "gitHub": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the GitHub provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the client secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the GitHub provider."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the GitHub provider."
                                  }
                                },
                                "google": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Google provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the client secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the Google provider."
                                      }
                                    },
                                    "validation": {
                                      "type": "object",
                                      "properties": {
                                        "allowedAudiences": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Google provider."
                                  }
                                },
                                "legacyMicrosoftAccount": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the legacy Microsoft Account provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the client secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the legacy Microsoft Account provider."
                                      }
                                    },
                                    "validation": {
                                      "type": "object",
                                      "properties": {
                                        "allowedAudiences": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the legacy Microsoft Account provider token validation flow."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the legacy Microsoft Account provider."
                                  }
                                },
                                "twitter": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Twitter provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "consumerKey": {
                                          "type": "securestring",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                          }
                                        },
                                        "consumerSecretSettingName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the Twitter provider."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Twitter provider."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "allowedExternalRedirectUrls": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                                  }
                                },
                                "cookieExpiration": {
                                  "type": "object",
                                  "properties": {
                                    "convention": {
                                      "type": "string",
                                      "allowedValues": [
                                        "FixedTime",
                                        "IdentityProviderDerived"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The convention used when determining the session cookie's expiration."
                                      }
                                    },
                                    "timeToExpiration": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The time after the request is made when the session cookie should expire."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the session cookie's expiration."
                                  }
                                },
                                "nonce": {
                                  "type": "object",
                                  "properties": {
                                    "nonceExpirationInterval": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The time after the request is made when the nonce should expire."
                                      }
                                    },
                                    "validateNonce": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the nonce should not be validated while completing the login flow."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the nonce used in the login flow."
                                  }
                                },
                                "preserveUrlFragmentsForLogins": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `true` if the fragments from the request are preserved after the login request is made."
                                  }
                                },
                                "routes": {
                                  "type": "object",
                                  "properties": {
                                    "logoutEndpoint": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The endpoint at which a logout request should be made."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The routes that specify the endpoints used for login and logout requests."
                                  }
                                },
                                "tokenStore": {
                                  "type": "object",
                                  "properties": {
                                    "azureBlobStorage": {
                                      "type": "object",
                                      "properties": {
                                        "sasUrlSettingName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the app setting containing the SAS URL of the blob storage containing the tokens."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the storage of the tokens if blob storage is used."
                                      }
                                    },
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows."
                                      }
                                    },
                                    "fileSystem": {
                                      "type": "object",
                                      "properties": {
                                        "directory": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The directory in which the tokens will be stored."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the storage of the tokens if a file system is used."
                                      }
                                    },
                                    "tokenRefreshExtensionHours": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the token store."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow of users using App Service Authentication/Authorization."
                              }
                            },
                            "platform": {
                              "type": "object",
                              "properties": {
                                "configFilePath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The path of the config file containing auth settings if they come from a file. If the path is relative, base will the site's root directory."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                                  }
                                },
                                "runtimeVersion": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the platform of App Service Authentication/Authorization."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of an authSettingsV2 configuration."
                      }
                    },
                    "azureStorageAccountConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "azurestorageaccounts"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "accessKey": {
                                "type": "securestring",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Access key for the storage account."
                                }
                              },
                              "accountName": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of the storage account."
                                }
                              },
                              "mountPath": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Path to mount the storage within the site's runtime environment."
                                }
                              },
                              "protocol": {
                                "type": "string",
                                "allowedValues": [
                                  "Http",
                                  "Nfs",
                                  "Smb"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Mounting protocol to use for the storage account."
                                }
                              },
                              "shareName": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of the file share (container name, for Blob storage)."
                                }
                              },
                              "type": {
                                "type": "string",
                                "allowedValues": [
                                  "AzureBlob",
                                  "AzureFiles"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Type of storage."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Azure Storage Info configuration."
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of an Azure Storage Account configuration."
                      }
                    },
                    "backupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "backup"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "backupName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Name of the backup."
                              }
                            },
                            "backupSchedule": {
                              "type": "object",
                              "properties": {
                                "frequencyInterval": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)."
                                  }
                                },
                                "frequencyUnit": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Day",
                                    "Hour"
                                  ],
                                  "metadata": {
                                    "description": "Required. The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)."
                                  }
                                },
                                "keepAtLeastOneBackup": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Set to `True` if the retention policy should always keep at least one backup in the storage account, regardless how old it is."
                                  }
                                },
                                "retentionPeriodInDays": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. After how many days backups should be deleted."
                                  }
                                },
                                "startTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. When the schedule should start working."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Schedule for the backup if it is executed periodically."
                              }
                            },
                            "databases": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "connectionString": {
                                    "type": "securestring",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one."
                                    }
                                  },
                                  "connectionStringName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options."
                                    }
                                  },
                                  "databaseType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "LocalMySql",
                                      "MySql",
                                      "PostgreSql",
                                      "SqlAzure"
                                    ],
                                    "metadata": {
                                      "description": "Required. Database type (e.g. SqlAzure / MySql)."
                                    }
                                  },
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the setting."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Databases included in the backup."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `True` if the backup schedule is enabled (must be included in that case), `false` if the backup schedule should be disabled."
                              }
                            },
                            "storageAccountUrl": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SAS URL to the container."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a backup configuration."
                      }
                    },
                    "connectionStringsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "connectionstrings"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "allowedValues": [
                                  "ApiHub",
                                  "Custom",
                                  "DocDb",
                                  "EventHub",
                                  "MySql",
                                  "NotificationHub",
                                  "PostgreSQL",
                                  "RedisCache",
                                  "SQLAzure",
                                  "SQLServer",
                                  "ServiceBus"
                                ],
                                "metadata": {
                                  "description": "Required. Type of database."
                                }
                              },
                              "value": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Value of pair."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the connection string setting."
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a connection string configuration."
                      }
                    },
                    "logsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "logs"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "applicationLogs": {
                              "type": "object",
                              "properties": {
                                "azureBlobStorage": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Error",
                                        "Information",
                                        "Off",
                                        "Verbose",
                                        "Warning"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Log level."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                                      }
                                    },
                                    "sasUrl": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application logs to blob storage configuration."
                                  }
                                },
                                "azureTableStorage": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Error",
                                        "Information",
                                        "Off",
                                        "Verbose",
                                        "Warning"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Log level."
                                      }
                                    },
                                    "sasUrl": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. SAS URL to an Azure table with add/query/delete permissions."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application logs to azure table storage configuration."
                                  }
                                },
                                "fileSystem": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Error",
                                        "Information",
                                        "Off",
                                        "Verbose",
                                        "Warning"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Log level."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application logs to file system configuration."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application Logs for Azure configuration."
                              }
                            },
                            "detailedErrorMessages": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Detailed error messages configuration."
                              }
                            },
                            "failedRequestsTracing": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Failed requests tracing configuration."
                              }
                            },
                            "httpLogs": {
                              "type": "object",
                              "properties": {
                                "azureBlobStorage": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                                      }
                                    },
                                    "sasUrl": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Http logs to azure blob storage configuration."
                                  }
                                },
                                "fileSystem": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Retention in days. Remove files older than X days. 0 or lower means no retention."
                                      }
                                    },
                                    "retentionInMb": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 25,
                                      "maxValue": 100,
                                      "metadata": {
                                        "description": "Optional. Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Http logs to file system configuration."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. HTTP logs configuration."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a logs configuration."
                      }
                    },
                    "metadataConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "metadata"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata key value pair."
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a metadata configuration."
                      }
                    },
                    "pushSettingsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "pushsettings"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "dynamicTagsJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                              }
                            },
                            "isPushEnabled": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                              }
                            },
                            "tagsRequiringAuth": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                              }
                            },
                            "tagWhitelistJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a pushSettings configuration."
                      }
                    },
                    "webConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "web"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "acrUseManagedIdentityCreds": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Flag to use Managed Identity Creds for ACR pull."
                              }
                            },
                            "acrUserManagedIdentityID": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. If using user managed identity, the user managed identity ClientId."
                              }
                            },
                            "alwaysOn": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if 'Always On' is enabled."
                              }
                            },
                            "apiDefinition": {
                              "type": "object",
                              "properties": {
                                "url": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The URL of the API definition."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Information about the formal API definition for the app."
                              }
                            },
                            "apiManagementConfig": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. APIM-Api Identifier."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Azure API management settings linked to the app."
                              }
                            },
                            "appCommandLine": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. App command line to launch."
                              }
                            },
                            "appSettings": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Name of the pair."
                                    }
                                  },
                                  "value": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Value of the pair."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application settings."
                              }
                            },
                            "autoHealEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if Auto Heal is enabled."
                              }
                            },
                            "autoHealRules": {
                              "type": "object",
                              "properties": {
                                "actions": {
                                  "type": "object",
                                  "properties": {
                                    "actionType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "CustomAction",
                                        "LogEvent",
                                        "Recycle"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Predefined action to be taken."
                                      }
                                    },
                                    "customAction": {
                                      "type": "object",
                                      "properties": {
                                        "exe": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Executable to be run."
                                          }
                                        },
                                        "parameters": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Parameters for the executable."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom action to be taken."
                                      }
                                    },
                                    "minProcessExecutionTime": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Minimum time the process must execute before taking the action."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Actions to be executed when a rule is triggered."
                                  }
                                },
                                "triggers": {
                                  "type": "object",
                                  "properties": {
                                    "privateBytesInKB": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on private bytes."
                                      }
                                    },
                                    "requests": {
                                      "type": "object",
                                      "properties": {
                                        "count": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Request Count."
                                          }
                                        },
                                        "timeInterval": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Time interval."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on total requests."
                                      }
                                    },
                                    "slowRequests": {
                                      "$ref": "#/definitions/slowRequestBasedTriggerType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on request execution time."
                                      }
                                    },
                                    "slowRequestsWithPath": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/slowRequestBasedTriggerType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on multiple Slow Requests Rule with path."
                                      }
                                    },
                                    "statusCodes": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "count": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Request Count."
                                            }
                                          },
                                          "path": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Request Path."
                                            }
                                          },
                                          "status": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. HTTP status code."
                                            }
                                          },
                                          "subStatus": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Request Sub Status."
                                            }
                                          },
                                          "timeInterval": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Time interval."
                                            }
                                          },
                                          "win32Status": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Win32 error code."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on status codes."
                                      }
                                    },
                                    "statusCodesRange": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "count": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Request Count."
                                            }
                                          },
                                          "path": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Path."
                                            }
                                          },
                                          "statusCodes": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. HTTP status code."
                                            }
                                          },
                                          "timeInterval": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Time interval."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on status codes ranges."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Conditions that describe when to execute the auto-heal actions."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Auto Heal rules."
                              }
                            },
                            "autoSwapSlotName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Auto-swap slot name."
                              }
                            },
                            "azureStorageAccounts": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "accessKey": {
                                    "type": "securestring",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Access key for the storage account."
                                    }
                                  },
                                  "accountName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the storage account."
                                    }
                                  },
                                  "mountPath": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Path to mount the storage within the site's runtime environment."
                                    }
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Http",
                                      "Nfs",
                                      "Smb"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Mounting protocol to use for the storage account."
                                    }
                                  },
                                  "shareName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the file share (container name, for Blob storage)."
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureBlob",
                                      "AzureFiles"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Type of storage."
                                    }
                                  }
                                },
                                "metadata": {
                                  "description": "Required. A storage account configuration."
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of Azure Storage Accounts."
                              }
                            },
                            "connectionStrings": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "connectionString": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Connection string value."
                                    }
                                  },
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of connection string."
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "allowedValues": [
                                      "ApiHub",
                                      "Custom",
                                      "DocDb",
                                      "EventHub",
                                      "MySql",
                                      "NotificationHub",
                                      "PostgreSQL",
                                      "RedisCache",
                                      "SQLAzure",
                                      "SQLServer",
                                      "ServiceBus"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Type of database."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Connection strings."
                              }
                            },
                            "cors": {
                              "type": "object",
                              "properties": {
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use \"*\" to allow all."
                                  }
                                },
                                "supportCredentials": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Gets or sets whether CORS requests with credentials are allowed. See [ref](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials) for more details."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Cross-Origin Resource Sharing (CORS) settings."
                              }
                            },
                            "defaultDocuments": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Default documents."
                              }
                            },
                            "detailedErrorLoggingEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if detailed error logging is enabled."
                              }
                            },
                            "documentRoot": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Document root."
                              }
                            },
                            "elasticWebAppScaleLimit": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to apps in plans where ElasticScaleEnabled is `true`."
                              }
                            },
                            "experiments": {
                              "type": "object",
                              "properties": {
                                "rampUpRules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "actionHostName": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net."
                                        }
                                      },
                                      "changeDecisionCallbackUrl": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified."
                                        }
                                      },
                                      "changeIntervalInMinutes": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies interval in minutes to reevaluate ReroutePercentage."
                                        }
                                      },
                                      "changeStep": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. In auto ramp up scenario this is the step to add/remove from `ReroutePercentage` until it reaches `MinReroutePercentage` or `MaxReroutePercentage`. Site metrics are checked every N minutes specified in `ChangeIntervalInMinutes`. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in `ChangeDecisionCallbackUrl`."
                                        }
                                      },
                                      "maxReroutePercentage": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies upper boundary below which ReroutePercentage will stay."
                                        }
                                      },
                                      "minReroutePercentage": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies lower boundary above which ReroutePercentage will stay."
                                        }
                                      },
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                        }
                                      },
                                      "reroutePercentage": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Percentage of the traffic which will be redirected to `ActionHostName`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of ramp-up rules."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. This is work around for polymorphic types."
                              }
                            },
                            "ftpsState": {
                              "type": "string",
                              "allowedValues": [
                                "AllAllowed",
                                "Disabled",
                                "FtpsOnly"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. State of FTP / FTPS service."
                              }
                            },
                            "functionAppScaleLimit": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to the Consumption and Elastic Premium Plans."
                              }
                            },
                            "functionsRuntimeScaleMonitoringEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled, the ScaleController will not monitor event sources directly, but will instead call to the runtime to get scale status."
                              }
                            },
                            "handlerMappings": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "arguments": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Command-line arguments to be passed to the script processor."
                                    }
                                  },
                                  "extension": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Requests with this extension will be handled using the specified FastCGI application."
                                    }
                                  },
                                  "scriptProcessor": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The absolute path to the FastCGI application."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Handler mappings."
                              }
                            },
                            "healthCheckPath": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Health check path."
                              }
                            },
                            "http20Enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Allow clients to connect over http2.0."
                              }
                            },
                            "httpLoggingEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if HTTP logging is enabled."
                              }
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/scmIpSecurityRestrictionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. IP security restrictions for main."
                              }
                            },
                            "ipSecurityRestrictionsDefaultAction": {
                              "type": "string",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Default action for main access restriction if no rules are matched."
                              }
                            },
                            "javaContainer": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Java container."
                              }
                            },
                            "javaContainerVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Java container version."
                              }
                            },
                            "javaVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Java version."
                              }
                            },
                            "keyVaultReferenceIdentity": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Identity to use for Key Vault Reference authentication."
                              }
                            },
                            "limits": {
                              "type": "object",
                              "properties": {
                                "maxDiskSizeInMb": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Maximum allowed disk size usage in MB."
                                  }
                                },
                                "maxMemoryInMb": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Maximum allowed memory usage in MB."
                                  }
                                },
                                "maxPercentageCpu": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Maximum allowed CPU usage percentage."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Site limits."
                              }
                            },
                            "linuxFxVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Linux App Framework and version."
                              }
                            },
                            "loadBalancing": {
                              "type": "string",
                              "allowedValues": [
                                "LeastRequests",
                                "LeastRequestsWithTieBreaker",
                                "LeastResponseTime",
                                "PerSiteRoundRobin",
                                "RequestHash",
                                "WeightedRoundRobin",
                                "WeightedTotalTraffic"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Site load balancing."
                              }
                            },
                            "localMySqlEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` to enable local MySQL."
                              }
                            },
                            "logsDirectorySizeLimit": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. HTTP logs directory size limit."
                              }
                            },
                            "managedPipelineMode": {
                              "type": "string",
                              "allowedValues": [
                                "Classic",
                                "Integrated"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Managed pipeline mode."
                              }
                            },
                            "managedServiceIdentityId": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Managed Service Identity Id."
                              }
                            },
                            "metadata": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Pair name."
                                    }
                                  },
                                  "value": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Pair Value."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application metadata. This property cannot be retrieved, since it may contain secrets."
                              }
                            },
                            "minimumElasticInstanceCount": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 0,
                              "maxValue": 20,
                              "metadata": {
                                "description": "Optional. Number of minimum instance count for a site. This setting only applies to the Elastic Plans."
                              }
                            },
                            "minTlsCipherSuite": {
                              "type": "string",
                              "allowedValues": [
                                "TLS_AES_128_GCM_SHA256",
                                "TLS_AES_256_GCM_SHA384",
                                "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                                "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                                "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                                "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                                "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                                "TLS_RSA_WITH_AES_128_CBC_SHA",
                                "TLS_RSA_WITH_AES_128_CBC_SHA256",
                                "TLS_RSA_WITH_AES_128_GCM_SHA256",
                                "TLS_RSA_WITH_AES_256_CBC_SHA",
                                "TLS_RSA_WITH_AES_256_CBC_SHA256",
                                "TLS_RSA_WITH_AES_256_GCM_SHA384"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The minimum strength TLS cipher suite allowed for an application."
                              }
                            },
                            "minTlsVersion": {
                              "type": "string",
                              "allowedValues": [
                                "1.0",
                                "1.1",
                                "1.2",
                                "1.3"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. MinTlsVersion: configures the minimum version of TLS required for SSL requests."
                              }
                            },
                            "netFrameworkVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. .NET Framework version."
                              }
                            },
                            "nodeVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Version of Node.js."
                              }
                            },
                            "numberOfWorkers": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Number of workers."
                              }
                            },
                            "phpVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Version of PHP."
                              }
                            },
                            "powerShellVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Version of PowerShell."
                              }
                            },
                            "preWarmedInstanceCount": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 0,
                              "maxValue": 10,
                              "metadata": {
                                "description": "Optional. Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Property to allow or block all public traffic."
                              }
                            },
                            "publishingUsername": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Publishing user name."
                              }
                            },
                            "push": {
                              "type": "object",
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Kind of resource."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "dynamicTagsJson": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                                      }
                                    },
                                    "isPushEnabled": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                                      }
                                    },
                                    "tagsRequiringAuth": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                                      }
                                    },
                                    "tagWhitelistJson": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. PushSettings resource specific properties."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Push endpoint settings."
                              }
                            },
                            "pythonVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Version of Python."
                              }
                            },
                            "remoteDebuggingEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if remote debugging is enabled."
                              }
                            },
                            "remoteDebuggingVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Remote debugging version."
                              }
                            },
                            "requestTracingEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if request tracing is enabled."
                              }
                            },
                            "requestTracingExpirationTime": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Request tracing expiration time."
                              }
                            },
                            "scmIpSecurityRestrictions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/scmIpSecurityRestrictionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. IP security restrictions for scm."
                              }
                            },
                            "scmIpSecurityRestrictionsDefaultAction": {
                              "type": "string",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Default action for scm access restriction if no rules are matched."
                              }
                            },
                            "scmIpSecurityRestrictionsUseMain": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. IP security restrictions for scm to use main."
                              }
                            },
                            "scmMinTlsVersion": {
                              "type": "string",
                              "allowedValues": [
                                "1.0",
                                "1.1",
                                "1.2",
                                "1.3"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site."
                              }
                            },
                            "scmType": {
                              "type": "string",
                              "allowedValues": [
                                "BitbucketGit",
                                "BitbucketHg",
                                "CodePlexGit",
                                "CodePlexHg",
                                "Dropbox",
                                "ExternalGit",
                                "ExternalHg",
                                "GitHub",
                                "LocalGit",
                                "None",
                                "OneDrive",
                                "Tfs",
                                "VSO",
                                "VSTSRM"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SCM type."
                              }
                            },
                            "tracingOptions": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tracing options."
                              }
                            },
                            "use32BitWorkerProcess": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` to use 32-bit worker process."
                              }
                            },
                            "virtualApplications": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "physicalPath": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Physical path."
                                    }
                                  },
                                  "preloadEnabled": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Set to `true` if preloading is enabled."
                                    }
                                  },
                                  "virtualDirectories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "physicalPath": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Physical path."
                                          }
                                        },
                                        "virtualPath": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Path to virtual application."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Virtual directories for virtual application."
                                    }
                                  },
                                  "virtualPath": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Virtual path."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Virtual applications."
                              }
                            },
                            "vnetName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Virtual Network name."
                              }
                            },
                            "vnetPrivatePortsCount": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The number of private ports assigned to this app. These will be assigned dynamically on runtime."
                              }
                            },
                            "vnetRouteAllEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                              }
                            },
                            "websiteTimeZone": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see [ref](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones."
                              }
                            },
                            "webSocketsEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if WebSocket is enabled."
                              }
                            },
                            "windowsFxVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Xenon App Framework and version."
                              }
                            },
                            "xManagedServiceIdentityId": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Explicit Managed Service Identity Id."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a web configuration."
                      }
                    },
                    "slowRequestBasedTriggerType": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Request Count."
                          }
                        },
                        "path": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Request Path."
                          }
                        },
                        "timeInterval": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Time interval."
                          }
                        },
                        "timeTaken": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Time taken."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type of aslow request based trigger."
                      }
                    },
                    "scmIpSecurityRestrictionType": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "allowedValues": [
                            "Allow",
                            "Deny"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Allow or Deny access for this IP range."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. IP restriction rule description."
                          }
                        },
                        "headers": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A header."
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. IP restriction rule headers.\nX-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), all hosts(or lack of) are allowed.\n- A value is compared using ordinal-ignore-case (excluding port number).\n- Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com\nbut not the root domain contoso.com or multi-level foo.bar.contoso.com\n- Unicode host names are allowed but are converted to Punycode for matching.\n\nX-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.\n- If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.\n\nX-Azure-FDID and X-FD-HealthProbe.\nThe matching logic is exact match."
                          }
                        },
                        "ipAddress": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask (leading bit match). For CIDR, SubnetMask property must not be specified."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. IP restriction rule name."
                          }
                        },
                        "priority": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Priority of IP restriction rule."
                          }
                        },
                        "subnetMask": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Subnet mask for the range of IP addresses the restriction is valid for."
                          }
                        },
                        "subnetTrafficTag": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. (internal) Subnet traffic tag."
                          }
                        },
                        "tag": {
                          "type": "string",
                          "allowedValues": [
                            "Default",
                            "ServiceTag",
                            "XffProxy"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Defines what this IP filter will be used for. This is to support IP filtering on proxies."
                          }
                        },
                        "vnetSubnetResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Virtual network resource id."
                          }
                        },
                        "vnetTrafficTag": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. (internal) Vnet traffic tag."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type of a IP security restriction."
                      }
                    },
                    "basicPublishingCredentialsPolicyType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "ftp",
                            "scm"
                          ],
                          "metadata": {
                            "description": "Required. The name of the resource."
                          }
                        },
                        "allow": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to true to enable or false to disable a publishing method."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Location for all Resources."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a basic publishing credential policy."
                      }
                    },
                    "hybridConnectionRelayType": {
                      "type": "object",
                      "properties": {
                        "hybridConnectionResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the relay namespace hybrid connection."
                          }
                        },
                        "sendKeyName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the authorization rule send key to use."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a hybrid connection relay."
                      }
                    },
                    "_1.lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "notes": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the notes of the lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "_1.roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "notes": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the notes of the lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "privateEndpointSingleServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private Endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the Private Endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/_1.lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "__bicep_resource_derived_type!": {
                              "source": "Microsoft.Network/privateEndpoints@2024-07-01#properties/tags"
                            },
                            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the slot."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "functionapp",
                        "functionapp,linux",
                        "functionapp,workflowapp",
                        "functionapp,workflowapp,linux",
                        "functionapp,linux,container",
                        "functionapp,linux,container,azurecontainerapps",
                        "app,linux",
                        "app",
                        "linux,api",
                        "api",
                        "app,linux,container",
                        "app,container,windows"
                      ],
                      "metadata": {
                        "description": "Required. Type of site to deploy."
                      }
                    },
                    "serverFarmResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the app service plan to use for the slot."
                      }
                    },
                    "managedEnvironmentResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                      }
                    },
                    "httpsOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                      }
                    },
                    "clientAffinityEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If client affinity is enabled."
                      }
                    },
                    "clientAffinityProxyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. To enable client affinity; false to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is true."
                      }
                    },
                    "clientAffinityPartitioningEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable client affinity partitioning using CHIPS cookies, this will add the partitioned property to the affinity cookies; false to stop sending partitioned affinity cookies. Default is false."
                      }
                    },
                    "appServiceEnvironmentResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the app service environment to use for this resource."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "keyVaultAccessIdentityResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                      }
                    },
                    "storageAccountRequired": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Checks if Customer provided storage account is required."
                      }
                    },
                    "virtualNetworkSubnetResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                      }
                    },
                    "siteConfig": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/siteConfig"
                        },
                        "description": "Optional. The site config object."
                      },
                      "defaultValue": {
                        "alwaysOn": true
                      }
                    },
                    "functionAppConfig": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Function App config object."
                      }
                    },
                    "configs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/configType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The web site config."
                      }
                    },
                    "extensions": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The extensions configuration."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointSingleServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "clientCertEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                      }
                    },
                    "clientCertExclusionPaths": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                      }
                    },
                    "clientCertMode": {
                      "type": "string",
                      "defaultValue": "Optional",
                      "allowedValues": [
                        "Optional",
                        "OptionalInteractiveUser",
                        "Required"
                      ],
                      "metadata": {
                        "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
                      }
                    },
                    "cloningInfo": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If specified during app creation, the app is cloned from a source app."
                      }
                    },
                    "containerSize": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Size of the function container."
                      }
                    },
                    "customDomainVerificationId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                      }
                    },
                    "dailyMemoryTimeQuota": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                      }
                    },
                    "hostNameSslStates": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/hostNameSslStates"
                        },
                        "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                      },
                      "nullable": true
                    },
                    "hyperV": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Hyper-V sandbox."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Allow or block all public traffic."
                      }
                    },
                    "redundancyMode": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "ActiveActive",
                        "Failover",
                        "GeoRedundant",
                        "Manual",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. Site redundancy mode."
                      }
                    },
                    "basicPublishingCredentialsPolicies": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The site publishing credential policy names which are associated with the site slot."
                      }
                    },
                    "outboundVnetRouting": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-11-01#properties/properties/properties/outboundVnetRouting"
                        },
                        "description": "Optional. The outbound VNET routing configuration for the site."
                      },
                      "nullable": true
                    },
                    "hybridConnectionRelays": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/hybridConnectionRelayType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Names of hybrid connection relays to connect app with."
                      }
                    },
                    "dnsConfiguration": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/dnsConfiguration"
                        },
                        "description": "Optional. Property to configure various DNS related settings for a site."
                      },
                      "nullable": true
                    },
                    "autoGeneratedDomainNameLabelScope": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "NoReuse",
                        "ResourceGroupReuse",
                        "SubscriptionReuse",
                        "TenantReuse"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                    },
                    "managedEnvironmentSupportedKinds": [
                      "functionapp,linux,container,azurecontainerapps"
                    ]
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.web-siteslot.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "app": {
                      "existing": true,
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2024-11-01",
                      "name": "[parameters('appName')]"
                    },
                    "slot": {
                      "type": "Microsoft.Web/sites/slots",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentResourceId'))), parameters('managedEnvironmentResourceId'), null())]",
                        "serverFarmId": "[if(and(contains(variables('managedEnvironmentSupportedKinds'), parameters('kind')), or(not(empty(reference('app').managedEnvironmentId)), not(empty(parameters('managedEnvironmentResourceId'))))), null(), parameters('serverFarmResourceId'))]",
                        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                        "clientAffinityProxyEnabled": "[parameters('clientAffinityProxyEnabled')]",
                        "clientAffinityPartitioningEnabled": "[parameters('clientAffinityPartitioningEnabled')]",
                        "httpsOnly": "[parameters('httpsOnly')]",
                        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                        "storageAccountRequired": "[parameters('storageAccountRequired')]",
                        "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                        "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetResourceId')]",
                        "siteConfig": "[parameters('siteConfig')]",
                        "functionAppConfig": "[parameters('functionAppConfig')]",
                        "clientCertEnabled": "[parameters('clientCertEnabled')]",
                        "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                        "clientCertMode": "[parameters('clientCertMode')]",
                        "cloningInfo": "[parameters('cloningInfo')]",
                        "containerSize": "[parameters('containerSize')]",
                        "customDomainVerificationId": "[parameters('customDomainVerificationId')]",
                        "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                        "enabled": "[parameters('enabled')]",
                        "hostNameSslStates": "[parameters('hostNameSslStates')]",
                        "hyperV": "[parameters('hyperV')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "redundancyMode": "[parameters('redundancyMode')]",
                        "dnsConfiguration": "[parameters('dnsConfiguration')]",
                        "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]",
                        "outboundVnetRouting": "[parameters('outboundVnetRouting')]"
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "slot_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_diagnosticSettings": {
                      "copy": {
                        "name": "slot_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_roleAssignments": {
                      "copy": {
                        "name": "slot_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_basicPublishingCredentialsPolicies": {
                      "copy": {
                        "name": "slot_basicPublishingCredentialsPolicies",
                        "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('appName')]"
                          },
                          "slotName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                          },
                          "allow": {
                            "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "17123160073792726997"
                            },
                            "name": "Web Site Slot Basic Publishing Credentials Policies",
                            "description": "This module deploys a Web Site Slot Basic Publishing Credentials Policy."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "scm",
                                "ftp"
                              ],
                              "metadata": {
                                "description": "Required. The name of the resource."
                              }
                            },
                            "allow": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Set to true to enable or false to disable a publishing method."
                              }
                            },
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                              }
                            },
                            "slotName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "allow": "[parameters('allow')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the basic publishing credential policy."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the basic publishing credential policy."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the basic publishing credential policy was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name')), '2024-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_hybridConnectionRelays": {
                      "copy": {
                        "name": "slot_hybridConnectionRelays",
                        "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hybridConnectionResourceId": {
                            "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].hybridConnectionResourceId]"
                          },
                          "appName": {
                            "value": "[parameters('appName')]"
                          },
                          "slotName": {
                            "value": "[parameters('name')]"
                          },
                          "sendKeyName": {
                            "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "13532312193837359524"
                            },
                            "name": "Web/Function Apps Slot Hybrid Connection Relay",
                            "description": "This module deploys a Site Slot Hybrid Connection Namespace Relay."
                          },
                          "parameters": {
                            "hybridConnectionResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the relay namespace hybrid connection."
                              }
                            },
                            "slotName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the site slot. Required if the template is used in a standalone deployment."
                              }
                            },
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                              }
                            },
                            "sendKeyName": {
                              "type": "string",
                              "defaultValue": "defaultSender",
                              "metadata": {
                                "description": "Optional. Name of the authorization rule send key to use."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                              "properties": {
                                "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[0]]",
                                "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[1])]",
                                "sendKeyName": "[parameters('sendKeyName')]",
                                "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2024-01-01').primaryKey]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the hybrid connection relay.."
                              },
                              "value": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the hybrid connection relay."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[3])]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the resource was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_config": {
                      "copy": {
                        "name": "slot_config",
                        "count": "[length(coalesce(parameters('configs'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-Config-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('appName')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('configs'), createArray())[copyIndex()].name]"
                          },
                          "slotName": {
                            "value": "[parameters('name')]"
                          },
                          "applicationInsightResourceId": {
                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'applicationInsightResourceId')]"
                          },
                          "properties": {
                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'properties')]"
                          },
                          "currentAppSettings": "[if(coalesce(tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'retainCurrentAppSettings'), and(true(), equals(coalesce(parameters('configs'), createArray())[copyIndex()].name, 'appsettings'))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]",
                          "storageAccountResourceId": {
                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountResourceId')]"
                          },
                          "storageAccountUseIdentityAuthentication": {
                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "16898908324753684244"
                            },
                            "name": "Site App Settings",
                            "description": "This module deploys a Site App Setting."
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "slotName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "appsettings",
                                "authsettings",
                                "authsettingsV2",
                                "azurestorageaccounts",
                                "backup",
                                "connectionstrings",
                                "logs",
                                "metadata",
                                "pushsettings",
                                "web"
                              ],
                              "metadata": {
                                "description": "Required. The name of the config."
                              }
                            },
                            "properties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The properties of the config. Note: This parameter is highly dependent on the config type, defined by its name."
                              }
                            },
                            "currentAppSettings": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The key-values pairs of the current app settings."
                                }
                              },
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The current app settings."
                              }
                            },
                            "storageAccountUseIdentityAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                              }
                            },
                            "applicationInsightResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource ID of the application insight to leverage for this resource."
                              }
                            }
                          },
                          "resources": {
                            "app::slot": {
                              "existing": true,
                              "type": "Microsoft.Web/sites/slots",
                              "apiVersion": "2023-12-01",
                              "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]"
                            },
                            "applicationInsights": {
                              "condition": "[not(empty(parameters('applicationInsightResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02",
                              "subscriptionId": "[split(parameters('applicationInsightResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('applicationInsightResourceId'), '/')[4]]",
                              "name": "[last(split(parameters('applicationInsightResourceId'), '/'))]"
                            },
                            "storageAccount": {
                              "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2025-01-01",
                              "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
                              "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                            },
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2023-12-01",
                              "name": "[parameters('appName')]"
                            },
                            "config": {
                              "type": "Microsoft.Web/sites/slots/config",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                              "properties": "[union(parameters('currentAppSettings'), parameters('properties'), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(parameters('storageAccountResourceId'), '/')), listKeys('storageAccount', '2025-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), createObject('AzureWebJobsStorage__accountName', last(split(parameters('storageAccountResourceId'), '/')), 'AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob, 'AzureWebJobsStorage__queueServiceUri', reference('storageAccount').primaryEndpoints.queue, 'AzureWebJobsStorage__tableServiceUri', reference('storageAccount').primaryEndpoints.table), createObject())), if(not(empty(parameters('applicationInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString), createObject()))]",
                              "dependsOn": [
                                "applicationInsights",
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "app_extensions": {
                      "copy": {
                        "name": "app_extensions",
                        "count": "[length(coalesce(parameters('extensions'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-Extension={1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('appName')]"
                          },
                          "slotName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('extensions'), createArray())[copyIndex()], 'name')]"
                          },
                          "kind": {
                            "value": "[tryGet(coalesce(parameters('extensions'), createArray())[copyIndex()], 'kind')]"
                          },
                          "properties": {
                            "value": "[coalesce(parameters('extensions'), createArray())[copyIndex()].properties]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "10761655518597298958"
                            },
                            "name": "Site Deployment Extension ",
                            "description": "This module deploys a Site extension for MSDeploy."
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "slotName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "MSDeploy",
                              "allowedValues": [
                                "MSDeploy"
                              ],
                              "metadata": {
                                "description": "Optional. The name of the extension."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "MSDeploy",
                              "allowedValues": [
                                "MSDeploy"
                              ],
                              "metadata": {
                                "description": "Optional. The kind of extension."
                              }
                            },
                            "properties": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                                },
                                "description": "Optional. Sets the properties."
                              },
                              "nullable": true
                            }
                          },
                          "resources": {
                            "app::slot": {
                              "existing": true,
                              "type": "Microsoft.Web/sites/slots",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]"
                            },
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2024-04-01",
                              "name": "[parameters('appName')]"
                            },
                            "msdeploy": {
                              "type": "Microsoft.Web/sites/slots/extensions",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                              "kind": "[parameters('kind')]",
                              "properties": "[parameters('properties')]"
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the extension."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots/extensions', parameters('appName'), parameters('slotName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the extensino was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_privateEndpoints": {
                      "copy": {
                        "name": "slot_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-slot-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "12389807800450456797"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "13997305779829540948"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the slot."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the slot."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the slot was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('slot', '2024-11-01', 'full'), 'identity'), 'principalId')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('slot', '2024-11-01', 'full').location]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the slot."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_basicPublishingCredentialsPolicies": {
              "copy": {
                "name": "app_basicPublishingCredentialsPolicies",
                "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Site-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "webAppName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                  },
                  "allow": {
                    "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11690883076351352821"
                    },
                    "name": "Web Site Basic Publishing Credentials Policies",
                    "description": "This module deploys a Web Site Basic Publishing Credentials Policy."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "scm",
                        "ftp"
                      ],
                      "metadata": {
                        "description": "Required. The name of the resource."
                      }
                    },
                    "allow": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Set to true to enable or false to disable a publishing method."
                      }
                    },
                    "webAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}', parameters('webAppName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "allow": "[parameters('allow')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the basic publishing credential policy."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the basic publishing credential policy."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the basic publishing credential policy was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name')), '2024-04-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_hybridConnectionRelays": {
              "copy": {
                "name": "app_hybridConnectionRelays",
                "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hybridConnectionResourceId": {
                    "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].hybridConnectionResourceId]"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "sendKeyName": {
                    "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "9890852164030738398"
                    },
                    "name": "Web/Function Apps Hybrid Connection Relay",
                    "description": "This module deploys a Site Hybrid Connection Namespace Relay."
                  },
                  "parameters": {
                    "hybridConnectionResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the relay namespace hybrid connection."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                      }
                    },
                    "sendKeyName": {
                      "type": "string",
                      "defaultValue": "defaultSender",
                      "metadata": {
                        "description": "Optional. Name of the authorization rule send key to use."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/hybridConnectionNamespaces/relays",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                      "properties": {
                        "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                        "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                        "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                        "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                        "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[0]]",
                        "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[1])]",
                        "sendKeyName": "[parameters('sendKeyName')]",
                        "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2024-01-01').primaryKey]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the hybrid connection relay.."
                      },
                      "value": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the hybrid connection relay."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2])]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the resource was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_privateEndpoints": {
              "copy": {
                "name": "app_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-app-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "12389807800450456797"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint."
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "privateLinkServiceConnectionType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the private link service connection."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of private link service."
                              }
                            },
                            "requestMessage": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private link service connection."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "customDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipConfigurationType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "13997305779829540948"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2024-05-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                    },
                    "groupId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the site."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the site."
              },
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the site was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('app', '2024-11-01', 'full'), 'identity'), 'principalId')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('app', '2024-11-01', 'full').location]"
            },
            "defaultHostname": {
              "type": "string",
              "metadata": {
                "description": "Default hostname of the app."
              },
              "value": "[reference('app').defaultHostName]"
            },
            "customDomainVerificationId": {
              "type": "string",
              "metadata": {
                "description": "Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
              },
              "value": "[reference('app').customDomainVerificationId]"
            },
            "outboundIpAddresses": {
              "type": "string",
              "metadata": {
                "description": "The outbound IP addresses of the app."
              },
              "value": "[reference('app').outboundIpAddresses]"
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointOutputType"
              },
              "metadata": {
                "description": "The private endpoints of the site."
              },
              "copy": {
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                "input": {
                  "name": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                  "groupId": "[tryGet(tryGet(reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                  "customDnsConfigs": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                  "networkInterfaceResourceIds": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                }
              }
            },
            "slots": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "The name of the slot."
                    }
                  },
                  "resourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "The resource ID of the slot."
                    }
                  },
                  "systemAssignedMIPrincipalId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "The principal ID of the system assigned identity of the slot."
                    }
                  },
                  "privateEndpoints": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/privateEndpointOutputType"
                    },
                    "metadata": {
                      "description": "The private endpoints of the slot."
                    }
                  }
                }
              },
              "metadata": {
                "description": "The slots of the site."
              },
              "copy": {
                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                "input": {
                  "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
                  "resourceId": "[reference(format('app_slots[{0}]', copyIndex())).outputs.resourceId.value]",
                  "systemAssignedMIPrincipalId": "[coalesce(tryGet(tryGet(reference(format('app_slots[{0}]', copyIndex())).outputs, 'systemAssignedMIPrincipalId'), 'value'), '')]",
                  "privateEndpoints": "[reference(format('app_slots[{0}]', copyIndex())).outputs.privateEndpoints.value]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "appServicePlan",
        "logAnalyticsWorkspace",
        "rg",
        "virtualNetwork"
      ]
    },
    "webAppDdbProxy": {
      "condition": "[and(equals(parameters('computeService'), 'Web App'), parameters('deployDdbProxy'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "web-app-ddbproxy-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "diagnosticSettings": "[if(parameters('deployDiagnostics'), createObject('value', createArray(createObject('name', variables('sendToLogAnalyticsName'), 'workspaceResourceId', reference('logAnalyticsWorkspace').outputs.resourceId.value, 'logCategoriesAndGroups', createArray(createObject('category', 'AppServiceHTTPLogs'), createObject('category', 'AppServiceConsoleLogs'), createObject('category', 'AppServiceAppLogs'), createObject('category', 'AppServiceAuditLogs'), createObject('category', 'AppServiceIPSecAuditLogs'), createObject('category', 'AppServicePlatformLogs')), 'metricCategories', createArray()))), createObject('value', createArray()))]",
          "kind": {
            "value": "app,linux,container"
          },
          "name": {
            "value": "[variables('webAppDdbProxyName')]"
          },
          "serverFarmResourceId": {
            "value": "[reference('appServicePlan').outputs.resourceId.value]"
          },
          "siteConfig": {
            "value": {
              "numberOfWorkers": 1,
              "linuxFxVersion": "[format('DOCKER|{0}:{1}', variables('ddbProxyDockerImageName'), variables('ddbProxyDockerImageTag'))]",
              "alwaysOn": true,
              "appSettings": [
                {
                  "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                  "value": "false"
                },
                {
                  "name": "VIRTUAL_HOST",
                  "value": "[variables('webAppFoundryVttName')]"
                },
                {
                  "name": "VIRTUAL_PORT",
                  "value": "3000"
                },
                {
                  "name": "DOCKER_REGISTRY_SERVER_URL",
                  "value": "https://ghcr.io"
                }
              ],
              "ftpsState": "FtpsOnly",
              "minTlsVersion": "1.2",
              "healthCheckPath": "/ping"
            }
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkSubnetResourceId": "[if(variables('effectiveDeployNetworking'), createObject('value', reference('virtualNetwork').outputs.subnetResourceIds.value[3]), createObject('value', null()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9130777854443383909"
            },
            "name": "Web/Function Apps",
            "description": "This module deploys a Web or Function App."
          },
          "definitions": {
            "privateEndpointOutputType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the private endpoint."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the private endpoint."
                  }
                },
                "groupId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The group Id for the private endpoint Group."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fqdn": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "FQDN that resolves to private endpoint IP address."
                        }
                      },
                      "ipAddresses": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of private IP addresses of the private endpoint."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "The custom DNS configurations of the private endpoint."
                  }
                },
                "networkInterfaceResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "The IDs of the network interfaces associated with the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "configType": {
              "type": "object",
              "discriminator": {
                "propertyName": "name",
                "mapping": {
                  "appsettings": {
                    "$ref": "#/definitions/appSettingsConfigType"
                  },
                  "authsettings": {
                    "$ref": "#/definitions/authSettingsConfigType"
                  },
                  "authsettingsV2": {
                    "$ref": "#/definitions/authSettingsV2ConfigType"
                  },
                  "azurestorageaccounts": {
                    "$ref": "#/definitions/azureStorageAccountConfigType"
                  },
                  "backup": {
                    "$ref": "#/definitions/backupConfigType"
                  },
                  "connectionstrings": {
                    "$ref": "#/definitions/connectionStringsConfigType"
                  },
                  "logs": {
                    "$ref": "#/definitions/logsConfigType"
                  },
                  "metadata": {
                    "$ref": "#/definitions/metadataConfigType"
                  },
                  "pushsettings": {
                    "$ref": "#/definitions/pushSettingsConfigType"
                  },
                  "slotConfigNames": {
                    "$ref": "#/definitions/slotConfigNamesConfigType"
                  },
                  "web": {
                    "$ref": "#/definitions/webConfigType"
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a site configuration."
              }
            },
            "slotConfigNamesConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "slotConfigNames"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "appSettingNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of application settings names."
                      }
                    },
                    "azureStorageConfigNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of external Azure storage account identifiers."
                      }
                    },
                    "connectionStringNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of connection string names."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a slotConfigNames configuration."
              }
            },
            "slotType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the slot."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Location for all Resources."
                  }
                },
                "serverFarmResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the app service plan to use for the slot."
                  }
                },
                "managedEnvironmentResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                  }
                },
                "httpsOnly": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                  }
                },
                "clientAffinityEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If client affinity is enabled."
                  }
                },
                "appServiceEnvironmentResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the app service environment to use for this resource."
                  }
                },
                "managedIdentities": {
                  "$ref": "#/definitions/managedIdentityAllType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The managed identity definition for this resource."
                  }
                },
                "keyVaultAccessIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                  }
                },
                "storageAccountRequired": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Checks if Customer provided storage account is required."
                  }
                },
                "virtualNetworkSubnetResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                  }
                },
                "siteConfig": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/siteConfig"
                    },
                    "description": "Optional. The site config object."
                  },
                  "nullable": true
                },
                "functionAppConfig": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/functionAppConfig"
                    },
                    "description": "Optional. The Function App config object."
                  },
                  "nullable": true
                },
                "configs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/configType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The web site config."
                  }
                },
                "extensions": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The extensions configuration."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The lock settings of the service."
                  }
                },
                "privateEndpoints": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/privateEndpointSingleServiceType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Configuration details for private endpoints."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags of the resource."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "diagnosticSettings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/diagnosticSettingFullType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The diagnostic settings of the service."
                  }
                },
                "clientCertEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                  }
                },
                "clientCertExclusionPaths": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                  }
                },
                "clientCertMode": {
                  "type": "string",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/clientCertMode"
                    },
                    "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
                  },
                  "nullable": true
                },
                "cloningInfo": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/cloningInfo"
                    },
                    "description": "Optional. If specified during app creation, the app is cloned from a source app."
                  },
                  "nullable": true
                },
                "containerSize": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Size of the function container."
                  }
                },
                "customDomainVerificationId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                  }
                },
                "dailyMemoryTimeQuota": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                  }
                },
                "hostNameSslStates": {
                  "type": "array",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/hostNameSslStates"
                    },
                    "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                  },
                  "nullable": true
                },
                "hyperV": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Hyper-V sandbox."
                  }
                },
                "publicNetworkAccess": {
                  "type": "string",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/publicNetworkAccess"
                    },
                    "description": "Optional. Allow or block all public traffic."
                  },
                  "nullable": true
                },
                "redundancyMode": {
                  "type": "string",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/redundancyMode"
                    },
                    "description": "Optional. Site redundancy mode."
                  },
                  "nullable": true
                },
                "basicPublishingCredentialsPolicies": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The site publishing credential policy names which are associated with the site slot."
                  }
                },
                "vnetContentShareEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. To enable accessing content over virtual network."
                  }
                },
                "vnetImagePullEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. To enable pulling image over Virtual Network."
                  }
                },
                "vnetRouteAllEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                  }
                },
                "hybridConnectionRelays": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/hybridConnectionRelayType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Names of hybrid connection relays to connect app with."
                  }
                },
                "dnsConfiguration": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/dnsConfiguration"
                    },
                    "description": "Optional. Property to configure various DNS related settings for a site."
                  },
                  "nullable": true
                },
                "autoGeneratedDomainNameLabelScope": {
                  "type": "string",
                  "allowedValues": [
                    "NoReuse",
                    "ResourceGroupReuse",
                    "SubscriptionReuse",
                    "TenantReuse"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a slot."
              }
            },
            "extensionType": {
              "type": "object",
              "properties": {
                "properties": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                    },
                    "description": "Optional. Sets the properties."
                  },
                  "nullable": true
                }
              }
            },
            "basicPublishingCredentialsPolicyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "ftp",
                    "scm"
                  ],
                  "metadata": {
                    "description": "Required. The name of the resource."
                  }
                },
                "allow": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set to true to enable or false to disable a publishing method."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Location for all Resources."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a basic publishing credential policy."
              }
            },
            "hybridConnectionRelayType": {
              "type": "object",
              "properties": {
                "hybridConnectionResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the relay namespace hybrid connection."
                  }
                },
                "sendKeyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the authorization rule send key to use."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a hybrid connection relay."
              }
            },
            "_1.lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.privateEndpointCustomDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.privateEndpointIpConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.privateEndpointPrivateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the private DNS Zone Group config."
                        }
                      },
                      "privateDnsZoneResourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of the private DNS zone."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_1.roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "_2.scmIpSecurityRestrictionType": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "allowedValues": [
                    "Allow",
                    "Deny"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Allow or Deny access for this IP range."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP restriction rule description."
                  }
                },
                "headers": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "metadata": {
                      "description": "Required. A header."
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP restriction rule headers.\nX-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), all hosts(or lack of) are allowed.\n- A value is compared using ordinal-ignore-case (excluding port number).\n- Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com\nbut not the root domain contoso.com or multi-level foo.bar.contoso.com\n- Unicode host names are allowed but are converted to Punycode for matching.\n\nX-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.\n- If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.\n\nX-Azure-FDID and X-FD-HealthProbe.\nThe matching logic is exact match."
                  }
                },
                "ipAddress": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask (leading bit match). For CIDR, SubnetMask property must not be specified."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP restriction rule name."
                  }
                },
                "priority": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Priority of IP restriction rule."
                  }
                },
                "subnetMask": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Subnet mask for the range of IP addresses the restriction is valid for."
                  }
                },
                "subnetTrafficTag": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. (internal) Subnet traffic tag."
                  }
                },
                "tag": {
                  "type": "string",
                  "allowedValues": [
                    "Default",
                    "ServiceTag",
                    "XffProxy"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Defines what this IP filter will be used for. This is to support IP filtering on proxies."
                  }
                },
                "vnetSubnetResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Virtual network resource id."
                  }
                },
                "vnetTrafficTag": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. (internal) Vnet traffic tag."
                  }
                }
              },
              "metadata": {
                "description": "The type of a IP security restriction.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "_2.slowRequestBasedTriggerType": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Request Count."
                  }
                },
                "path": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Request Path."
                  }
                },
                "timeInterval": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Time interval."
                  }
                },
                "timeTaken": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Time taken."
                  }
                }
              },
              "metadata": {
                "description": "The type of aslow request based trigger.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "appSettingsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "appsettings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "storageAccountUseIdentityAuthentication": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                  }
                },
                "applicationInsightResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the application insight to leverage for this resource."
                  }
                },
                "retainCurrentAppSettings": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The retain the current app settings. Defaults to true."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. An app settings key-value pair."
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                  }
                }
              },
              "metadata": {
                "description": "The type of an app settings configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "authSettingsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "authsettings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "aadClaimsAuthorization": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets a JSON string containing the Azure AD Acl settings."
                      }
                    },
                    "additionalLoginParams": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                      }
                    },
                    "allowedAudiences": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Allowed audience values to consider when validating JSON Web Tokens issued by Azure Active Directory. Note that the `ClientID` value is always considered an allowed audience, regardless of this setting."
                      }
                    },
                    "allowedExternalRedirectUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                      }
                    },
                    "authFilePath": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The path of the config file containing auth settings. If the path is relative, base will the site's root directory."
                      }
                    },
                    "clientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                      }
                    },
                    "clientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key). This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users. Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                      }
                    },
                    "clientSecretCertificateThumbprint": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                      }
                    },
                    "clientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the client secret of the relying party application."
                      }
                    },
                    "configVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The ConfigVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of the control plane for Authentication / Authorization."
                      }
                    },
                    "defaultProvider": {
                      "type": "string",
                      "allowedValues": [
                        "AzureActiveDirectory",
                        "Facebook",
                        "Github",
                        "Google",
                        "MicrosoftAccount",
                        "Twitter"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                      }
                    },
                    "facebookAppId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The App ID of the Facebook app used for login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                      }
                    },
                    "facebookAppSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The App Secret of the Facebook app used for Facebook Login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                      }
                    },
                    "facebookAppSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the app secret used for Facebook Login."
                      }
                    },
                    "facebookOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. This setting is optional. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                      }
                    },
                    "gitHubClientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client Id of the GitHub app used for login. This setting is required for enabling Github login."
                      }
                    },
                    "gitHubClientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client Secret of the GitHub app used for Github Login. This setting is required for enabling Github login."
                      }
                    },
                    "gitHubClientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the client secret of the Github app used for GitHub Login."
                      }
                    },
                    "gitHubOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication."
                      }
                    },
                    "googleClientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OpenID Connect Client ID for the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                      }
                    },
                    "googleClientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The client secret associated with the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                      }
                    },
                    "googleClientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the client secret associated with the Google web application."
                      }
                    },
                    "googleOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                      }
                    },
                    "isAuthFromFile": {
                      "type": "string",
                      "allowedValues": [
                        "false",
                        "true"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. \"true\" if the auth config settings should be read from a file, \"false\" otherwise."
                      }
                    },
                    "issuer": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                      }
                    },
                    "microsoftAccountClientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 client ID that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                      }
                    },
                    "microsoftAccountClientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 client secret that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                      }
                    },
                    "microsoftAccountClientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication."
                      }
                    },
                    "microsoftAccountOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. This setting is optional. If not specified, \"wl.basic\" is used as the default scope. Microsoft Account Scopes and permissions [documentation](https://msdn.microsoft.com/en-us/library/dn631845.aspx)."
                      }
                    },
                    "runtimeVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                      }
                    },
                    "tokenRefreshExtensionHours": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                      }
                    },
                    "tokenStoreEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows. The default is `false`."
                      }
                    },
                    "twitterConsumerKey": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                      }
                    },
                    "twitterConsumerSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 1.0a consumer secret of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                      }
                    },
                    "twitterConsumerSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                      }
                    },
                    "unauthenticatedClientAction": {
                      "type": "string",
                      "allowedValues": [
                        "AllowAnonymous",
                        "RedirectToLoginPage"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                      }
                    },
                    "validateIssuer": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of an auth settings configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "authSettingsV2ConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "authsettingsV2"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "globalValidation": {
                      "type": "object",
                      "properties": {
                        "excludedPaths": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The paths for which unauthenticated flow would not be redirected to the login page."
                          }
                        },
                        "redirectToProvider": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                          }
                        },
                        "requireAuthentication": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the authentication flow is required by every request."
                          }
                        },
                        "unauthenticatedClientAction": {
                          "type": "string",
                          "allowedValues": [
                            "AllowAnonymous",
                            "RedirectToLoginPage",
                            "Return401",
                            "Return403"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings that determines the validation flow of users using App Service Authentication/Authorization."
                      }
                    },
                    "httpSettings": {
                      "type": "object",
                      "properties": {
                        "forwardProxy": {
                          "type": "object",
                          "properties": {
                            "convention": {
                              "type": "string",
                              "allowedValues": [
                                "Custom",
                                "NoProxy",
                                "Standard"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The convention used to determine the url of the request made."
                              }
                            },
                            "customHostHeaderName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the header containing the host of the request."
                              }
                            },
                            "customProtoHeaderName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the header containing the scheme of the request."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of a forward proxy used to make the requests."
                          }
                        },
                        "requireHttps": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `false` if the authentication/authorization responses not having the HTTPS scheme are permissible."
                          }
                        },
                        "routes": {
                          "type": "object",
                          "properties": {
                            "apiPrefix": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The prefix that should precede all the authentication/authorization paths."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the paths HTTP requests."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization."
                      }
                    },
                    "identityProviders": {
                      "type": "object",
                      "properties": {
                        "apple": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Apple provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Apple registration."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Apple provider."
                          }
                        },
                        "azureActiveDirectory": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Azure Active Directory provider should not be enabled despite the set registration."
                              }
                            },
                            "isAutoProvisioned": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling. This is an internal flag primarily intended to support the Azure Management Portal. Users should not read or write to this property."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "disableWWWAuthenticate": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `true` if the www-authenticate provider should be omitted from the request."
                                  }
                                },
                                "loginParameters": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                  }
                                },
                                "clientSecretCertificateIssuer": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                  }
                                },
                                "clientSecretCertificateSubjectAlternativeName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                  }
                                },
                                "clientSecretCertificateThumbprint": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The app setting name that contains the client secret of the relying party application."
                                  }
                                },
                                "openIdIssuer": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory app registration."
                              }
                            },
                            "validation": {
                              "type": "object",
                              "properties": {
                                "allowedAudiences": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The list of audiences that can make successful authentication/authorization requests."
                                  }
                                },
                                "defaultAuthorizationPolicy": {
                                  "type": "object",
                                  "properties": {
                                    "allowedApplications": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory allowed applications."
                                      }
                                    },
                                    "allowedPrincipals": {
                                      "type": "object",
                                      "properties": {
                                        "groups": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of the allowed groups."
                                          }
                                        },
                                        "identities": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of the allowed identities."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory allowed principals."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the default authorization policy."
                                  }
                                },
                                "jwtClaimChecks": {
                                  "type": "object",
                                  "properties": {
                                    "allowedClientApplications": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of the allowed client applications."
                                      }
                                    },
                                    "allowedGroups": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of the allowed groups."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the checks that should be made while validating the JWT Claims."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Azure Active directory provider."
                          }
                        },
                        "azureStaticWebApps": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Azure Static Web Apps provider should not be enabled despite the set registration."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Static Web Apps registration."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Azure Static Web Apps provider."
                          }
                        },
                        "customOpenIdConnectProviders": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Set to `false` if the custom Open ID provider provider should not be enabled."
                                }
                              },
                              "login": {
                                "type": "object",
                                "properties": {
                                  "nameClaimType": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the claim that contains the users name."
                                    }
                                  },
                                  "scopes": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of the scopes that should be requested while authenticating."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The configuration settings of the login flow of the custom Open ID Connect provider."
                                }
                              },
                              "registration": {
                                "type": "object",
                                "properties": {
                                  "clientCredential": {
                                    "type": "object",
                                    "properties": {
                                      "clientSecretSettingName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The app setting that contains the client secret for the custom Open ID Connect provider."
                                        }
                                      },
                                      "method": {
                                        "type": "string",
                                        "allowedValues": [
                                          "ClientSecretPost"
                                        ],
                                        "metadata": {
                                          "description": "Required. The method that should be used to authenticate the user."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The authentication credentials of the custom Open ID Connect provider."
                                    }
                                  },
                                  "clientId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The client id of the custom Open ID Connect provider."
                                    }
                                  },
                                  "openIdConnectConfiguration": {
                                    "type": "object",
                                    "properties": {
                                      "authorizationEndpoint": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint to be used to make an authorization request."
                                        }
                                      },
                                      "certificationUri": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint that provides the keys necessary to validate the token."
                                        }
                                      },
                                      "issuer": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint that issues the token."
                                        }
                                      },
                                      "tokenEndpoint": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint to be used to request a token."
                                        }
                                      },
                                      "wellKnownOpenIdConfiguration": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint that contains all the configuration endpoints for the provider."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The configuration settings of the endpoints used for the custom Open ID Connect provider."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The configuration settings of the app registration for the custom Open ID Connect provider."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The alias of each custom Open ID Connect provider."
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The map of the name of the alias of each custom Open ID Connect provider to the configuration settings of the custom Open ID Connect provider."
                          }
                        },
                        "facebook": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Facebook provider should not be enabled despite the set registration."
                              }
                            },
                            "graphApiVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The version of the Facebook api to be used while logging in."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "appId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The App ID of the app used for login."
                                  }
                                },
                                "appSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the app secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the Facebook provider."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Facebook provider."
                          }
                        },
                        "gitHub": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the GitHub provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the GitHub provider."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the GitHub provider."
                          }
                        },
                        "google": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Google provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the Google provider."
                              }
                            },
                            "validation": {
                              "type": "object",
                              "properties": {
                                "allowedAudiences": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Google provider."
                          }
                        },
                        "legacyMicrosoftAccount": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the legacy Microsoft Account provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the legacy Microsoft Account provider."
                              }
                            },
                            "validation": {
                              "type": "object",
                              "properties": {
                                "allowedAudiences": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the legacy Microsoft Account provider token validation flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the legacy Microsoft Account provider."
                          }
                        },
                        "twitter": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Twitter provider should not be enabled despite the set registration."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "consumerKey": {
                                  "type": "securestring",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                  }
                                },
                                "consumerSecretSettingName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the Twitter provider."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Twitter provider."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization."
                      }
                    },
                    "login": {
                      "type": "object",
                      "properties": {
                        "allowedExternalRedirectUrls": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                          }
                        },
                        "cookieExpiration": {
                          "type": "object",
                          "properties": {
                            "convention": {
                              "type": "string",
                              "allowedValues": [
                                "FixedTime",
                                "IdentityProviderDerived"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The convention used when determining the session cookie's expiration."
                              }
                            },
                            "timeToExpiration": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The time after the request is made when the session cookie should expire."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the session cookie's expiration."
                          }
                        },
                        "nonce": {
                          "type": "object",
                          "properties": {
                            "nonceExpirationInterval": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The time after the request is made when the nonce should expire."
                              }
                            },
                            "validateNonce": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the nonce should not be validated while completing the login flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the nonce used in the login flow."
                          }
                        },
                        "preserveUrlFragmentsForLogins": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the fragments from the request are preserved after the login request is made."
                          }
                        },
                        "routes": {
                          "type": "object",
                          "properties": {
                            "logoutEndpoint": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The endpoint at which a logout request should be made."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The routes that specify the endpoints used for login and logout requests."
                          }
                        },
                        "tokenStore": {
                          "type": "object",
                          "properties": {
                            "azureBlobStorage": {
                              "type": "object",
                              "properties": {
                                "sasUrlSettingName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the app setting containing the SAS URL of the blob storage containing the tokens."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the storage of the tokens if blob storage is used."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows."
                              }
                            },
                            "fileSystem": {
                              "type": "object",
                              "properties": {
                                "directory": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The directory in which the tokens will be stored."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the storage of the tokens if a file system is used."
                              }
                            },
                            "tokenRefreshExtensionHours": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the token store."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the login flow of users using App Service Authentication/Authorization."
                      }
                    },
                    "platform": {
                      "type": "object",
                      "properties": {
                        "configFilePath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The path of the config file containing auth settings if they come from a file. If the path is relative, base will the site's root directory."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                          }
                        },
                        "runtimeVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the platform of App Service Authentication/Authorization."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of an authSettingsV2 configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "azureStorageAccountConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "azurestorageaccounts"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "accessKey": {
                        "type": "securestring",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Access key for the storage account."
                        }
                      },
                      "accountName": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of the storage account."
                        }
                      },
                      "mountPath": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Path to mount the storage within the site's runtime environment."
                        }
                      },
                      "protocol": {
                        "type": "string",
                        "allowedValues": [
                          "Http",
                          "Nfs",
                          "Smb"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Mounting protocol to use for the storage account."
                        }
                      },
                      "shareName": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of the file share (container name, for Blob storage)."
                        }
                      },
                      "type": {
                        "type": "string",
                        "allowedValues": [
                          "AzureBlob",
                          "AzureFiles"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Type of storage."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Azure Storage Info configuration."
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of an Azure Storage Account configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "backupConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "backup"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "backupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Name of the backup."
                      }
                    },
                    "backupSchedule": {
                      "type": "object",
                      "properties": {
                        "frequencyInterval": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)."
                          }
                        },
                        "frequencyUnit": {
                          "type": "string",
                          "allowedValues": [
                            "Day",
                            "Hour"
                          ],
                          "metadata": {
                            "description": "Required. The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)."
                          }
                        },
                        "keepAtLeastOneBackup": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Set to `True` if the retention policy should always keep at least one backup in the storage account, regardless how old it is."
                          }
                        },
                        "retentionPeriodInDays": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. After how many days backups should be deleted."
                          }
                        },
                        "startTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. When the schedule should start working."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Schedule for the backup if it is executed periodically."
                      }
                    },
                    "databases": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connectionString": {
                            "type": "securestring",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one."
                            }
                          },
                          "connectionStringName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options."
                            }
                          },
                          "databaseType": {
                            "type": "string",
                            "allowedValues": [
                              "LocalMySql",
                              "MySql",
                              "PostgreSql",
                              "SqlAzure"
                            ],
                            "metadata": {
                              "description": "Required. Database type (e.g. SqlAzure / MySql)."
                            }
                          },
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the setting."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Databases included in the backup."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `True` if the backup schedule is enabled (must be included in that case), `false` if the backup schedule should be disabled."
                      }
                    },
                    "storageAccountUrl": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. SAS URL to the container."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type for a backup configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "connectionStringsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "connectionstrings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "allowedValues": [
                          "ApiHub",
                          "Custom",
                          "DocDb",
                          "EventHub",
                          "MySql",
                          "NotificationHub",
                          "PostgreSQL",
                          "RedisCache",
                          "SQLAzure",
                          "SQLServer",
                          "ServiceBus"
                        ],
                        "metadata": {
                          "description": "Required. Type of database."
                        }
                      },
                      "value": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Value of pair."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the connection string setting."
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type for a connection string configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "logsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "logs"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "applicationLogs": {
                      "type": "object",
                      "properties": {
                        "azureBlobStorage": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "allowedValues": [
                                "Error",
                                "Information",
                                "Off",
                                "Verbose",
                                "Warning"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Log level."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                              }
                            },
                            "sasUrl": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application logs to blob storage configuration."
                          }
                        },
                        "azureTableStorage": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "allowedValues": [
                                "Error",
                                "Information",
                                "Off",
                                "Verbose",
                                "Warning"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Log level."
                              }
                            },
                            "sasUrl": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. SAS URL to an Azure table with add/query/delete permissions."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application logs to azure table storage configuration."
                          }
                        },
                        "fileSystem": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "allowedValues": [
                                "Error",
                                "Information",
                                "Off",
                                "Verbose",
                                "Warning"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Log level."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application logs to file system configuration."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application Logs for Azure configuration."
                      }
                    },
                    "detailedErrorMessages": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Detailed error messages configuration."
                      }
                    },
                    "failedRequestsTracing": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Failed requests tracing configuration."
                      }
                    },
                    "httpLogs": {
                      "type": "object",
                      "properties": {
                        "azureBlobStorage": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                              }
                            },
                            "sasUrl": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Http logs to azure blob storage configuration."
                          }
                        },
                        "fileSystem": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Retention in days. Remove files older than X days. 0 or lower means no retention."
                              }
                            },
                            "retentionInMb": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 25,
                              "maxValue": 100,
                              "metadata": {
                                "description": "Optional. Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Http logs to file system configuration."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. HTTP logs configuration."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of a logs configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "metadataConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "metadata"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The metadata key value pair."
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of a metadata configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "privateEndpointSingleServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private Endpoint."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The location to deploy the Private Endpoint to."
                  }
                },
                "privateLinkServiceConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private link connection to create."
                  }
                },
                "service": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                  }
                },
                "resourceGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                  }
                },
                "privateDnsZoneGroup": {
                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                  }
                },
                "isManualConnection": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If Manual Private Link Connection is required."
                  }
                },
                "manualConnectionRequestMessage": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 140,
                  "metadata": {
                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Custom DNS configurations."
                  }
                },
                "ipConfigurations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                  }
                },
                "applicationSecurityGroupResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                  }
                },
                "customNetworkInterfaceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/_1.lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/privateEndpoints@2024-07-01#properties/tags"
                    },
                    "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable/Disable usage telemetry for module."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "pushSettingsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "pushsettings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "dynamicTagsJson": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                      }
                    },
                    "isPushEnabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                      }
                    },
                    "tagsRequiringAuth": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                      }
                    },
                    "tagWhitelistJson": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of a pushSettings configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "webConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "web"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "acrUseManagedIdentityCreds": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Flag to use Managed Identity Creds for ACR pull."
                      }
                    },
                    "acrUserManagedIdentityID": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If using user managed identity, the user managed identity ClientId."
                      }
                    },
                    "alwaysOn": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if 'Always On' is enabled."
                      }
                    },
                    "apiDefinition": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The URL of the API definition."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Information about the formal API definition for the app."
                      }
                    },
                    "apiManagementConfig": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. APIM-Api Identifier."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure API management settings linked to the app."
                      }
                    },
                    "appCommandLine": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. App command line to launch."
                      }
                    },
                    "appSettings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Name of the pair."
                            }
                          },
                          "value": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Value of the pair."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application settings."
                      }
                    },
                    "autoHealEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if Auto Heal is enabled."
                      }
                    },
                    "autoHealRules": {
                      "type": "object",
                      "properties": {
                        "actions": {
                          "type": "object",
                          "properties": {
                            "actionType": {
                              "type": "string",
                              "allowedValues": [
                                "CustomAction",
                                "LogEvent",
                                "Recycle"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Predefined action to be taken."
                              }
                            },
                            "customAction": {
                              "type": "object",
                              "properties": {
                                "exe": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Executable to be run."
                                  }
                                },
                                "parameters": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Parameters for the executable."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom action to be taken."
                              }
                            },
                            "minProcessExecutionTime": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Minimum time the process must execute before taking the action."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Actions to be executed when a rule is triggered."
                          }
                        },
                        "triggers": {
                          "type": "object",
                          "properties": {
                            "privateBytesInKB": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on private bytes."
                              }
                            },
                            "requests": {
                              "type": "object",
                              "properties": {
                                "count": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Request Count."
                                  }
                                },
                                "timeInterval": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Time interval."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on total requests."
                              }
                            },
                            "slowRequests": {
                              "$ref": "#/definitions/_2.slowRequestBasedTriggerType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on request execution time."
                              }
                            },
                            "slowRequestsWithPath": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/_2.slowRequestBasedTriggerType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on multiple Slow Requests Rule with path."
                              }
                            },
                            "statusCodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "count": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Count."
                                    }
                                  },
                                  "path": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Path."
                                    }
                                  },
                                  "status": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. HTTP status code."
                                    }
                                  },
                                  "subStatus": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Sub Status."
                                    }
                                  },
                                  "timeInterval": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Time interval."
                                    }
                                  },
                                  "win32Status": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Win32 error code."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on status codes."
                              }
                            },
                            "statusCodesRange": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "count": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Count."
                                    }
                                  },
                                  "path": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Path."
                                    }
                                  },
                                  "statusCodes": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. HTTP status code."
                                    }
                                  },
                                  "timeInterval": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Time interval."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on status codes ranges."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Conditions that describe when to execute the auto-heal actions."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Auto Heal rules."
                      }
                    },
                    "autoSwapSlotName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Auto-swap slot name."
                      }
                    },
                    "azureStorageAccounts": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "accessKey": {
                            "type": "securestring",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Access key for the storage account."
                            }
                          },
                          "accountName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the storage account."
                            }
                          },
                          "mountPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Path to mount the storage within the site's runtime environment."
                            }
                          },
                          "protocol": {
                            "type": "string",
                            "allowedValues": [
                              "Http",
                              "Nfs",
                              "Smb"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Mounting protocol to use for the storage account."
                            }
                          },
                          "shareName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the file share (container name, for Blob storage)."
                            }
                          },
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "AzureBlob",
                              "AzureFiles"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Type of storage."
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. A storage account configuration."
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of Azure Storage Accounts."
                      }
                    },
                    "connectionStrings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connectionString": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Connection string value."
                            }
                          },
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of connection string."
                            }
                          },
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "ApiHub",
                              "Custom",
                              "DocDb",
                              "EventHub",
                              "MySql",
                              "NotificationHub",
                              "PostgreSQL",
                              "RedisCache",
                              "SQLAzure",
                              "SQLServer",
                              "ServiceBus"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Type of database."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Connection strings."
                      }
                    },
                    "cors": {
                      "type": "object",
                      "properties": {
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use \"*\" to allow all."
                          }
                        },
                        "supportCredentials": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Gets or sets whether CORS requests with credentials are allowed. See [ref](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials) for more details."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Cross-Origin Resource Sharing (CORS) settings."
                      }
                    },
                    "defaultDocuments": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Default documents."
                      }
                    },
                    "detailedErrorLoggingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if detailed error logging is enabled."
                      }
                    },
                    "documentRoot": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Document root."
                      }
                    },
                    "elasticWebAppScaleLimit": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to apps in plans where ElasticScaleEnabled is `true`."
                      }
                    },
                    "experiments": {
                      "type": "object",
                      "properties": {
                        "rampUpRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "actionHostName": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net."
                                }
                              },
                              "changeDecisionCallbackUrl": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified."
                                }
                              },
                              "changeIntervalInMinutes": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Specifies interval in minutes to reevaluate ReroutePercentage."
                                }
                              },
                              "changeStep": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. In auto ramp up scenario this is the step to add/remove from `ReroutePercentage` until it reaches `MinReroutePercentage` or `MaxReroutePercentage`. Site metrics are checked every N minutes specified in `ChangeIntervalInMinutes`. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in `ChangeDecisionCallbackUrl`."
                                }
                              },
                              "maxReroutePercentage": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Specifies upper boundary below which ReroutePercentage will stay."
                                }
                              },
                              "minReroutePercentage": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Specifies lower boundary above which ReroutePercentage will stay."
                                }
                              },
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                }
                              },
                              "reroutePercentage": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Percentage of the traffic which will be redirected to `ActionHostName`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of ramp-up rules."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. This is work around for polymorphic types."
                      }
                    },
                    "ftpsState": {
                      "type": "string",
                      "allowedValues": [
                        "AllAllowed",
                        "Disabled",
                        "FtpsOnly"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. State of FTP / FTPS service."
                      }
                    },
                    "functionAppScaleLimit": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to the Consumption and Elastic Premium Plans."
                      }
                    },
                    "functionsRuntimeScaleMonitoringEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled, the ScaleController will not monitor event sources directly, but will instead call to the runtime to get scale status."
                      }
                    },
                    "handlerMappings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "arguments": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Command-line arguments to be passed to the script processor."
                            }
                          },
                          "extension": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Requests with this extension will be handled using the specified FastCGI application."
                            }
                          },
                          "scriptProcessor": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The absolute path to the FastCGI application."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Handler mappings."
                      }
                    },
                    "healthCheckPath": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Health check path."
                      }
                    },
                    "http20Enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Allow clients to connect over http2.0."
                      }
                    },
                    "httpLoggingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if HTTP logging is enabled."
                      }
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/_2.scmIpSecurityRestrictionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IP security restrictions for main."
                      }
                    },
                    "ipSecurityRestrictionsDefaultAction": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Default action for main access restriction if no rules are matched."
                      }
                    },
                    "javaContainer": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Java container."
                      }
                    },
                    "javaContainerVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Java container version."
                      }
                    },
                    "javaVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Java version."
                      }
                    },
                    "keyVaultReferenceIdentity": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Identity to use for Key Vault Reference authentication."
                      }
                    },
                    "limits": {
                      "type": "object",
                      "properties": {
                        "maxDiskSizeInMb": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum allowed disk size usage in MB."
                          }
                        },
                        "maxMemoryInMb": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum allowed memory usage in MB."
                          }
                        },
                        "maxPercentageCpu": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum allowed CPU usage percentage."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Site limits."
                      }
                    },
                    "linuxFxVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Linux App Framework and version."
                      }
                    },
                    "loadBalancing": {
                      "type": "string",
                      "allowedValues": [
                        "LeastRequests",
                        "LeastRequestsWithTieBreaker",
                        "LeastResponseTime",
                        "PerSiteRoundRobin",
                        "RequestHash",
                        "WeightedRoundRobin",
                        "WeightedTotalTraffic"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Site load balancing."
                      }
                    },
                    "localMySqlEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to enable local MySQL."
                      }
                    },
                    "logsDirectorySizeLimit": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. HTTP logs directory size limit."
                      }
                    },
                    "managedPipelineMode": {
                      "type": "string",
                      "allowedValues": [
                        "Classic",
                        "Integrated"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Managed pipeline mode."
                      }
                    },
                    "managedServiceIdentityId": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Managed Service Identity Id."
                      }
                    },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Pair name."
                            }
                          },
                          "value": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Pair Value."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application metadata. This property cannot be retrieved, since it may contain secrets."
                      }
                    },
                    "minimumElasticInstanceCount": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "maxValue": 20,
                      "metadata": {
                        "description": "Optional. Number of minimum instance count for a site. This setting only applies to the Elastic Plans."
                      }
                    },
                    "minTlsCipherSuite": {
                      "type": "string",
                      "allowedValues": [
                        "TLS_AES_128_GCM_SHA256",
                        "TLS_AES_256_GCM_SHA384",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_RSA_WITH_AES_256_CBC_SHA256",
                        "TLS_RSA_WITH_AES_256_GCM_SHA384"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The minimum strength TLS cipher suite allowed for an application."
                      }
                    },
                    "minTlsVersion": {
                      "type": "string",
                      "allowedValues": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. MinTlsVersion: configures the minimum version of TLS required for SSL requests."
                      }
                    },
                    "netFrameworkVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. .NET Framework version."
                      }
                    },
                    "nodeVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of Node.js."
                      }
                    },
                    "numberOfWorkers": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Number of workers."
                      }
                    },
                    "phpVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of PHP."
                      }
                    },
                    "powerShellVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of PowerShell."
                      }
                    },
                    "preWarmedInstanceCount": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "maxValue": 10,
                      "metadata": {
                        "description": "Optional. Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Property to allow or block all public traffic."
                      }
                    },
                    "publishingUsername": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Publishing user name."
                      }
                    },
                    "push": {
                      "type": "object",
                      "properties": {
                        "kind": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Kind of resource."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "dynamicTagsJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                              }
                            },
                            "isPushEnabled": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                              }
                            },
                            "tagsRequiringAuth": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                              }
                            },
                            "tagWhitelistJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. PushSettings resource specific properties."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Push endpoint settings."
                      }
                    },
                    "pythonVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of Python."
                      }
                    },
                    "remoteDebuggingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if remote debugging is enabled."
                      }
                    },
                    "remoteDebuggingVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Remote debugging version."
                      }
                    },
                    "requestTracingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if request tracing is enabled."
                      }
                    },
                    "requestTracingExpirationTime": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Request tracing expiration time."
                      }
                    },
                    "scmIpSecurityRestrictions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/_2.scmIpSecurityRestrictionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IP security restrictions for scm."
                      }
                    },
                    "scmIpSecurityRestrictionsDefaultAction": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Default action for scm access restriction if no rules are matched."
                      }
                    },
                    "scmIpSecurityRestrictionsUseMain": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IP security restrictions for scm to use main."
                      }
                    },
                    "scmMinTlsVersion": {
                      "type": "string",
                      "allowedValues": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site."
                      }
                    },
                    "scmType": {
                      "type": "string",
                      "allowedValues": [
                        "BitbucketGit",
                        "BitbucketHg",
                        "CodePlexGit",
                        "CodePlexHg",
                        "Dropbox",
                        "ExternalGit",
                        "ExternalHg",
                        "GitHub",
                        "LocalGit",
                        "None",
                        "OneDrive",
                        "Tfs",
                        "VSO",
                        "VSTSRM"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. SCM type."
                      }
                    },
                    "tracingOptions": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tracing options."
                      }
                    },
                    "use32BitWorkerProcess": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to use 32-bit worker process."
                      }
                    },
                    "virtualApplications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "physicalPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Physical path."
                            }
                          },
                          "preloadEnabled": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Set to `true` if preloading is enabled."
                            }
                          },
                          "virtualDirectories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "physicalPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Physical path."
                                  }
                                },
                                "virtualPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Path to virtual application."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Virtual directories for virtual application."
                            }
                          },
                          "virtualPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Virtual path."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual applications."
                      }
                    },
                    "vnetName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual Network name."
                      }
                    },
                    "vnetPrivatePortsCount": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The number of private ports assigned to this app. These will be assigned dynamically on runtime."
                      }
                    },
                    "vnetRouteAllEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                      }
                    },
                    "websiteTimeZone": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see [ref](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones."
                      }
                    },
                    "webSocketsEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if WebSocket is enabled."
                      }
                    },
                    "windowsFxVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Xenon App Framework and version."
                      }
                    },
                    "xManagedServiceIdentityId": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Explicit Managed Service Identity Id."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "description": "The type of a web configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "slot/main.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "functionapp,linux",
                "functionapp,workflowapp",
                "functionapp,workflowapp,linux",
                "functionapp,linux,container",
                "functionapp,linux,container,azurecontainerapps",
                "app,linux",
                "app",
                "linux,api",
                "api",
                "app,linux,container",
                "app,container,windows"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "serverFarmResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the app service plan to use for the site. Set as empty string when using a managed environment id for container apps."
              }
            },
            "managedEnvironmentResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "clientAffinityProxyEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. To enable client affinity; false to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is true."
              }
            },
            "clientAffinityPartitioningEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. To enable client affinity partitioning using CHIPS cookies, this will add the partitioned property to the affinity cookies; false to stop sending partitioned affinity cookies. Default is false."
              }
            },
            "appServiceEnvironmentResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "keyVaultAccessIdentityResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
              }
            },
            "storageAccountRequired": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Checks if Customer provided storage account is required."
              }
            },
            "virtualNetworkSubnetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
              }
            },
            "scmSiteAlsoStopped": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Stop SCM (KUDU) site when the app is stopped."
              }
            },
            "siteConfig": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/siteConfig"
                },
                "description": "Optional. The site config object. The defaults are set to the following values: alwaysOn: true, minTlsVersion: '1.2', ftpsState: 'FtpsOnly'."
              },
              "defaultValue": {
                "alwaysOn": true,
                "minTlsVersion": "1.2",
                "ftpsState": "FtpsOnly"
              }
            },
            "outboundVnetRouting": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-11-01#properties/properties/properties/outboundVnetRouting"
                },
                "description": "Optional. The outbound VNET routing configuration for the site."
              },
              "nullable": true
            },
            "configs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/configType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The web site config."
              }
            },
            "functionAppConfig": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/functionAppConfig"
                },
                "description": "Optional. The Function App configuration object."
              },
              "nullable": true
            },
            "extensions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/extensionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The extensions configuration."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointSingleServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "slots": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/slotType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration for deployment slots for an app."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-11-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "clientCertEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
              }
            },
            "clientCertExclusionPaths": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Client certificate authentication comma-separated exclusion paths."
              }
            },
            "clientCertMode": {
              "type": "string",
              "defaultValue": "Optional",
              "allowedValues": [
                "Optional",
                "OptionalInteractiveUser",
                "Required"
              ],
              "metadata": {
                "description": "Optional. This composes with ClientCertEnabled setting.\n- ClientCertEnabled=false means ClientCert is ignored.\n- ClientCertEnabled=true and ClientCertMode=Required means ClientCert is required.\n- ClientCertEnabled=true and ClientCertMode=Optional means ClientCert is optional or accepted.\n"
              }
            },
            "cloningInfo": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/cloningInfo"
                },
                "description": "Optional. If specified during app creation, the app is cloned from a source app."
              },
              "nullable": true
            },
            "containerSize": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Size of the function container."
              }
            },
            "dailyMemoryTimeQuota": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Setting this value to false disables the app (takes the app offline)."
              }
            },
            "hostNameSslStates": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/hostNameSslStates"
                },
                "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
              },
              "nullable": true
            },
            "hyperV": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Hyper-V sandbox."
              }
            },
            "redundancyMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "ActiveActive",
                "Failover",
                "GeoRedundant",
                "Manual",
                "None"
              ],
              "metadata": {
                "description": "Optional. Site redundancy mode."
              }
            },
            "basicPublishingCredentialsPolicies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The site publishing credential policy names which are associated with the sites."
              }
            },
            "hybridConnectionRelays": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hybridConnectionRelayType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Names of hybrid connection relays to connect app with."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
              }
            },
            "e2eEncryptionEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. End to End Encryption Setting."
              }
            },
            "dnsConfiguration": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/dnsConfiguration"
                },
                "description": "Optional. Property to configure various DNS related settings for a site."
              },
              "nullable": true
            },
            "autoGeneratedDomainNameLabelScope": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "NoReuse",
                "ResourceGroupReuse",
                "SubscriptionReuse",
                "TenantReuse"
              ],
              "metadata": {
                "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "managedEnvironmentSupportedKinds": [
              "functionapp,linux,container,azurecontainerapps"
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.web-site.{0}.{1}', replace('0.19.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "app": {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentResourceId'))), parameters('managedEnvironmentResourceId'), null())]",
                "serverFarmId": "[if(and(contains(variables('managedEnvironmentSupportedKinds'), parameters('kind')), not(empty(parameters('managedEnvironmentResourceId')))), null(), parameters('serverFarmResourceId'))]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "clientAffinityProxyEnabled": "[parameters('clientAffinityProxyEnabled')]",
                "clientAffinityPartitioningEnabled": "[parameters('clientAffinityPartitioningEnabled')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                "storageAccountRequired": "[parameters('storageAccountRequired')]",
                "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetResourceId')]",
                "siteConfig": "[parameters('siteConfig')]",
                "functionAppConfig": "[parameters('functionAppConfig')]",
                "clientCertEnabled": "[parameters('clientCertEnabled')]",
                "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                "clientCertMode": "[parameters('clientCertMode')]",
                "cloningInfo": "[parameters('cloningInfo')]",
                "containerSize": "[parameters('containerSize')]",
                "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                "enabled": "[parameters('enabled')]",
                "hostNameSslStates": "[parameters('hostNameSslStates')]",
                "hyperV": "[parameters('hyperV')]",
                "redundancyMode": "[parameters('redundancyMode')]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', 'Enabled'))]",
                "scmSiteAlsoStopped": "[parameters('scmSiteAlsoStopped')]",
                "endToEndEncryptionEnabled": "[parameters('e2eEncryptionEnabled')]",
                "dnsConfiguration": "[parameters('dnsConfiguration')]",
                "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]",
                "outboundVnetRouting": "[parameters('outboundVnetRouting')]"
              }
            },
            "app_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_diagnosticSettings": {
              "copy": {
                "name": "app_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_roleAssignments": {
              "copy": {
                "name": "app_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_config": {
              "copy": {
                "name": "app_config",
                "count": "[length(coalesce(parameters('configs'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Site-Config-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('configs'), createArray())[copyIndex()].name]"
                  },
                  "applicationInsightResourceId": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'applicationInsightResourceId')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountResourceId')]"
                  },
                  "storageAccountUseIdentityAuthentication": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication')]"
                  },
                  "properties": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'properties')]"
                  },
                  "currentAppSettings": "[if(coalesce(tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'retainCurrentAppSettings'), and(true(), equals(coalesce(parameters('configs'), createArray())[copyIndex()].name, 'appsettings'))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites', parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]",
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1778837761091674342"
                    },
                    "name": "Site App Settings",
                    "description": "This module deploys a Site App Setting."
                  },
                  "parameters": {
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings",
                        "authsettings",
                        "authsettingsV2",
                        "azurestorageaccounts",
                        "backup",
                        "connectionstrings",
                        "logs",
                        "metadata",
                        "pushsettings",
                        "slotConfigNames",
                        "web"
                      ],
                      "metadata": {
                        "description": "Required. The name of the config."
                      }
                    },
                    "properties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The properties of the config. Note: This parameter is highly dependent on the config type, defined by its name."
                      }
                    },
                    "storageAccountUseIdentityAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "applicationInsightResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the application insight to leverage for this resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "currentAppSettings": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The key-values pairs of the current app settings."
                        }
                      },
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The current app settings."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.web-siteconfig.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "applicationInsights": {
                      "condition": "[not(empty(parameters('applicationInsightResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "subscriptionId": "[split(parameters('applicationInsightResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('applicationInsightResourceId'), '/')[4]]",
                      "name": "[last(split(parameters('applicationInsightResourceId'), '/'))]"
                    },
                    "storageAccount": {
                      "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2025-01-01",
                      "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                    },
                    "app": {
                      "existing": true,
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2023-12-01",
                      "name": "[parameters('appName')]"
                    },
                    "config": {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": "[union(parameters('currentAppSettings'), parameters('properties'), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(parameters('storageAccountResourceId'), '/')), listKeys('storageAccount', '2025-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), createObject('AzureWebJobsStorage__accountName', last(split(parameters('storageAccountResourceId'), '/')), 'AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob, 'AzureWebJobsStorage__queueServiceUri', reference('storageAccount').primaryEndpoints.queue, 'AzureWebJobsStorage__tableServiceUri', reference('storageAccount').primaryEndpoints.table), createObject())), if(not(empty(parameters('applicationInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString), createObject()))]",
                      "dependsOn": [
                        "applicationInsights",
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the site config."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_extensions": {
              "copy": {
                "name": "app_extensions",
                "count": "[length(coalesce(parameters('extensions'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Site-Extension-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "properties": {
                    "value": "[coalesce(parameters('extensions'), createArray())[copyIndex()].properties]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "12250922242596344591"
                    },
                    "name": "Site Deployment Extension ",
                    "description": "This module deploys a Site extension for MSDeploy."
                  },
                  "parameters": {
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent site resource."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "MSDeploy",
                      "allowedValues": [
                        "MSDeploy"
                      ],
                      "metadata": {
                        "description": "Optional. The name of the extension."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "MSDeploy",
                      "allowedValues": [
                        "MSDeploy"
                      ],
                      "metadata": {
                        "description": "Optional. The kind of extension."
                      }
                    },
                    "properties": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                        },
                        "description": "Optional. Sets the properties."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "app": {
                      "existing": true,
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2024-04-01",
                      "name": "[parameters('appName')]"
                    },
                    "msdeploy": {
                      "type": "Microsoft.Web/sites/extensions",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "kind": "[parameters('kind')]",
                      "properties": "[parameters('properties')]"
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the extension was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_slots": {
              "copy": {
                "name": "app_slots",
                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('slots'), createArray())[copyIndex()].name]"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kind": {
                    "value": "[parameters('kind')]"
                  },
                  "serverFarmResourceId": "[if(and(contains(variables('managedEnvironmentSupportedKinds'), parameters('kind')), not(empty(parameters('managedEnvironmentResourceId')))), createObject('value', null()), createObject('value', parameters('serverFarmResourceId')))]",
                  "managedEnvironmentResourceId": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedEnvironmentResourceId'), parameters('managedEnvironmentResourceId'))]"
                  },
                  "httpsOnly": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'httpsOnly'), parameters('httpsOnly'))]"
                  },
                  "appServiceEnvironmentResourceId": {
                    "value": "[parameters('appServiceEnvironmentResourceId')]"
                  },
                  "clientAffinityEnabled": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientAffinityEnabled'), parameters('clientAffinityEnabled'))]"
                  },
                  "managedIdentities": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedIdentities'), parameters('managedIdentities'))]"
                  },
                  "keyVaultAccessIdentityResourceId": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'keyVaultAccessIdentityResourceId'), parameters('keyVaultAccessIdentityResourceId'))]"
                  },
                  "storageAccountRequired": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountRequired'), parameters('storageAccountRequired'))]"
                  },
                  "virtualNetworkSubnetResourceId": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'virtualNetworkSubnetResourceId'), parameters('virtualNetworkSubnetResourceId'))]"
                  },
                  "siteConfig": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'siteConfig'), parameters('siteConfig'))]"
                  },
                  "functionAppConfig": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'functionAppConfig'), parameters('functionAppConfig'))]"
                  },
                  "configs": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'configs'), parameters('configs'))]"
                  },
                  "extensions": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'extensions'), parameters('extensions'))]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'diagnosticSettings')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "basicPublishingCredentialsPolicies": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'basicPublishingCredentialsPolicies'), parameters('basicPublishingCredentialsPolicies'))]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateEndpoints": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'), createArray())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "clientCertEnabled": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertEnabled')]"
                  },
                  "clientCertExclusionPaths": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertExclusionPaths')]"
                  },
                  "clientCertMode": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertMode')]"
                  },
                  "cloningInfo": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'cloningInfo')]"
                  },
                  "containerSize": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'containerSize')]"
                  },
                  "customDomainVerificationId": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'customDomainVerificationId')]"
                  },
                  "dailyMemoryTimeQuota": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dailyMemoryTimeQuota')]"
                  },
                  "enabled": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enabled')]"
                  },
                  "hostNameSslStates": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hostNameSslStates')]"
                  },
                  "hyperV": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hyperV')]"
                  },
                  "publicNetworkAccess": {
                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'publicNetworkAccess'), if(or(not(empty(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'))), not(empty(parameters('privateEndpoints')))), 'Disabled', 'Enabled'))]"
                  },
                  "redundancyMode": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'redundancyMode')]"
                  },
                  "hybridConnectionRelays": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hybridConnectionRelays')]"
                  },
                  "dnsConfiguration": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dnsConfiguration')]"
                  },
                  "autoGeneratedDomainNameLabelScope": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'autoGeneratedDomainNameLabelScope')]"
                  },
                  "outboundVnetRouting": {
                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'outboundVnetRouting')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "914806231987164171"
                    },
                    "name": "Web/Function App Deployment Slots",
                    "description": "This module deploys a Web or Function App Deployment Slot."
                  },
                  "definitions": {
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group Id for the private endpoint Group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "FQDN that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses of the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "configType": {
                      "type": "object",
                      "discriminator": {
                        "propertyName": "name",
                        "mapping": {
                          "appsettings": {
                            "$ref": "#/definitions/appSettingsConfigType"
                          },
                          "authsettings": {
                            "$ref": "#/definitions/authSettingsConfigType"
                          },
                          "authsettingsV2": {
                            "$ref": "#/definitions/authSettingsV2ConfigType"
                          },
                          "azurestorageaccounts": {
                            "$ref": "#/definitions/azureStorageAccountConfigType"
                          },
                          "backup": {
                            "$ref": "#/definitions/backupConfigType"
                          },
                          "connectionstrings": {
                            "$ref": "#/definitions/connectionStringsConfigType"
                          },
                          "logs": {
                            "$ref": "#/definitions/logsConfigType"
                          },
                          "metadata": {
                            "$ref": "#/definitions/metadataConfigType"
                          },
                          "pushsettings": {
                            "$ref": "#/definitions/pushSettingsConfigType"
                          },
                          "web": {
                            "$ref": "#/definitions/webConfigType"
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a site configuration."
                      }
                    },
                    "appSettingsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "appsettings"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "storageAccountUseIdentityAuthentication": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                          }
                        },
                        "applicationInsightResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the application insight to leverage for this resource."
                          }
                        },
                        "retainCurrentAppSettings": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The retain the current app settings. Defaults to true."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. An app settings key-value pair."
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of an app settings configuration."
                      }
                    },
                    "authSettingsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "authsettings"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "aadClaimsAuthorization": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets a JSON string containing the Azure AD Acl settings."
                              }
                            },
                            "additionalLoginParams": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                              }
                            },
                            "allowedAudiences": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Allowed audience values to consider when validating JSON Web Tokens issued by Azure Active Directory. Note that the `ClientID` value is always considered an allowed audience, regardless of this setting."
                              }
                            },
                            "allowedExternalRedirectUrls": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                              }
                            },
                            "authFilePath": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The path of the config file containing auth settings. If the path is relative, base will the site's root directory."
                              }
                            },
                            "clientId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                              }
                            },
                            "clientSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key). This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users. Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                              }
                            },
                            "clientSecretCertificateThumbprint": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                              }
                            },
                            "clientSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the client secret of the relying party application."
                              }
                            },
                            "configVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The ConfigVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of the control plane for Authentication / Authorization."
                              }
                            },
                            "defaultProvider": {
                              "type": "string",
                              "allowedValues": [
                                "AzureActiveDirectory",
                                "Facebook",
                                "Github",
                                "Google",
                                "MicrosoftAccount",
                                "Twitter"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                              }
                            },
                            "facebookAppId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The App ID of the Facebook app used for login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                              }
                            },
                            "facebookAppSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The App Secret of the Facebook app used for Facebook Login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                              }
                            },
                            "facebookAppSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the app secret used for Facebook Login."
                              }
                            },
                            "facebookOAuthScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. This setting is optional. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                              }
                            },
                            "gitHubClientId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Client Id of the GitHub app used for login. This setting is required for enabling Github login."
                              }
                            },
                            "gitHubClientSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Client Secret of the GitHub app used for Github Login. This setting is required for enabling Github login."
                              }
                            },
                            "gitHubClientSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the client secret of the Github app used for GitHub Login."
                              }
                            },
                            "gitHubOAuthScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication."
                              }
                            },
                            "googleClientId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OpenID Connect Client ID for the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                              }
                            },
                            "googleClientSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The client secret associated with the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                              }
                            },
                            "googleClientSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the client secret associated with the Google web application."
                              }
                            },
                            "googleOAuthScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                              }
                            },
                            "isAuthFromFile": {
                              "type": "string",
                              "allowedValues": [
                                "false",
                                "true"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. \"true\" if the auth config settings should be read from a file, \"false\" otherwise."
                              }
                            },
                            "issuer": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                              }
                            },
                            "microsoftAccountClientId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 client ID that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                              }
                            },
                            "microsoftAccountClientSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 client secret that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                              }
                            },
                            "microsoftAccountClientSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication."
                              }
                            },
                            "microsoftAccountOAuthScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. This setting is optional. If not specified, \"wl.basic\" is used as the default scope. Microsoft Account Scopes and permissions [documentation](https://msdn.microsoft.com/en-us/library/dn631845.aspx)."
                              }
                            },
                            "runtimeVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                              }
                            },
                            "tokenRefreshExtensionHours": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                              }
                            },
                            "tokenStoreEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows. The default is `false`."
                              }
                            },
                            "twitterConsumerKey": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                              }
                            },
                            "twitterConsumerSecret": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The OAuth 1.0a consumer secret of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                              }
                            },
                            "twitterConsumerSecretSettingName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                              }
                            },
                            "unauthenticatedClientAction": {
                              "type": "string",
                              "allowedValues": [
                                "AllowAnonymous",
                                "RedirectToLoginPage"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                              }
                            },
                            "validateIssuer": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of an auth settings configuration."
                      }
                    },
                    "authSettingsV2ConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "authsettingsV2"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "globalValidation": {
                              "type": "object",
                              "properties": {
                                "excludedPaths": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The paths for which unauthenticated flow would not be redirected to the login page."
                                  }
                                },
                                "redirectToProvider": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                                  }
                                },
                                "requireAuthentication": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `true` if the authentication flow is required by every request."
                                  }
                                },
                                "unauthenticatedClientAction": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AllowAnonymous",
                                    "RedirectToLoginPage",
                                    "Return401",
                                    "Return403"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings that determines the validation flow of users using App Service Authentication/Authorization."
                              }
                            },
                            "httpSettings": {
                              "type": "object",
                              "properties": {
                                "forwardProxy": {
                                  "type": "object",
                                  "properties": {
                                    "convention": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Custom",
                                        "NoProxy",
                                        "Standard"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The convention used to determine the url of the request made."
                                      }
                                    },
                                    "customHostHeaderName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the header containing the host of the request."
                                      }
                                    },
                                    "customProtoHeaderName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the header containing the scheme of the request."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of a forward proxy used to make the requests."
                                  }
                                },
                                "requireHttps": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `false` if the authentication/authorization responses not having the HTTPS scheme are permissible."
                                  }
                                },
                                "routes": {
                                  "type": "object",
                                  "properties": {
                                    "apiPrefix": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The prefix that should precede all the authentication/authorization paths."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the paths HTTP requests."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization."
                              }
                            },
                            "identityProviders": {
                              "type": "object",
                              "properties": {
                                "apple": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Apple provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the client secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Apple registration."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Apple provider."
                                  }
                                },
                                "azureActiveDirectory": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Azure Active Directory provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "isAutoProvisioned": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling. This is an internal flag primarily intended to support the Azure Management Portal. Users should not read or write to this property."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "disableWWWAuthenticate": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set to `true` if the www-authenticate provider should be omitted from the request."
                                          }
                                        },
                                        "loginParameters": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                          }
                                        },
                                        "clientSecretCertificateIssuer": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                          }
                                        },
                                        "clientSecretCertificateSubjectAlternativeName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                          }
                                        },
                                        "clientSecretCertificateThumbprint": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The app setting name that contains the client secret of the relying party application."
                                          }
                                        },
                                        "openIdIssuer": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory app registration."
                                      }
                                    },
                                    "validation": {
                                      "type": "object",
                                      "properties": {
                                        "allowedAudiences": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of audiences that can make successful authentication/authorization requests."
                                          }
                                        },
                                        "defaultAuthorizationPolicy": {
                                          "type": "object",
                                          "properties": {
                                            "allowedApplications": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Azure Active Directory allowed applications."
                                              }
                                            },
                                            "allowedPrincipals": {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The list of the allowed groups."
                                                  }
                                                },
                                                "identities": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The list of the allowed identities."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Azure Active Directory allowed principals."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the default authorization policy."
                                          }
                                        },
                                        "jwtClaimChecks": {
                                          "type": "object",
                                          "properties": {
                                            "allowedClientApplications": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of the allowed client applications."
                                              }
                                            },
                                            "allowedGroups": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of the allowed groups."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the checks that should be made while validating the JWT Claims."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Azure Active directory provider."
                                  }
                                },
                                "azureStaticWebApps": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Azure Static Web Apps provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Static Web Apps registration."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Azure Static Web Apps provider."
                                  }
                                },
                                "customOpenIdConnectProviders": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Set to `false` if the custom Open ID provider provider should not be enabled."
                                        }
                                      },
                                      "login": {
                                        "type": "object",
                                        "properties": {
                                          "nameClaimType": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of the claim that contains the users name."
                                            }
                                          },
                                          "scopes": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A list of the scopes that should be requested while authenticating."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The configuration settings of the login flow of the custom Open ID Connect provider."
                                        }
                                      },
                                      "registration": {
                                        "type": "object",
                                        "properties": {
                                          "clientCredential": {
                                            "type": "object",
                                            "properties": {
                                              "clientSecretSettingName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The app setting that contains the client secret for the custom Open ID Connect provider."
                                                }
                                              },
                                              "method": {
                                                "type": "string",
                                                "allowedValues": [
                                                  "ClientSecretPost"
                                                ],
                                                "metadata": {
                                                  "description": "Required. The method that should be used to authenticate the user."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The authentication credentials of the custom Open ID Connect provider."
                                            }
                                          },
                                          "clientId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The client id of the custom Open ID Connect provider."
                                            }
                                          },
                                          "openIdConnectConfiguration": {
                                            "type": "object",
                                            "properties": {
                                              "authorizationEndpoint": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint to be used to make an authorization request."
                                                }
                                              },
                                              "certificationUri": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint that provides the keys necessary to validate the token."
                                                }
                                              },
                                              "issuer": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint that issues the token."
                                                }
                                              },
                                              "tokenEndpoint": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint to be used to request a token."
                                                }
                                              },
                                              "wellKnownOpenIdConfiguration": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The endpoint that contains all the configuration endpoints for the provider."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The configuration settings of the endpoints used for the custom Open ID Connect provider."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The configuration settings of the app registration for the custom Open ID Connect provider."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The alias of each custom Open ID Connect provider."
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The map of the name of the alias of each custom Open ID Connect provider to the configuration settings of the custom Open ID Connect provider."
                                  }
                                },
                                "facebook": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Facebook provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "graphApiVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The version of the Facebook api to be used while logging in."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "appId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The App ID of the app used for login."
                                          }
                                        },
                                        "appSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the app secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the Facebook provider."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Facebook provider."
                                  }
                                },
                                "gitHub": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the GitHub provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the client secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the GitHub provider."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the GitHub provider."
                                  }
                                },
                                "google": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Google provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the client secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the Google provider."
                                      }
                                    },
                                    "validation": {
                                      "type": "object",
                                      "properties": {
                                        "allowedAudiences": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Google provider."
                                  }
                                },
                                "legacyMicrosoftAccount": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the legacy Microsoft Account provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "scopes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Client ID of the app used for login."
                                          }
                                        },
                                        "clientSecretSettingName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The app setting name that contains the client secret."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the legacy Microsoft Account provider."
                                      }
                                    },
                                    "validation": {
                                      "type": "object",
                                      "properties": {
                                        "allowedAudiences": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the legacy Microsoft Account provider token validation flow."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the legacy Microsoft Account provider."
                                  }
                                },
                                "twitter": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the Twitter provider should not be enabled despite the set registration."
                                      }
                                    },
                                    "registration": {
                                      "type": "object",
                                      "properties": {
                                        "consumerKey": {
                                          "type": "securestring",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                          }
                                        },
                                        "consumerSecretSettingName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the app registration for the Twitter provider."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the Twitter provider."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "allowedExternalRedirectUrls": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                                  }
                                },
                                "cookieExpiration": {
                                  "type": "object",
                                  "properties": {
                                    "convention": {
                                      "type": "string",
                                      "allowedValues": [
                                        "FixedTime",
                                        "IdentityProviderDerived"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The convention used when determining the session cookie's expiration."
                                      }
                                    },
                                    "timeToExpiration": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The time after the request is made when the session cookie should expire."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the session cookie's expiration."
                                  }
                                },
                                "nonce": {
                                  "type": "object",
                                  "properties": {
                                    "nonceExpirationInterval": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The time after the request is made when the nonce should expire."
                                      }
                                    },
                                    "validateNonce": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `false` if the nonce should not be validated while completing the login flow."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the nonce used in the login flow."
                                  }
                                },
                                "preserveUrlFragmentsForLogins": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `true` if the fragments from the request are preserved after the login request is made."
                                  }
                                },
                                "routes": {
                                  "type": "object",
                                  "properties": {
                                    "logoutEndpoint": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The endpoint at which a logout request should be made."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The routes that specify the endpoints used for login and logout requests."
                                  }
                                },
                                "tokenStore": {
                                  "type": "object",
                                  "properties": {
                                    "azureBlobStorage": {
                                      "type": "object",
                                      "properties": {
                                        "sasUrlSettingName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the app setting containing the SAS URL of the blob storage containing the tokens."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the storage of the tokens if blob storage is used."
                                      }
                                    },
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows."
                                      }
                                    },
                                    "fileSystem": {
                                      "type": "object",
                                      "properties": {
                                        "directory": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The directory in which the tokens will be stored."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the storage of the tokens if a file system is used."
                                      }
                                    },
                                    "tokenRefreshExtensionHours": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the token store."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow of users using App Service Authentication/Authorization."
                              }
                            },
                            "platform": {
                              "type": "object",
                              "properties": {
                                "configFilePath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The path of the config file containing auth settings if they come from a file. If the path is relative, base will the site's root directory."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                                  }
                                },
                                "runtimeVersion": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the platform of App Service Authentication/Authorization."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of an authSettingsV2 configuration."
                      }
                    },
                    "azureStorageAccountConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "azurestorageaccounts"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "accessKey": {
                                "type": "securestring",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Access key for the storage account."
                                }
                              },
                              "accountName": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of the storage account."
                                }
                              },
                              "mountPath": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Path to mount the storage within the site's runtime environment."
                                }
                              },
                              "protocol": {
                                "type": "string",
                                "allowedValues": [
                                  "Http",
                                  "Nfs",
                                  "Smb"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Mounting protocol to use for the storage account."
                                }
                              },
                              "shareName": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of the file share (container name, for Blob storage)."
                                }
                              },
                              "type": {
                                "type": "string",
                                "allowedValues": [
                                  "AzureBlob",
                                  "AzureFiles"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Type of storage."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Azure Storage Info configuration."
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of an Azure Storage Account configuration."
                      }
                    },
                    "backupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "backup"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "backupName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Name of the backup."
                              }
                            },
                            "backupSchedule": {
                              "type": "object",
                              "properties": {
                                "frequencyInterval": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)."
                                  }
                                },
                                "frequencyUnit": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Day",
                                    "Hour"
                                  ],
                                  "metadata": {
                                    "description": "Required. The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)."
                                  }
                                },
                                "keepAtLeastOneBackup": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Set to `True` if the retention policy should always keep at least one backup in the storage account, regardless how old it is."
                                  }
                                },
                                "retentionPeriodInDays": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. After how many days backups should be deleted."
                                  }
                                },
                                "startTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. When the schedule should start working."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Schedule for the backup if it is executed periodically."
                              }
                            },
                            "databases": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "connectionString": {
                                    "type": "securestring",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one."
                                    }
                                  },
                                  "connectionStringName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options."
                                    }
                                  },
                                  "databaseType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "LocalMySql",
                                      "MySql",
                                      "PostgreSql",
                                      "SqlAzure"
                                    ],
                                    "metadata": {
                                      "description": "Required. Database type (e.g. SqlAzure / MySql)."
                                    }
                                  },
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the setting."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Databases included in the backup."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `True` if the backup schedule is enabled (must be included in that case), `false` if the backup schedule should be disabled."
                              }
                            },
                            "storageAccountUrl": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SAS URL to the container."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a backup configuration."
                      }
                    },
                    "connectionStringsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "connectionstrings"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "allowedValues": [
                                  "ApiHub",
                                  "Custom",
                                  "DocDb",
                                  "EventHub",
                                  "MySql",
                                  "NotificationHub",
                                  "PostgreSQL",
                                  "RedisCache",
                                  "SQLAzure",
                                  "SQLServer",
                                  "ServiceBus"
                                ],
                                "metadata": {
                                  "description": "Required. Type of database."
                                }
                              },
                              "value": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Value of pair."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the connection string setting."
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a connection string configuration."
                      }
                    },
                    "logsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "logs"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "applicationLogs": {
                              "type": "object",
                              "properties": {
                                "azureBlobStorage": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Error",
                                        "Information",
                                        "Off",
                                        "Verbose",
                                        "Warning"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Log level."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                                      }
                                    },
                                    "sasUrl": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application logs to blob storage configuration."
                                  }
                                },
                                "azureTableStorage": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Error",
                                        "Information",
                                        "Off",
                                        "Verbose",
                                        "Warning"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Log level."
                                      }
                                    },
                                    "sasUrl": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. SAS URL to an Azure table with add/query/delete permissions."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application logs to azure table storage configuration."
                                  }
                                },
                                "fileSystem": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Error",
                                        "Information",
                                        "Off",
                                        "Verbose",
                                        "Warning"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Log level."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application logs to file system configuration."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application Logs for Azure configuration."
                              }
                            },
                            "detailedErrorMessages": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Detailed error messages configuration."
                              }
                            },
                            "failedRequestsTracing": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Failed requests tracing configuration."
                              }
                            },
                            "httpLogs": {
                              "type": "object",
                              "properties": {
                                "azureBlobStorage": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                                      }
                                    },
                                    "sasUrl": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Http logs to azure blob storage configuration."
                                  }
                                },
                                "fileSystem": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Retention in days. Remove files older than X days. 0 or lower means no retention."
                                      }
                                    },
                                    "retentionInMb": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 25,
                                      "maxValue": 100,
                                      "metadata": {
                                        "description": "Optional. Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Http logs to file system configuration."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. HTTP logs configuration."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a logs configuration."
                      }
                    },
                    "metadataConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "metadata"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata key value pair."
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a metadata configuration."
                      }
                    },
                    "pushSettingsConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "pushsettings"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "dynamicTagsJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                              }
                            },
                            "isPushEnabled": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                              }
                            },
                            "tagsRequiringAuth": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                              }
                            },
                            "tagWhitelistJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a pushSettings configuration."
                      }
                    },
                    "webConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "web"
                          ],
                          "metadata": {
                            "description": "Required. The type of config."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "acrUseManagedIdentityCreds": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Flag to use Managed Identity Creds for ACR pull."
                              }
                            },
                            "acrUserManagedIdentityID": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. If using user managed identity, the user managed identity ClientId."
                              }
                            },
                            "alwaysOn": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if 'Always On' is enabled."
                              }
                            },
                            "apiDefinition": {
                              "type": "object",
                              "properties": {
                                "url": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The URL of the API definition."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Information about the formal API definition for the app."
                              }
                            },
                            "apiManagementConfig": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. APIM-Api Identifier."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Azure API management settings linked to the app."
                              }
                            },
                            "appCommandLine": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. App command line to launch."
                              }
                            },
                            "appSettings": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Name of the pair."
                                    }
                                  },
                                  "value": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Value of the pair."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application settings."
                              }
                            },
                            "autoHealEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if Auto Heal is enabled."
                              }
                            },
                            "autoHealRules": {
                              "type": "object",
                              "properties": {
                                "actions": {
                                  "type": "object",
                                  "properties": {
                                    "actionType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "CustomAction",
                                        "LogEvent",
                                        "Recycle"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Predefined action to be taken."
                                      }
                                    },
                                    "customAction": {
                                      "type": "object",
                                      "properties": {
                                        "exe": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Executable to be run."
                                          }
                                        },
                                        "parameters": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Parameters for the executable."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom action to be taken."
                                      }
                                    },
                                    "minProcessExecutionTime": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Minimum time the process must execute before taking the action."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Actions to be executed when a rule is triggered."
                                  }
                                },
                                "triggers": {
                                  "type": "object",
                                  "properties": {
                                    "privateBytesInKB": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on private bytes."
                                      }
                                    },
                                    "requests": {
                                      "type": "object",
                                      "properties": {
                                        "count": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Request Count."
                                          }
                                        },
                                        "timeInterval": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Time interval."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on total requests."
                                      }
                                    },
                                    "slowRequests": {
                                      "$ref": "#/definitions/slowRequestBasedTriggerType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on request execution time."
                                      }
                                    },
                                    "slowRequestsWithPath": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/slowRequestBasedTriggerType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on multiple Slow Requests Rule with path."
                                      }
                                    },
                                    "statusCodes": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "count": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Request Count."
                                            }
                                          },
                                          "path": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Request Path."
                                            }
                                          },
                                          "status": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. HTTP status code."
                                            }
                                          },
                                          "subStatus": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Request Sub Status."
                                            }
                                          },
                                          "timeInterval": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Time interval."
                                            }
                                          },
                                          "win32Status": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Win32 error code."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on status codes."
                                      }
                                    },
                                    "statusCodesRange": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "count": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Request Count."
                                            }
                                          },
                                          "path": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Path."
                                            }
                                          },
                                          "statusCodes": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. HTTP status code."
                                            }
                                          },
                                          "timeInterval": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Time interval."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A rule based on status codes ranges."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Conditions that describe when to execute the auto-heal actions."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Auto Heal rules."
                              }
                            },
                            "autoSwapSlotName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Auto-swap slot name."
                              }
                            },
                            "azureStorageAccounts": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "accessKey": {
                                    "type": "securestring",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Access key for the storage account."
                                    }
                                  },
                                  "accountName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the storage account."
                                    }
                                  },
                                  "mountPath": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Path to mount the storage within the site's runtime environment."
                                    }
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Http",
                                      "Nfs",
                                      "Smb"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Mounting protocol to use for the storage account."
                                    }
                                  },
                                  "shareName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the file share (container name, for Blob storage)."
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureBlob",
                                      "AzureFiles"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Type of storage."
                                    }
                                  }
                                },
                                "metadata": {
                                  "description": "Required. A storage account configuration."
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of Azure Storage Accounts."
                              }
                            },
                            "connectionStrings": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "connectionString": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Connection string value."
                                    }
                                  },
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of connection string."
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "allowedValues": [
                                      "ApiHub",
                                      "Custom",
                                      "DocDb",
                                      "EventHub",
                                      "MySql",
                                      "NotificationHub",
                                      "PostgreSQL",
                                      "RedisCache",
                                      "SQLAzure",
                                      "SQLServer",
                                      "ServiceBus"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Type of database."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Connection strings."
                              }
                            },
                            "cors": {
                              "type": "object",
                              "properties": {
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use \"*\" to allow all."
                                  }
                                },
                                "supportCredentials": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Gets or sets whether CORS requests with credentials are allowed. See [ref](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials) for more details."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Cross-Origin Resource Sharing (CORS) settings."
                              }
                            },
                            "defaultDocuments": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Default documents."
                              }
                            },
                            "detailedErrorLoggingEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if detailed error logging is enabled."
                              }
                            },
                            "documentRoot": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Document root."
                              }
                            },
                            "elasticWebAppScaleLimit": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to apps in plans where ElasticScaleEnabled is `true`."
                              }
                            },
                            "experiments": {
                              "type": "object",
                              "properties": {
                                "rampUpRules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "actionHostName": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net."
                                        }
                                      },
                                      "changeDecisionCallbackUrl": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified."
                                        }
                                      },
                                      "changeIntervalInMinutes": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies interval in minutes to reevaluate ReroutePercentage."
                                        }
                                      },
                                      "changeStep": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. In auto ramp up scenario this is the step to add/remove from `ReroutePercentage` until it reaches `MinReroutePercentage` or `MaxReroutePercentage`. Site metrics are checked every N minutes specified in `ChangeIntervalInMinutes`. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in `ChangeDecisionCallbackUrl`."
                                        }
                                      },
                                      "maxReroutePercentage": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies upper boundary below which ReroutePercentage will stay."
                                        }
                                      },
                                      "minReroutePercentage": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies lower boundary above which ReroutePercentage will stay."
                                        }
                                      },
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                        }
                                      },
                                      "reroutePercentage": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Percentage of the traffic which will be redirected to `ActionHostName`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of ramp-up rules."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. This is work around for polymorphic types."
                              }
                            },
                            "ftpsState": {
                              "type": "string",
                              "allowedValues": [
                                "AllAllowed",
                                "Disabled",
                                "FtpsOnly"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. State of FTP / FTPS service."
                              }
                            },
                            "functionAppScaleLimit": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to the Consumption and Elastic Premium Plans."
                              }
                            },
                            "functionsRuntimeScaleMonitoringEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled, the ScaleController will not monitor event sources directly, but will instead call to the runtime to get scale status."
                              }
                            },
                            "handlerMappings": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "arguments": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Command-line arguments to be passed to the script processor."
                                    }
                                  },
                                  "extension": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Requests with this extension will be handled using the specified FastCGI application."
                                    }
                                  },
                                  "scriptProcessor": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The absolute path to the FastCGI application."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Handler mappings."
                              }
                            },
                            "healthCheckPath": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Health check path."
                              }
                            },
                            "http20Enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Allow clients to connect over http2.0."
                              }
                            },
                            "httpLoggingEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if HTTP logging is enabled."
                              }
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/scmIpSecurityRestrictionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. IP security restrictions for main."
                              }
                            },
                            "ipSecurityRestrictionsDefaultAction": {
                              "type": "string",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Default action for main access restriction if no rules are matched."
                              }
                            },
                            "javaContainer": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Java container."
                              }
                            },
                            "javaContainerVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Java container version."
                              }
                            },
                            "javaVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Java version."
                              }
                            },
                            "keyVaultReferenceIdentity": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Identity to use for Key Vault Reference authentication."
                              }
                            },
                            "limits": {
                              "type": "object",
                              "properties": {
                                "maxDiskSizeInMb": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Maximum allowed disk size usage in MB."
                                  }
                                },
                                "maxMemoryInMb": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Maximum allowed memory usage in MB."
                                  }
                                },
                                "maxPercentageCpu": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Maximum allowed CPU usage percentage."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Site limits."
                              }
                            },
                            "linuxFxVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Linux App Framework and version."
                              }
                            },
                            "loadBalancing": {
                              "type": "string",
                              "allowedValues": [
                                "LeastRequests",
                                "LeastRequestsWithTieBreaker",
                                "LeastResponseTime",
                                "PerSiteRoundRobin",
                                "RequestHash",
                                "WeightedRoundRobin",
                                "WeightedTotalTraffic"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Site load balancing."
                              }
                            },
                            "localMySqlEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` to enable local MySQL."
                              }
                            },
                            "logsDirectorySizeLimit": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. HTTP logs directory size limit."
                              }
                            },
                            "managedPipelineMode": {
                              "type": "string",
                              "allowedValues": [
                                "Classic",
                                "Integrated"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Managed pipeline mode."
                              }
                            },
                            "managedServiceIdentityId": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Managed Service Identity Id."
                              }
                            },
                            "metadata": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Pair name."
                                    }
                                  },
                                  "value": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Pair Value."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application metadata. This property cannot be retrieved, since it may contain secrets."
                              }
                            },
                            "minimumElasticInstanceCount": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 0,
                              "maxValue": 20,
                              "metadata": {
                                "description": "Optional. Number of minimum instance count for a site. This setting only applies to the Elastic Plans."
                              }
                            },
                            "minTlsCipherSuite": {
                              "type": "string",
                              "allowedValues": [
                                "TLS_AES_128_GCM_SHA256",
                                "TLS_AES_256_GCM_SHA384",
                                "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                                "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                                "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                                "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                                "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                                "TLS_RSA_WITH_AES_128_CBC_SHA",
                                "TLS_RSA_WITH_AES_128_CBC_SHA256",
                                "TLS_RSA_WITH_AES_128_GCM_SHA256",
                                "TLS_RSA_WITH_AES_256_CBC_SHA",
                                "TLS_RSA_WITH_AES_256_CBC_SHA256",
                                "TLS_RSA_WITH_AES_256_GCM_SHA384"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The minimum strength TLS cipher suite allowed for an application."
                              }
                            },
                            "minTlsVersion": {
                              "type": "string",
                              "allowedValues": [
                                "1.0",
                                "1.1",
                                "1.2",
                                "1.3"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. MinTlsVersion: configures the minimum version of TLS required for SSL requests."
                              }
                            },
                            "netFrameworkVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. .NET Framework version."
                              }
                            },
                            "nodeVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Version of Node.js."
                              }
                            },
                            "numberOfWorkers": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Number of workers."
                              }
                            },
                            "phpVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Version of PHP."
                              }
                            },
                            "powerShellVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Version of PowerShell."
                              }
                            },
                            "preWarmedInstanceCount": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 0,
                              "maxValue": 10,
                              "metadata": {
                                "description": "Optional. Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Property to allow or block all public traffic."
                              }
                            },
                            "publishingUsername": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Publishing user name."
                              }
                            },
                            "push": {
                              "type": "object",
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Kind of resource."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "dynamicTagsJson": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                                      }
                                    },
                                    "isPushEnabled": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                                      }
                                    },
                                    "tagsRequiringAuth": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                                      }
                                    },
                                    "tagWhitelistJson": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. PushSettings resource specific properties."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Push endpoint settings."
                              }
                            },
                            "pythonVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Version of Python."
                              }
                            },
                            "remoteDebuggingEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if remote debugging is enabled."
                              }
                            },
                            "remoteDebuggingVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Remote debugging version."
                              }
                            },
                            "requestTracingEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if request tracing is enabled."
                              }
                            },
                            "requestTracingExpirationTime": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Request tracing expiration time."
                              }
                            },
                            "scmIpSecurityRestrictions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/scmIpSecurityRestrictionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. IP security restrictions for scm."
                              }
                            },
                            "scmIpSecurityRestrictionsDefaultAction": {
                              "type": "string",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Default action for scm access restriction if no rules are matched."
                              }
                            },
                            "scmIpSecurityRestrictionsUseMain": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. IP security restrictions for scm to use main."
                              }
                            },
                            "scmMinTlsVersion": {
                              "type": "string",
                              "allowedValues": [
                                "1.0",
                                "1.1",
                                "1.2",
                                "1.3"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site."
                              }
                            },
                            "scmType": {
                              "type": "string",
                              "allowedValues": [
                                "BitbucketGit",
                                "BitbucketHg",
                                "CodePlexGit",
                                "CodePlexHg",
                                "Dropbox",
                                "ExternalGit",
                                "ExternalHg",
                                "GitHub",
                                "LocalGit",
                                "None",
                                "OneDrive",
                                "Tfs",
                                "VSO",
                                "VSTSRM"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SCM type."
                              }
                            },
                            "tracingOptions": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tracing options."
                              }
                            },
                            "use32BitWorkerProcess": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` to use 32-bit worker process."
                              }
                            },
                            "virtualApplications": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "physicalPath": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Physical path."
                                    }
                                  },
                                  "preloadEnabled": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Set to `true` if preloading is enabled."
                                    }
                                  },
                                  "virtualDirectories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "physicalPath": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Physical path."
                                          }
                                        },
                                        "virtualPath": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Path to virtual application."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Virtual directories for virtual application."
                                    }
                                  },
                                  "virtualPath": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Virtual path."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Virtual applications."
                              }
                            },
                            "vnetName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Virtual Network name."
                              }
                            },
                            "vnetPrivatePortsCount": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The number of private ports assigned to this app. These will be assigned dynamically on runtime."
                              }
                            },
                            "vnetRouteAllEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                              }
                            },
                            "websiteTimeZone": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see [ref](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones."
                              }
                            },
                            "webSocketsEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` if WebSocket is enabled."
                              }
                            },
                            "windowsFxVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Xenon App Framework and version."
                              }
                            },
                            "xManagedServiceIdentityId": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Explicit Managed Service Identity Id."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The config settings."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a web configuration."
                      }
                    },
                    "slowRequestBasedTriggerType": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Request Count."
                          }
                        },
                        "path": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Request Path."
                          }
                        },
                        "timeInterval": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Time interval."
                          }
                        },
                        "timeTaken": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Time taken."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type of aslow request based trigger."
                      }
                    },
                    "scmIpSecurityRestrictionType": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "allowedValues": [
                            "Allow",
                            "Deny"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Allow or Deny access for this IP range."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. IP restriction rule description."
                          }
                        },
                        "headers": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A header."
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. IP restriction rule headers.\nX-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), all hosts(or lack of) are allowed.\n- A value is compared using ordinal-ignore-case (excluding port number).\n- Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com\nbut not the root domain contoso.com or multi-level foo.bar.contoso.com\n- Unicode host names are allowed but are converted to Punycode for matching.\n\nX-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.\n- If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.\n\nX-Azure-FDID and X-FD-HealthProbe.\nThe matching logic is exact match."
                          }
                        },
                        "ipAddress": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask (leading bit match). For CIDR, SubnetMask property must not be specified."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. IP restriction rule name."
                          }
                        },
                        "priority": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Priority of IP restriction rule."
                          }
                        },
                        "subnetMask": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Subnet mask for the range of IP addresses the restriction is valid for."
                          }
                        },
                        "subnetTrafficTag": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. (internal) Subnet traffic tag."
                          }
                        },
                        "tag": {
                          "type": "string",
                          "allowedValues": [
                            "Default",
                            "ServiceTag",
                            "XffProxy"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Defines what this IP filter will be used for. This is to support IP filtering on proxies."
                          }
                        },
                        "vnetSubnetResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Virtual network resource id."
                          }
                        },
                        "vnetTrafficTag": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. (internal) Vnet traffic tag."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type of a IP security restriction."
                      }
                    },
                    "basicPublishingCredentialsPolicyType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "allowedValues": [
                            "ftp",
                            "scm"
                          ],
                          "metadata": {
                            "description": "Required. The name of the resource."
                          }
                        },
                        "allow": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to true to enable or false to disable a publishing method."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Location for all Resources."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a basic publishing credential policy."
                      }
                    },
                    "hybridConnectionRelayType": {
                      "type": "object",
                      "properties": {
                        "hybridConnectionResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the relay namespace hybrid connection."
                          }
                        },
                        "sendKeyName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the authorization rule send key to use."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of a hybrid connection relay."
                      }
                    },
                    "_1.lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "notes": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the notes of the lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "_1.roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "notes": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the notes of the lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "privateEndpointSingleServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private Endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the Private Endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/_1.lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "__bicep_resource_derived_type!": {
                              "source": "Microsoft.Network/privateEndpoints@2024-07-01#properties/tags"
                            },
                            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the slot."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "functionapp",
                        "functionapp,linux",
                        "functionapp,workflowapp",
                        "functionapp,workflowapp,linux",
                        "functionapp,linux,container",
                        "functionapp,linux,container,azurecontainerapps",
                        "app,linux",
                        "app",
                        "linux,api",
                        "api",
                        "app,linux,container",
                        "app,container,windows"
                      ],
                      "metadata": {
                        "description": "Required. Type of site to deploy."
                      }
                    },
                    "serverFarmResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the app service plan to use for the slot."
                      }
                    },
                    "managedEnvironmentResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                      }
                    },
                    "httpsOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                      }
                    },
                    "clientAffinityEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If client affinity is enabled."
                      }
                    },
                    "clientAffinityProxyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. To enable client affinity; false to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is true."
                      }
                    },
                    "clientAffinityPartitioningEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable client affinity partitioning using CHIPS cookies, this will add the partitioned property to the affinity cookies; false to stop sending partitioned affinity cookies. Default is false."
                      }
                    },
                    "appServiceEnvironmentResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the app service environment to use for this resource."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "keyVaultAccessIdentityResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                      }
                    },
                    "storageAccountRequired": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Checks if Customer provided storage account is required."
                      }
                    },
                    "virtualNetworkSubnetResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                      }
                    },
                    "siteConfig": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/siteConfig"
                        },
                        "description": "Optional. The site config object."
                      },
                      "defaultValue": {
                        "alwaysOn": true
                      }
                    },
                    "functionAppConfig": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Function App config object."
                      }
                    },
                    "configs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/configType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The web site config."
                      }
                    },
                    "extensions": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The extensions configuration."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointSingleServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "clientCertEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                      }
                    },
                    "clientCertExclusionPaths": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                      }
                    },
                    "clientCertMode": {
                      "type": "string",
                      "defaultValue": "Optional",
                      "allowedValues": [
                        "Optional",
                        "OptionalInteractiveUser",
                        "Required"
                      ],
                      "metadata": {
                        "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
                      }
                    },
                    "cloningInfo": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If specified during app creation, the app is cloned from a source app."
                      }
                    },
                    "containerSize": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Size of the function container."
                      }
                    },
                    "customDomainVerificationId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                      }
                    },
                    "dailyMemoryTimeQuota": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                      }
                    },
                    "hostNameSslStates": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/hostNameSslStates"
                        },
                        "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                      },
                      "nullable": true
                    },
                    "hyperV": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Hyper-V sandbox."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Allow or block all public traffic."
                      }
                    },
                    "redundancyMode": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "ActiveActive",
                        "Failover",
                        "GeoRedundant",
                        "Manual",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. Site redundancy mode."
                      }
                    },
                    "basicPublishingCredentialsPolicies": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The site publishing credential policy names which are associated with the site slot."
                      }
                    },
                    "outboundVnetRouting": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-11-01#properties/properties/properties/outboundVnetRouting"
                        },
                        "description": "Optional. The outbound VNET routing configuration for the site."
                      },
                      "nullable": true
                    },
                    "hybridConnectionRelays": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/hybridConnectionRelayType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Names of hybrid connection relays to connect app with."
                      }
                    },
                    "dnsConfiguration": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/dnsConfiguration"
                        },
                        "description": "Optional. Property to configure various DNS related settings for a site."
                      },
                      "nullable": true
                    },
                    "autoGeneratedDomainNameLabelScope": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "NoReuse",
                        "ResourceGroupReuse",
                        "SubscriptionReuse",
                        "TenantReuse"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                    },
                    "managedEnvironmentSupportedKinds": [
                      "functionapp,linux,container,azurecontainerapps"
                    ]
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.web-siteslot.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "app": {
                      "existing": true,
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2024-11-01",
                      "name": "[parameters('appName')]"
                    },
                    "slot": {
                      "type": "Microsoft.Web/sites/slots",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentResourceId'))), parameters('managedEnvironmentResourceId'), null())]",
                        "serverFarmId": "[if(and(contains(variables('managedEnvironmentSupportedKinds'), parameters('kind')), or(not(empty(reference('app').managedEnvironmentId)), not(empty(parameters('managedEnvironmentResourceId'))))), null(), parameters('serverFarmResourceId'))]",
                        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                        "clientAffinityProxyEnabled": "[parameters('clientAffinityProxyEnabled')]",
                        "clientAffinityPartitioningEnabled": "[parameters('clientAffinityPartitioningEnabled')]",
                        "httpsOnly": "[parameters('httpsOnly')]",
                        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                        "storageAccountRequired": "[parameters('storageAccountRequired')]",
                        "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                        "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetResourceId')]",
                        "siteConfig": "[parameters('siteConfig')]",
                        "functionAppConfig": "[parameters('functionAppConfig')]",
                        "clientCertEnabled": "[parameters('clientCertEnabled')]",
                        "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                        "clientCertMode": "[parameters('clientCertMode')]",
                        "cloningInfo": "[parameters('cloningInfo')]",
                        "containerSize": "[parameters('containerSize')]",
                        "customDomainVerificationId": "[parameters('customDomainVerificationId')]",
                        "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                        "enabled": "[parameters('enabled')]",
                        "hostNameSslStates": "[parameters('hostNameSslStates')]",
                        "hyperV": "[parameters('hyperV')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "redundancyMode": "[parameters('redundancyMode')]",
                        "dnsConfiguration": "[parameters('dnsConfiguration')]",
                        "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]",
                        "outboundVnetRouting": "[parameters('outboundVnetRouting')]"
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "slot_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_diagnosticSettings": {
                      "copy": {
                        "name": "slot_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_roleAssignments": {
                      "copy": {
                        "name": "slot_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_basicPublishingCredentialsPolicies": {
                      "copy": {
                        "name": "slot_basicPublishingCredentialsPolicies",
                        "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('appName')]"
                          },
                          "slotName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                          },
                          "allow": {
                            "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "17123160073792726997"
                            },
                            "name": "Web Site Slot Basic Publishing Credentials Policies",
                            "description": "This module deploys a Web Site Slot Basic Publishing Credentials Policy."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "scm",
                                "ftp"
                              ],
                              "metadata": {
                                "description": "Required. The name of the resource."
                              }
                            },
                            "allow": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Set to true to enable or false to disable a publishing method."
                              }
                            },
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                              }
                            },
                            "slotName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "allow": "[parameters('allow')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the basic publishing credential policy."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the basic publishing credential policy."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the basic publishing credential policy was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name')), '2024-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_hybridConnectionRelays": {
                      "copy": {
                        "name": "slot_hybridConnectionRelays",
                        "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hybridConnectionResourceId": {
                            "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].hybridConnectionResourceId]"
                          },
                          "appName": {
                            "value": "[parameters('appName')]"
                          },
                          "slotName": {
                            "value": "[parameters('name')]"
                          },
                          "sendKeyName": {
                            "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "13532312193837359524"
                            },
                            "name": "Web/Function Apps Slot Hybrid Connection Relay",
                            "description": "This module deploys a Site Slot Hybrid Connection Namespace Relay."
                          },
                          "parameters": {
                            "hybridConnectionResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the relay namespace hybrid connection."
                              }
                            },
                            "slotName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the site slot. Required if the template is used in a standalone deployment."
                              }
                            },
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                              }
                            },
                            "sendKeyName": {
                              "type": "string",
                              "defaultValue": "defaultSender",
                              "metadata": {
                                "description": "Optional. Name of the authorization rule send key to use."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                              "properties": {
                                "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[0]]",
                                "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[1])]",
                                "sendKeyName": "[parameters('sendKeyName')]",
                                "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2024-01-01').primaryKey]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the hybrid connection relay.."
                              },
                              "value": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the hybrid connection relay."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[3])]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the resource was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_config": {
                      "copy": {
                        "name": "slot_config",
                        "count": "[length(coalesce(parameters('configs'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-Config-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('appName')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('configs'), createArray())[copyIndex()].name]"
                          },
                          "slotName": {
                            "value": "[parameters('name')]"
                          },
                          "applicationInsightResourceId": {
                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'applicationInsightResourceId')]"
                          },
                          "properties": {
                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'properties')]"
                          },
                          "currentAppSettings": "[if(coalesce(tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'retainCurrentAppSettings'), and(true(), equals(coalesce(parameters('configs'), createArray())[copyIndex()].name, 'appsettings'))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]",
                          "storageAccountResourceId": {
                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountResourceId')]"
                          },
                          "storageAccountUseIdentityAuthentication": {
                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "16898908324753684244"
                            },
                            "name": "Site App Settings",
                            "description": "This module deploys a Site App Setting."
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "slotName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "appsettings",
                                "authsettings",
                                "authsettingsV2",
                                "azurestorageaccounts",
                                "backup",
                                "connectionstrings",
                                "logs",
                                "metadata",
                                "pushsettings",
                                "web"
                              ],
                              "metadata": {
                                "description": "Required. The name of the config."
                              }
                            },
                            "properties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The properties of the config. Note: This parameter is highly dependent on the config type, defined by its name."
                              }
                            },
                            "currentAppSettings": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The key-values pairs of the current app settings."
                                }
                              },
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The current app settings."
                              }
                            },
                            "storageAccountUseIdentityAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                              }
                            },
                            "applicationInsightResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource ID of the application insight to leverage for this resource."
                              }
                            }
                          },
                          "resources": {
                            "app::slot": {
                              "existing": true,
                              "type": "Microsoft.Web/sites/slots",
                              "apiVersion": "2023-12-01",
                              "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]"
                            },
                            "applicationInsights": {
                              "condition": "[not(empty(parameters('applicationInsightResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02",
                              "subscriptionId": "[split(parameters('applicationInsightResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('applicationInsightResourceId'), '/')[4]]",
                              "name": "[last(split(parameters('applicationInsightResourceId'), '/'))]"
                            },
                            "storageAccount": {
                              "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2025-01-01",
                              "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
                              "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                            },
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2023-12-01",
                              "name": "[parameters('appName')]"
                            },
                            "config": {
                              "type": "Microsoft.Web/sites/slots/config",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                              "properties": "[union(parameters('currentAppSettings'), parameters('properties'), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(parameters('storageAccountResourceId'), '/')), listKeys('storageAccount', '2025-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), createObject('AzureWebJobsStorage__accountName', last(split(parameters('storageAccountResourceId'), '/')), 'AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob, 'AzureWebJobsStorage__queueServiceUri', reference('storageAccount').primaryEndpoints.queue, 'AzureWebJobsStorage__tableServiceUri', reference('storageAccount').primaryEndpoints.table), createObject())), if(not(empty(parameters('applicationInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString), createObject()))]",
                              "dependsOn": [
                                "applicationInsights",
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "app_extensions": {
                      "copy": {
                        "name": "app_extensions",
                        "count": "[length(coalesce(parameters('extensions'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-Extension={1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('appName')]"
                          },
                          "slotName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('extensions'), createArray())[copyIndex()], 'name')]"
                          },
                          "kind": {
                            "value": "[tryGet(coalesce(parameters('extensions'), createArray())[copyIndex()], 'kind')]"
                          },
                          "properties": {
                            "value": "[coalesce(parameters('extensions'), createArray())[copyIndex()].properties]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "10761655518597298958"
                            },
                            "name": "Site Deployment Extension ",
                            "description": "This module deploys a Site extension for MSDeploy."
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "slotName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "MSDeploy",
                              "allowedValues": [
                                "MSDeploy"
                              ],
                              "metadata": {
                                "description": "Optional. The name of the extension."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "MSDeploy",
                              "allowedValues": [
                                "MSDeploy"
                              ],
                              "metadata": {
                                "description": "Optional. The kind of extension."
                              }
                            },
                            "properties": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                                },
                                "description": "Optional. Sets the properties."
                              },
                              "nullable": true
                            }
                          },
                          "resources": {
                            "app::slot": {
                              "existing": true,
                              "type": "Microsoft.Web/sites/slots",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]"
                            },
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2024-04-01",
                              "name": "[parameters('appName')]"
                            },
                            "msdeploy": {
                              "type": "Microsoft.Web/sites/slots/extensions",
                              "apiVersion": "2024-04-01",
                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                              "kind": "[parameters('kind')]",
                              "properties": "[parameters('properties')]"
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the extension."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots/extensions', parameters('appName'), parameters('slotName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the extensino was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    },
                    "slot_privateEndpoints": {
                      "copy": {
                        "name": "slot_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-slot-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "12389807800450456797"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "13997305779829540948"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "slot"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the slot."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the slot."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the slot was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('slot', '2024-11-01', 'full'), 'identity'), 'principalId')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('slot', '2024-11-01', 'full').location]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the slot."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_basicPublishingCredentialsPolicies": {
              "copy": {
                "name": "app_basicPublishingCredentialsPolicies",
                "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Site-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "webAppName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                  },
                  "allow": {
                    "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11690883076351352821"
                    },
                    "name": "Web Site Basic Publishing Credentials Policies",
                    "description": "This module deploys a Web Site Basic Publishing Credentials Policy."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "scm",
                        "ftp"
                      ],
                      "metadata": {
                        "description": "Required. The name of the resource."
                      }
                    },
                    "allow": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Set to true to enable or false to disable a publishing method."
                      }
                    },
                    "webAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}', parameters('webAppName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "allow": "[parameters('allow')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the basic publishing credential policy."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the basic publishing credential policy."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the basic publishing credential policy was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name')), '2024-04-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_hybridConnectionRelays": {
              "copy": {
                "name": "app_hybridConnectionRelays",
                "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hybridConnectionResourceId": {
                    "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].hybridConnectionResourceId]"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "sendKeyName": {
                    "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "9890852164030738398"
                    },
                    "name": "Web/Function Apps Hybrid Connection Relay",
                    "description": "This module deploys a Site Hybrid Connection Namespace Relay."
                  },
                  "parameters": {
                    "hybridConnectionResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the relay namespace hybrid connection."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                      }
                    },
                    "sendKeyName": {
                      "type": "string",
                      "defaultValue": "defaultSender",
                      "metadata": {
                        "description": "Optional. Name of the authorization rule send key to use."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/hybridConnectionNamespaces/relays",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                      "properties": {
                        "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                        "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                        "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                        "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                        "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[0]]",
                        "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[1])]",
                        "sendKeyName": "[parameters('sendKeyName')]",
                        "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2024-01-01').primaryKey]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the hybrid connection relay.."
                      },
                      "value": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the hybrid connection relay."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2])]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the resource was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            },
            "app_privateEndpoints": {
              "copy": {
                "name": "app_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-app-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "12389807800450456797"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint."
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "privateLinkServiceConnectionType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the private link service connection."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of private link service."
                              }
                            },
                            "requestMessage": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private link service connection."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "customDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipConfigurationType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "13997305779829540948"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2024-05-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                    },
                    "groupId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "app"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the site."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the site."
              },
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the site was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('app', '2024-11-01', 'full'), 'identity'), 'principalId')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('app', '2024-11-01', 'full').location]"
            },
            "defaultHostname": {
              "type": "string",
              "metadata": {
                "description": "Default hostname of the app."
              },
              "value": "[reference('app').defaultHostName]"
            },
            "customDomainVerificationId": {
              "type": "string",
              "metadata": {
                "description": "Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
              },
              "value": "[reference('app').customDomainVerificationId]"
            },
            "outboundIpAddresses": {
              "type": "string",
              "metadata": {
                "description": "The outbound IP addresses of the app."
              },
              "value": "[reference('app').outboundIpAddresses]"
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointOutputType"
              },
              "metadata": {
                "description": "The private endpoints of the site."
              },
              "copy": {
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                "input": {
                  "name": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                  "groupId": "[tryGet(tryGet(reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                  "customDnsConfigs": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                  "networkInterfaceResourceIds": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                }
              }
            },
            "slots": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "The name of the slot."
                    }
                  },
                  "resourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "The resource ID of the slot."
                    }
                  },
                  "systemAssignedMIPrincipalId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "The principal ID of the system assigned identity of the slot."
                    }
                  },
                  "privateEndpoints": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/privateEndpointOutputType"
                    },
                    "metadata": {
                      "description": "The private endpoints of the slot."
                    }
                  }
                }
              },
              "metadata": {
                "description": "The slots of the site."
              },
              "copy": {
                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                "input": {
                  "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
                  "resourceId": "[reference(format('app_slots[{0}]', copyIndex())).outputs.resourceId.value]",
                  "systemAssignedMIPrincipalId": "[coalesce(tryGet(tryGet(reference(format('app_slots[{0}]', copyIndex())).outputs, 'systemAssignedMIPrincipalId'), 'value'), '')]",
                  "privateEndpoints": "[reference(format('app_slots[{0}]', copyIndex())).outputs.privateEndpoints.value]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "appServicePlan",
        "logAnalyticsWorkspace",
        "rg",
        "virtualNetwork"
      ]
    },
    "containerGroup": {
      "condition": "[equals(parameters('computeService'), 'Container Instance')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "foundry-vtt-container-group-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('containerInstanceFoundryVttName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilityZone": {
            "value": -1
          },
          "containers": {
            "value": [
              {
                "name": "foundryvtt",
                "properties": {
                  "environmentVariables": [
                    {
                      "name": "FOUNDRY_USERNAME",
                      "secureValue": "[parameters('foundryUsername')]"
                    },
                    {
                      "name": "FOUNDRY_PASSWORD",
                      "secureValue": "[parameters('foundryPassword')]"
                    },
                    {
                      "name": "FOUNDRY_ADMIN_KEY",
                      "secureValue": "[parameters('foundryAdminKey')]"
                    }
                  ],
                  "image": "[format('{0}:{1}', variables('foundryVttDockerImageName'), parameters('foundryVttDockerImageTag'))]",
                  "ports": [
                    {
                      "protocol": "TCP",
                      "port": 30000
                    }
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "[parameters('containerInstanceCpu')]",
                      "memoryInGB": "[parameters('containerInstanceMemoryInGB')]"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "foundrydata",
                      "mountPath": "/data"
                    }
                  ]
                }
              }
            ]
          },
          "ipAddress": {
            "value": {
              "ports": [
                {
                  "protocol": "TCP",
                  "port": 30000
                }
              ],
              "type": "Public",
              "dnsNameLabel": "[parameters('environmentName')]"
            }
          },
          "osType": {
            "value": "Linux"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "volumes": {
            "value": [
              {
                "name": "foundrydata",
                "azureFile": {
                  "shareName": "foundryvttdata",
                  "storageAccountName": "[variables('storageAccountName')]",
                  "storageAccountKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))), 'Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2024-01-01').keys[0].value]"
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "9120790891504228330"
            },
            "name": "Container Instances Container Groups",
            "description": "This module deploys a Container Instance Container Group."
          },
          "definitions": {
            "containerProbeType": {
              "type": "object",
              "properties": {
                "exec": {
                  "type": "object",
                  "properties": {
                    "command": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Required. The commands to execute within the container."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The execution command to probe."
                  }
                },
                "failureThreshold": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The failure threshold."
                  }
                },
                "httpGet": {
                  "type": "object",
                  "properties": {
                    "httpHeaders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the header."
                            }
                          },
                          "value": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The value of the header."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The HTTP headers."
                      }
                    },
                    "path": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The path to probe."
                      }
                    },
                    "port": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The port number to probe."
                      }
                    },
                    "scheme": {
                      "type": "string",
                      "allowedValues": [
                        "HTTP",
                        "HTTPS"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The scheme."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The HTTP request to perform."
                  }
                },
                "initialDelaySeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The initial delay seconds."
                  }
                },
                "periodSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The period seconds."
                  }
                },
                "successThreshold": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The success threshold."
                  }
                },
                "timeoutSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timeout seconds."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a container probe."
              }
            },
            "containerType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the container instance."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "image": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container source image."
                      }
                    },
                    "livenessProbe": {
                      "$ref": "#/definitions/containerProbeType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The liveness probe."
                      }
                    },
                    "readinessProbe": {
                      "$ref": "#/definitions/containerProbeType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The readiness probe."
                      }
                    },
                    "ports": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "port": {
                            "type": "int",
                            "metadata": {
                              "description": "Required. The port number exposed on the container instance."
                            }
                          },
                          "protocol": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The protocol associated with the port number."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The exposed ports on the container instance."
                      }
                    },
                    "resources": {
                      "type": "object",
                      "properties": {
                        "requests": {
                          "type": "object",
                          "properties": {
                            "cpu": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The CPU request of this container instance."
                              }
                            },
                            "gpu": {
                              "$ref": "#/definitions/containerGpuType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The GPU request of this container instance."
                              }
                            },
                            "memoryInGB": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The memory request in GB of this container instance."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The resource requests of this container instance."
                          }
                        },
                        "limits": {
                          "type": "object",
                          "properties": {
                            "cpu": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The CPU limit of this container instance."
                              }
                            },
                            "gpu": {
                              "$ref": "#/definitions/containerGpuType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The GPU limit of this container instance."
                              }
                            },
                            "memoryInGB": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The memory limit in GB of this container instance."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource limits of this container instance."
                          }
                        }
                      },
                      "metadata": {
                        "description": "Required. The resource requirements of the container instance."
                      }
                    },
                    "securityContext": {
                      "type": "object",
                      "properties": {
                        "allowPrivilegeEscalation": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether privilege escalation is allowed for the container."
                          }
                        },
                        "capabilities": {
                          "type": "object",
                          "properties": {
                            "add": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of capabilities to add."
                              }
                            },
                            "drop": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of capabilities to drop."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The capabilities to add or drop for the container."
                          }
                        },
                        "privileged": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the container is run in privileged mode."
                          }
                        },
                        "runAsGroup": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The GID to run the container as."
                          }
                        },
                        "runAsUser": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The UID to run the container as."
                          }
                        },
                        "seccompProfile": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The seccomp profile to use for the container."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The security context of the container instance."
                      }
                    },
                    "volumeMounts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the volume mount."
                            }
                          },
                          "mountPath": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The path within the container where the volume should be mounted. Must not contain colon (:)."
                            }
                          },
                          "readOnly": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The flag indicating whether the volume mount is read-only."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The volume mounts within the container instance."
                      }
                    },
                    "command": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The command to execute within the container instance."
                      }
                    },
                    "environmentVariables": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the environment variable."
                            }
                          },
                          "secureValue": {
                            "type": "securestring",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The value of the secure environment variable."
                            }
                          },
                          "value": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The value of the environment variable."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The environment variables to set in the container instance."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The properties of the container instance."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a container."
              }
            },
            "logAnalyticsType": {
              "type": "object",
              "properties": {
                "logType": {
                  "type": "string",
                  "allowedValues": [
                    "ContainerInsights",
                    "ContainerInstanceLogs"
                  ],
                  "metadata": {
                    "description": "Required. The log type to be used."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The workspace resource ID for log analytics."
                  }
                },
                "metadata": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.ContainerInstance/containerGroups@2023-05-01#properties/properties/properties/diagnostics/properties/logAnalytics/properties/metadata"
                    },
                    "description": "Optional. Metadata for log analytics."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for log analytics diagnostics."
              }
            },
            "imageRegistryCredentialType": {
              "type": "object",
              "properties": {
                "server": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Docker image registry server without a protocol such as \"http\" and \"https\"."
                  }
                },
                "identity": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The identity for the private registry."
                  }
                },
                "identityUrl": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The identity URL for the private registry."
                  }
                },
                "username": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The username for the private registry."
                  }
                },
                "password": {
                  "type": "securestring",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The password for the private registry."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an image registry credential."
              }
            },
            "ipAddressPortsType": {
              "type": "object",
              "properties": {
                "port": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. The port number exposed on the container instance."
                  }
                },
                "protocol": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The protocol associated with the port number."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an IP address port."
              }
            },
            "ipAddressType": {
              "type": "object",
              "properties": {
                "autoGeneratedDomainNameLabelScope": {
                  "type": "string",
                  "allowedValues": [
                    "Noreuse",
                    "ResourceGroupReuse",
                    "SubscriptionReuse",
                    "TenantReuse",
                    "Unsecure"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The value representing the security enum."
                  }
                },
                "dnsNameLabel": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Dns name label for the IP."
                  }
                },
                "ip": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The IP exposed to the public internet."
                  }
                },
                "ports": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ipAddressPortsType"
                  },
                  "metadata": {
                    "description": "Required. The list of ports exposed on the container group."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "Private",
                    "Public"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies if the IP is exposed to the public internet or private VNET."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an IP address."
              }
            },
            "containerGroupSubnetIdType": {
              "type": "object",
              "properties": {
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of virtual network and subnet."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Friendly name for the subnet."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a container group subnet."
              }
            },
            "dnsConfigType": {
              "type": "object",
              "properties": {
                "nameServers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. \tThe DNS servers for the container group."
                  }
                },
                "options": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The DNS options for the container group."
                  }
                },
                "searchDomains": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The DNS search domains for hostname lookup in the container group."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a DNS configuration."
              }
            },
            "containerGpuType": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. The count of the GPU resource."
                  }
                },
                "sku": {
                  "type": "string",
                  "allowedValues": [
                    "K80",
                    "P100",
                    "V100"
                  ],
                  "metadata": {
                    "description": "Required. The SKU of the GPU resource."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a container GPU."
              }
            },
            "customerManagedKeyWithAutoRotateType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
                  }
                },
                "autoRotationEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name for the container group."
              }
            },
            "containers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/containerType"
              },
              "metadata": {
                "description": "Required. The containers and their respective config within the container group."
              }
            },
            "ipAddress": {
              "$ref": "#/definitions/ipAddressType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The IP address type of the container group."
              }
            },
            "osType": {
              "type": "string",
              "defaultValue": "Linux",
              "metadata": {
                "description": "Optional. The operating system type required by the containers in the container group. - Windows or Linux."
              }
            },
            "restartPolicy": {
              "type": "string",
              "defaultValue": "Always",
              "allowedValues": [
                "Always",
                "OnFailure",
                "Never"
              ],
              "metadata": {
                "description": "Optional. Restart policy for all containers within the container group. - Always: Always restart. OnFailure: Restart on failure. Never: Never restart. - Always, OnFailure, Never."
              }
            },
            "imageRegistryCredentials": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/imageRegistryCredentialType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The image registry credentials by which the container group is created from."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "logAnalytics": {
              "$ref": "#/definitions/logAnalyticsType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The log analytics diagnostic information for a container group."
              }
            },
            "dnsConfig": {
              "$ref": "#/definitions/dnsConfigType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The DNS config information for a container group."
              }
            },
            "initContainers": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.ContainerInstance/containerGroups@2023-05-01#properties/properties/properties/initContainers"
                },
                "description": "Optional. A list of container definitions which will be executed before the application container starts."
              },
              "nullable": true
            },
            "subnets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/containerGroupSubnetIdType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The subnets to use by the container group."
              }
            },
            "volumes": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.ContainerInstance/containerGroups@2023-05-01#properties/properties/properties/volumes"
                },
                "description": "Optional. Specify if volumes (emptyDir, AzureFileShare or GitRepo) shall be attached to your containergroup."
              },
              "nullable": true
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.ContainerInstance/containerGroups@2023-05-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Dedicated",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The container group SKU."
              }
            },
            "customerManagedKey": {
              "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The customer managed key definition."
              }
            },
            "availabilityZone": {
              "type": "int",
              "allowedValues": [
                -1,
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Required. If set to 1, 2 or 3, the availability zone is hardcoded to that value. If set to -1, no zone is defined. Note that the availability zone numbers here are the logical availability zone in your Azure subscription. Different subscriptions might have a different mapping of the physical zone and logical zone. To understand more, please refer to [Physical and logical availability zones](https://learn.microsoft.com/en-us/azure/reliability/availability-zones-overview?tabs=azure-cli#physical-and-logical-availability-zones)."
              }
            },
            "priority": {
              "type": "string",
              "allowedValues": [
                "Regular",
                "Spot"
              ],
              "defaultValue": "Regular",
              "metadata": {
                "description": "Optional. The priority of the container group."
              }
            }
          },
          "variables": {
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]"
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2024-11-01",
              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
            },
            "law": {
              "condition": "[not(empty(parameters('logAnalytics')))]",
              "existing": true,
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2025-02-01",
              "subscriptionId": "[split(parameters('logAnalytics').workspaceResourceId, '/')[2]]",
              "resourceGroup": "[split(parameters('logAnalytics').workspaceResourceId, '/')[4]]",
              "name": "[last(split(parameters('logAnalytics').workspaceResourceId, '/'))]"
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.containerinstance-containergroup.{0}.{1}', replace('0.6.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "cMKKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2024-11-01",
              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
            },
            "cMKUserAssignedIdentity": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
              "existing": true,
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2024-11-30",
              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
            },
            "containergroup": {
              "type": "Microsoft.ContainerInstance/containerGroups",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "zones": "[if(not(equals(parameters('availabilityZone'), -1)), array(string(parameters('availabilityZone'))), null())]",
              "properties": {
                "copy": [
                  {
                    "name": "containers",
                    "count": "[length(parameters('containers'))]",
                    "input": {
                      "name": "[parameters('containers')[copyIndex('containers')].name]",
                      "properties": {
                        "command": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'command')]",
                        "environmentVariables": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'environmentVariables')]",
                        "image": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'image')]",
                        "livenessProbe": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'livenessProbe')]",
                        "ports": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'ports')]",
                        "readinessProbe": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'readinessProbe')]",
                        "resources": {
                          "requests": {
                            "cpu": "[parameters('containers')[copyIndex('containers')].properties.resources.requests.cpu]",
                            "gpu": "[tryGet(parameters('containers')[copyIndex('containers')].properties.resources.requests, 'gpu')]",
                            "memoryInGB": "[json(tryGet(parameters('containers')[copyIndex('containers')].properties.resources.requests, 'memoryInGB'))]"
                          },
                          "limits": "[if(not(empty(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'))), createObject('cpu', tryGet(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'), 'cpu'), 'gpu', tryGet(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'), 'gpu'), 'memoryInGB', if(not(empty(tryGet(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'), 'memoryInGB'))), json(tryGet(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'), 'memoryInGB')), null())), null())]"
                        },
                        "securityContext": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'securityContext')]",
                        "volumeMounts": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'volumeMounts')]"
                      }
                    }
                  },
                  {
                    "name": "subnetIds",
                    "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                    "input": {
                      "id": "[coalesce(parameters('subnets'), createArray())[copyIndex('subnetIds')].subnetResourceId]",
                      "name": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex('subnetIds')], 'name')]"
                    }
                  }
                ],
                "diagnostics": "[if(not(empty(parameters('logAnalytics'))), createObject('logAnalytics', createObject('logType', parameters('logAnalytics').logType, 'workspaceId', reference('law').customerId, 'workspaceKey', listKeys('law', '2025-02-01').primarySharedKey, 'workspaceResourceId', tryGet(parameters('logAnalytics'), 'workspaceResourceId'), 'metadata', tryGet(parameters('logAnalytics'), 'metadata'))), null())]",
                "encryptionProperties": "[if(not(empty(parameters('customerManagedKey'))), createObject('identity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2], split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))), null()), 'vaultBaseUrl', reference('cMKKeyVault').vaultUri, 'keyName', parameters('customerManagedKey').keyName, 'keyVersion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/')))), null())]",
                "imageRegistryCredentials": "[parameters('imageRegistryCredentials')]",
                "initContainers": "[parameters('initContainers')]",
                "restartPolicy": "[parameters('restartPolicy')]",
                "osType": "[parameters('osType')]",
                "ipAddress": "[if(not(empty(parameters('ipAddress'))), createObject('autoGeneratedDomainNameLabelScope', if(not(empty(tryGet(parameters('dnsConfig'), 'nameServers'))), tryGet(parameters('ipAddress'), 'autoGeneratedDomainNameLabelScope'), null()), 'dnsNameLabel', tryGet(parameters('ipAddress'), 'dnsNameLabel'), 'ip', tryGet(parameters('ipAddress'), 'ip'), 'ports', coalesce(tryGet(parameters('ipAddress'), 'ports'), createArray()), 'type', coalesce(tryGet(parameters('ipAddress'), 'type'), 'Public')), null())]",
                "sku": "[parameters('sku')]",
                "volumes": "[parameters('volumes')]",
                "dnsConfig": "[parameters('dnsConfig')]",
                "priority": "[parameters('priority')]"
              },
              "dependsOn": [
                "cMKKeyVault",
                "cMKKeyVault::cMKKey",
                "law"
              ]
            },
            "containergroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.ContainerInstance/containerGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "containergroup"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the container group."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the container group."
              },
              "value": "[resourceId('Microsoft.ContainerInstance/containerGroups', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the container group was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "iPv4Address": {
              "type": "string",
              "metadata": {
                "description": "The IPv4 address of the container group."
              },
              "value": "[reference('containergroup').ipAddress.ip]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('containergroup', '2023-05-01', 'full'), 'identity'), 'principalId')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('containergroup', '2023-05-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "rg",
        "storageAccount"
      ]
    },
    "bastionHost": {
      "condition": "[and(variables('effectiveDeployNetworking'), parameters('bastionHostDeploy'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "bastion-host-deployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('bastionHostName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "virtualNetworkResourceId": {
            "value": "[reference('virtualNetwork').outputs.resourceId.value]"
          },
          "skuName": {
            "value": "Developer"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "diagnosticSettings": "[if(parameters('deployDiagnostics'), createObject('value', createArray(createObject('name', variables('sendToLogAnalyticsName'), 'workspaceResourceId', reference('logAnalyticsWorkspace').outputs.resourceId.value, 'logCategoriesAndGroups', createArray(createObject('category', 'BastionAuditLogs')), 'metricCategories', createArray()))), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8154163068428418954"
            },
            "name": "Bastion Hosts",
            "description": "This module deploys a Bastion Host."
          },
          "definitions": {
            "publicIPAddressObjectType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the Public IP Address."
                  }
                },
                "publicIpPrefixResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                  }
                },
                "publicIPAllocationMethod": {
                  "type": "string",
                  "allowedValues": [
                    "Dynamic",
                    "Static"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The public IP address allocation method."
                  }
                },
                "availabilityZones": {
                  "type": "array",
                  "items": {
                    "type": "int"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                  }
                },
                "publicIPAddressVersion": {
                  "type": "string",
                  "allowedValues": [
                    "IPv4",
                    "IPv6"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP address version."
                  }
                },
                "dnsSettings": {
                  "$ref": "#/definitions/dnsSettingsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The DNS settings of the public IP address."
                  }
                },
                "ipTags": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ipTagType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of tags associated with the public IP address."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The lock settings of the service."
                  }
                },
                "skuName": {
                  "type": "string",
                  "allowedValues": [
                    "Basic",
                    "Standard"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a public IP address SKU."
                  }
                },
                "skuTier": {
                  "type": "string",
                  "allowedValues": [
                    "Global",
                    "Regional"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tier of a public IP address SKU."
                  }
                },
                "ddosSettings": {
                  "$ref": "#/definitions/ddosSettingsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Location for the Public IP resource."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create for the Public IP resource."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable usage telemetry for the Public IP module."
                  }
                },
                "idleTimeoutInMinutes": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Idle timeout in minutes for the Public IP resource."
                  }
                },
                "tags": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Network/publicIPAddresses@2024-07-01#properties/tags"
                    },
                    "description": "Optional. Tags to apply to the Public IP resource."
                  },
                  "nullable": true
                },
                "diagnosticSettings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/diagnosticSettingFullType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Diagnostic settings for the Public IP resource."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the properties of the Public IP to create and be used by Azure Bastion, if no existing public IP was provided."
              }
            },
            "ddosSettingsType": {
              "type": "object",
              "properties": {
                "ddosProtectionPlan": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The DDoS protection plan associated with the public IP address."
                  }
                },
                "protectionMode": {
                  "type": "string",
                  "allowedValues": [
                    "Enabled"
                  ],
                  "metadata": {
                    "description": "Required. The DDoS protection policy customizations."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.9.0"
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "diagnosticSettingLogsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "dnsSettingsType": {
              "type": "object",
              "properties": {
                "domainNameLabel": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                  }
                },
                "domainNameLabelScope": {
                  "type": "string",
                  "allowedValues": [
                    "NoReuse",
                    "ResourceGroupReuse",
                    "SubscriptionReuse",
                    "TenantReuse"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                  }
                },
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                  }
                },
                "reverseFqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.9.0"
                }
              }
            },
            "ipTagType": {
              "type": "object",
              "properties": {
                "ipTagType": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The IP tag type."
                  }
                },
                "tag": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The IP tag."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.9.0"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Azure Bastion resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "virtualNetworkResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Shared services Virtual Network resource Id."
              }
            },
            "bastionSubnetPublicIpResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Public IP resource ID to associate to the azureBastionSubnet. If empty, then the Public IP that is created as part of this module will be applied to the azureBastionSubnet. This parameter is ignored when enablePrivateOnlyBastion is true."
              }
            },
            "publicIPAddressObject": {
              "$ref": "#/definitions/publicIPAddressObjectType",
              "defaultValue": {
                "name": "[format('{0}-pip', parameters('name'))]"
              },
              "metadata": {
                "description": "Optional. Specifies the properties of the Public IP to create and be used by Azure Bastion, if no existing public IP was provided. This parameter is ignored when enablePrivateOnlyBastion is true."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Developer",
                "Premium",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The SKU of this Bastion Host."
              }
            },
            "disableCopyPaste": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Choose to disable or enable Copy Paste. For Basic and Developer SKU Copy/Paste is always enabled."
              }
            },
            "enableFileCopy": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Choose to disable or enable File Copy. Not supported for Basic and Developer SKU."
              }
            },
            "enableIpConnect": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Choose to disable or enable IP Connect. Not supported for Basic and Developer SKU."
              }
            },
            "enableKerberos": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Choose to disable or enable Kerberos authentication. Not supported for Developer SKU."
              }
            },
            "enableShareableLink": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Choose to disable or enable Shareable Link. Not supported for Basic and Developer SKU."
              }
            },
            "enableSessionRecording": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Choose to disable or enable Session Recording feature. The Premium SKU is required for this feature. If Session Recording is enabled, the Native client support will be disabled."
              }
            },
            "enablePrivateOnlyBastion": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Choose to disable or enable Private-only Bastion deployment. The Premium SKU is required for this feature."
              }
            },
            "scaleUnits": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "Optional. The scale units for the Bastion Host resource. The Basic and Developer SKU only support 2 scale units."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/bastionHosts@2024-07-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "availabilityZones": {
              "type": "array",
              "items": {
                "type": "int"
              },
              "defaultValue": [],
              "allowedValues": [
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Optional. The list of Availability zones to use for the zone-redundant resources."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-bastionhost.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "azureBastion": {
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2024-07-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(parameters('tags'), createObject())]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "zones": "[if(equals(parameters('skuName'), 'Developer'), createArray(), map(parameters('availabilityZones'), lambda('zone', format('{0}', lambdaVariables('zone')))))]",
              "properties": "[union(createObject('scaleUnits', if(or(equals(parameters('skuName'), 'Basic'), equals(parameters('skuName'), 'Developer')), 2, parameters('scaleUnits')), 'ipConfigurations', if(equals(parameters('skuName'), 'Developer'), createArray(), createArray(createObject('name', 'IpConfAzureBastionSubnet', 'properties', union(createObject('subnet', createObject('id', format('{0}/subnets/AzureBastionSubnet', parameters('virtualNetworkResourceId')))), if(not(parameters('enablePrivateOnlyBastion')), createObject('publicIPAddress', createObject('id', if(not(empty(parameters('bastionSubnetPublicIpResourceId'))), parameters('bastionSubnetPublicIpResourceId'), reference('publicIPAddress').outputs.resourceId.value))), createObject())))))), if(equals(parameters('skuName'), 'Developer'), createObject('virtualNetwork', createObject('id', parameters('virtualNetworkResourceId'))), createObject()), if(or(or(equals(parameters('skuName'), 'Basic'), equals(parameters('skuName'), 'Standard')), equals(parameters('skuName'), 'Premium')), createObject('enableKerberos', parameters('enableKerberos')), createObject()), if(or(equals(parameters('skuName'), 'Standard'), equals(parameters('skuName'), 'Premium')), createObject('enableTunneling', if(equals(parameters('skuName'), 'Standard'), true(), if(parameters('enableSessionRecording'), false(), true())), 'disableCopyPaste', parameters('disableCopyPaste'), 'enableFileCopy', parameters('enableFileCopy'), 'enableIpConnect', parameters('enableIpConnect'), 'enableShareableLink', parameters('enableShareableLink')), createObject()), if(equals(parameters('skuName'), 'Premium'), createObject('enableSessionRecording', parameters('enableSessionRecording'), 'enablePrivateOnlyBastion', parameters('enablePrivateOnlyBastion')), createObject()))]",
              "dependsOn": [
                "publicIPAddress"
              ]
            },
            "azureBastion_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "azureBastion"
              ]
            },
            "azureBastion_diagnosticSettings": {
              "copy": {
                "name": "azureBastion_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "azureBastion"
              ]
            },
            "azureBastion_roleAssignments": {
              "copy": {
                "name": "azureBastion_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/bastionHosts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "azureBastion"
              ]
            },
            "publicIPAddress": {
              "condition": "[and(and(empty(parameters('bastionSubnetPublicIpResourceId')), not(equals(parameters('skuName'), 'Developer'))), not(parameters('enablePrivateOnlyBastion')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Bastion-PIP', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('publicIPAddressObject').name]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'diagnosticSettings')]"
                  },
                  "ddosSettings": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'ddosSettings')]"
                  },
                  "dnsSettings": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'dnsSettings')]"
                  },
                  "idleTimeoutInMinutes": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'idleTimeoutInMinutes')]"
                  },
                  "ipTags": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'ipTags')]"
                  },
                  "publicIPAddressVersion": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'publicIPAddressVersion')]"
                  },
                  "publicIPAllocationMethod": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'publicIPAllocationMethod')]"
                  },
                  "publicIpPrefixResourceId": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'publicIpPrefixResourceId')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'roleAssignments')]"
                  },
                  "skuName": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'skuName')]"
                  },
                  "skuTier": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'skuTier')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('publicIPAddressObject'), 'tags'), parameters('tags'))]"
                  },
                  "availabilityZones": {
                    "value": "[coalesce(tryGet(parameters('publicIPAddressObject'), 'availabilityZones'), if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), null()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "14921988046704902194"
                    },
                    "name": "Public IP Addresses",
                    "description": "This module deploys a Public IP Address."
                  },
                  "definitions": {
                    "dnsSettingsType": {
                      "type": "object",
                      "properties": {
                        "domainNameLabel": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                          }
                        },
                        "domainNameLabelScope": {
                          "type": "string",
                          "allowedValues": [
                            "NoReuse",
                            "ResourceGroupReuse",
                            "SubscriptionReuse",
                            "TenantReuse"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                          }
                        },
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                          }
                        },
                        "reverseFqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ddosSettingsType": {
                      "type": "object",
                      "properties": {
                        "ddosProtectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The DDoS protection plan associated with the public IP address."
                          }
                        },
                        "protectionMode": {
                          "type": "string",
                          "allowedValues": [
                            "Enabled"
                          ],
                          "metadata": {
                            "description": "Required. The DDoS protection policy customizations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipTagType": {
                      "type": "object",
                      "properties": {
                        "ipTagType": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The IP tag type."
                          }
                        },
                        "tag": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The IP tag."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Public IP Address."
                      }
                    },
                    "publicIpPrefixResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                      }
                    },
                    "publicIPAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Static",
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Optional. The public IP address allocation method."
                      }
                    },
                    "availabilityZones": {
                      "type": "array",
                      "items": {
                        "type": "int"
                      },
                      "defaultValue": [
                        1,
                        2,
                        3
                      ],
                      "allowedValues": [
                        1,
                        2,
                        3
                      ],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                      }
                    },
                    "publicIPAddressVersion": {
                      "type": "string",
                      "defaultValue": "IPv4",
                      "allowedValues": [
                        "IPv4",
                        "IPv6"
                      ],
                      "metadata": {
                        "description": "Optional. IP address version."
                      }
                    },
                    "dnsSettings": {
                      "$ref": "#/definitions/dnsSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DNS settings of the public IP address."
                      }
                    },
                    "ipTags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipTagType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of tags associated with the public IP address."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Name of a public IP address SKU."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Regional",
                      "allowedValues": [
                        "Global",
                        "Regional"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of a public IP address SKU."
                      }
                    },
                    "ddosSettings": {
                      "$ref": "#/definitions/ddosSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "idleTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 4,
                      "metadata": {
                        "description": "Optional. The idle timeout of the public IP address."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.9.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "publicIpAddress": {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "zones": "[map(parameters('availabilityZones'), lambda('zone', string(lambdaVariables('zone'))))]",
                      "properties": {
                        "ddosSettings": "[parameters('ddosSettings')]",
                        "dnsSettings": "[parameters('dnsSettings')]",
                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                        "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                        "ipTags": "[parameters('ipTags')]"
                      }
                    },
                    "publicIpAddress_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_roleAssignments": {
                      "copy": {
                        "name": "publicIpAddress_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_diagnosticSettings": {
                      "copy": {
                        "name": "publicIpAddress_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the public IP address was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the public IP address."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the public IP address."
                      },
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                    },
                    "ipAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "The public IP address of the public IP address resource."
                      },
                      "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('publicIpAddress', '2024-05-01', 'full').location]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the Azure Bastion was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name the Azure Bastion."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID the Azure Bastion."
              },
              "value": "[resourceId('Microsoft.Network/bastionHosts', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('azureBastion', '2024-07-01', 'full').location]"
            },
            "ipConfAzureBastionSubnet": {
              "type": "object",
              "metadata": {
                "description": "The Public IPconfiguration object for the AzureBastionSubnet."
              },
              "value": "[if(equals(parameters('skuName'), 'Developer'), createObject(), reference('azureBastion').ipConfigurations[0])]"
            }
          }
        }
      },
      "dependsOn": [
        "logAnalyticsWorkspace",
        "rg",
        "virtualNetwork"
      ]
    }
  },
  "outputs": {
    "WEBAPP_FOUNDRY_VTT_URL": {
      "type": "string",
      "value": "[if(equals(parameters('computeService'), 'Web App'), reference('webAppFoundryVtt').outputs.defaultHostname.value, '')]"
    },
    "WEBAPP_DDBPROXY_URL": {
      "type": "string",
      "value": "[if(and(equals(parameters('computeService'), 'Web App'), parameters('deployDdbProxy')), reference('webAppDdbProxy').outputs.defaultHostname.value, '')]"
    },
    "WEBAPP_FOUNDRY_VTT_RESOURCE_ID": {
      "type": "string",
      "value": "[if(equals(parameters('computeService'), 'Web App'), reference('webAppFoundryVtt').outputs.resourceId.value, '')]"
    },
    "CONTAINER_INSTANCE_FOUNDRY_VTT_IPV4ADDRESS": {
      "type": "string",
      "value": "[if(equals(parameters('computeService'), 'Container Instance'), reference('containerGroup').outputs.iPv4Address.value, '')]"
    },
    "CONTAINER_INSTANCE_FOUNDRY_VTT_RESOURCE_ID": {
      "type": "string",
      "value": "[if(equals(parameters('computeService'), 'Container Instance'), reference('containerGroup').outputs.resourceId.value, '')]"
    },
    "AZURE_ENV_NAME": {
      "type": "string",
      "value": "[parameters('environmentName')]"
    },
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_RESOURCE_GROUP_NAME": {
      "type": "string",
      "value": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]"
    },
    "AZURE_PRINCIPAL_ID": {
      "type": "string",
      "value": "[parameters('principalId')]"
    },
    "AZURE_PRINCIPAL_ID_TYPE": {
      "type": "string",
      "value": "[parameters('principalIdType')]"
    },
    "KEY_VAULT_NAME": {
      "type": "string",
      "value": "[reference('keyVault').outputs.name.value]"
    },
    "KEY_VAULT_URI": {
      "type": "string",
      "value": "[reference('keyVault').outputs.uri.value]"
    },
    "KEY_VAULT_RESOURCE_ID": {
      "type": "string",
      "value": "[reference('keyVault').outputs.resourceId.value]"
    },
    "LOG_ANALYTICS_WORKSPACE_NAME": {
      "type": "string",
      "value": "[if(parameters('deployDiagnostics'), reference('logAnalyticsWorkspace').outputs.name.value, '')]"
    },
    "LOG_ANALYTICS_WORKSPACE_RESOURCE_ID": {
      "type": "string",
      "value": "[if(parameters('deployDiagnostics'), reference('logAnalyticsWorkspace').outputs.resourceId.value, '')]"
    },
    "FOUNDRY_VTT_URL": {
      "type": "string",
      "value": "[if(equals(parameters('computeService'), 'Web App'), format('https://{0}/', reference('webAppFoundryVtt').outputs.defaultHostname.value), if(equals(parameters('computeService'), 'Container Instance'), format('http://{0}:30000/', reference('containerGroup').outputs.iPv4Address.value), ''))]"
    }
  }
}